/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordApproveWhitelistedAddressRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordApproveWhitelistedAddressRequest {
  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_WHITELISTED_ADDRESS_IDS = "whitelistedAddressIds";
  @SerializedName(SERIALIZED_NAME_WHITELISTED_ADDRESS_IDS)
  private List<String> whitelistedAddressIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  private List<String> ids = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASYNC = "async";
  @SerializedName(SERIALIZED_NAME_ASYNC)
  private Boolean async;

  public TgvalidatordApproveWhitelistedAddressRequest() {
  }

  public TgvalidatordApproveWhitelistedAddressRequest signature(String signature) {
    this.signature = signature;
    return this;
  }

  /**
   * Get signature
   * @return signature
   */
  @javax.annotation.Nonnull
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }


  public TgvalidatordApproveWhitelistedAddressRequest comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nonnull
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public TgvalidatordApproveWhitelistedAddressRequest whitelistedAddressIds(List<String> whitelistedAddressIds) {
    this.whitelistedAddressIds = whitelistedAddressIds;
    return this;
  }

  public TgvalidatordApproveWhitelistedAddressRequest addWhitelistedAddressIdsItem(String whitelistedAddressIdsItem) {
    if (this.whitelistedAddressIds == null) {
      this.whitelistedAddressIds = new ArrayList<>();
    }
    this.whitelistedAddressIds.add(whitelistedAddressIdsItem);
    return this;
  }

  /**
   * deprecated: use the ids parameter instead 
   * @return whitelistedAddressIds
   */
  @javax.annotation.Nullable
  public List<String> getWhitelistedAddressIds() {
    return whitelistedAddressIds;
  }

  public void setWhitelistedAddressIds(List<String> whitelistedAddressIds) {
    this.whitelistedAddressIds = whitelistedAddressIds;
  }


  public TgvalidatordApproveWhitelistedAddressRequest ids(List<String> ids) {
    this.ids = ids;
    return this;
  }

  public TgvalidatordApproveWhitelistedAddressRequest addIdsItem(String idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<>();
    }
    this.ids.add(idsItem);
    return this;
  }

  /**
   * Get ids
   * @return ids
   */
  @javax.annotation.Nonnull
  public List<String> getIds() {
    return ids;
  }

  public void setIds(List<String> ids) {
    this.ids = ids;
  }


  public TgvalidatordApproveWhitelistedAddressRequest async(Boolean async) {
    this.async = async;
    return this;
  }

  /**
   * For large numbers of approvals, will store them and process them in background
   * @return async
   */
  @javax.annotation.Nullable
  public Boolean getAsync() {
    return async;
  }

  public void setAsync(Boolean async) {
    this.async = async;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordApproveWhitelistedAddressRequest tgvalidatordApproveWhitelistedAddressRequest = (TgvalidatordApproveWhitelistedAddressRequest) o;
    return Objects.equals(this.signature, tgvalidatordApproveWhitelistedAddressRequest.signature) &&
        Objects.equals(this.comment, tgvalidatordApproveWhitelistedAddressRequest.comment) &&
        Objects.equals(this.whitelistedAddressIds, tgvalidatordApproveWhitelistedAddressRequest.whitelistedAddressIds) &&
        Objects.equals(this.ids, tgvalidatordApproveWhitelistedAddressRequest.ids) &&
        Objects.equals(this.async, tgvalidatordApproveWhitelistedAddressRequest.async);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signature, comment, whitelistedAddressIds, ids, async);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordApproveWhitelistedAddressRequest {\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    whitelistedAddressIds: ").append(toIndentedString(whitelistedAddressIds)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    async: ").append(toIndentedString(async)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("signature");
    openapiFields.add("comment");
    openapiFields.add("whitelistedAddressIds");
    openapiFields.add("ids");
    openapiFields.add("async");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("signature");
    openapiRequiredFields.add("comment");
    openapiRequiredFields.add("ids");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordApproveWhitelistedAddressRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordApproveWhitelistedAddressRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordApproveWhitelistedAddressRequest is not found in the empty JSON string", TgvalidatordApproveWhitelistedAddressRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordApproveWhitelistedAddressRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordApproveWhitelistedAddressRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TgvalidatordApproveWhitelistedAddressRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if (!jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("whitelistedAddressIds") != null && !jsonObj.get("whitelistedAddressIds").isJsonNull() && !jsonObj.get("whitelistedAddressIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `whitelistedAddressIds` to be an array in the JSON string but got `%s`", jsonObj.get("whitelistedAddressIds").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ids` to be an array in the JSON string but got `%s`", jsonObj.get("ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordApproveWhitelistedAddressRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordApproveWhitelistedAddressRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordApproveWhitelistedAddressRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordApproveWhitelistedAddressRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordApproveWhitelistedAddressRequest>() {
           @Override
           public void write(JsonWriter out, TgvalidatordApproveWhitelistedAddressRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordApproveWhitelistedAddressRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordApproveWhitelistedAddressRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordApproveWhitelistedAddressRequest
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordApproveWhitelistedAddressRequest
   */
  public static TgvalidatordApproveWhitelistedAddressRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordApproveWhitelistedAddressRequest.class);
  }

  /**
   * Convert an instance of TgvalidatordApproveWhitelistedAddressRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

