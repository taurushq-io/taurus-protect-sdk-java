/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * ETHLocal
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class ETHLocal {
  public static final String SERIALIZED_NAME_ADDRESS_ID = "addressId";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ID)
  private String addressId;

  public static final String SERIALIZED_NAME_FORWARDER_ADDRESS_ID = "forwarderAddressId";
  @SerializedName(SERIALIZED_NAME_FORWARDER_ADDRESS_ID)
  private String forwarderAddressId;

  public static final String SERIALIZED_NAME_AUTO_APPROVE = "autoApprove";
  @SerializedName(SERIALIZED_NAME_AUTO_APPROVE)
  private Boolean autoApprove;

  public static final String SERIALIZED_NAME_CREATOR_ADDRESS_ID = "creatorAddressId";
  @SerializedName(SERIALIZED_NAME_CREATOR_ADDRESS_ID)
  private String creatorAddressId;

  public ETHLocal() {
  }

  public ETHLocal addressId(String addressId) {
    this.addressId = addressId;
    return this;
  }

  /**
   * Get addressId
   * @return addressId
   */
  @javax.annotation.Nullable
  public String getAddressId() {
    return addressId;
  }

  public void setAddressId(String addressId) {
    this.addressId = addressId;
  }


  public ETHLocal forwarderAddressId(String forwarderAddressId) {
    this.forwarderAddressId = forwarderAddressId;
    return this;
  }

  /**
   * Get forwarderAddressId
   * @return forwarderAddressId
   */
  @javax.annotation.Nullable
  public String getForwarderAddressId() {
    return forwarderAddressId;
  }

  public void setForwarderAddressId(String forwarderAddressId) {
    this.forwarderAddressId = forwarderAddressId;
  }


  public ETHLocal autoApprove(Boolean autoApprove) {
    this.autoApprove = autoApprove;
    return this;
  }

  /**
   * Get autoApprove
   * @return autoApprove
   */
  @javax.annotation.Nullable
  public Boolean getAutoApprove() {
    return autoApprove;
  }

  public void setAutoApprove(Boolean autoApprove) {
    this.autoApprove = autoApprove;
  }


  public ETHLocal creatorAddressId(String creatorAddressId) {
    this.creatorAddressId = creatorAddressId;
    return this;
  }

  /**
   * Get creatorAddressId
   * @return creatorAddressId
   */
  @javax.annotation.Nullable
  public String getCreatorAddressId() {
    return creatorAddressId;
  }

  public void setCreatorAddressId(String creatorAddressId) {
    this.creatorAddressId = creatorAddressId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ETHLocal eTHLocal = (ETHLocal) o;
    return Objects.equals(this.addressId, eTHLocal.addressId) &&
        Objects.equals(this.forwarderAddressId, eTHLocal.forwarderAddressId) &&
        Objects.equals(this.autoApprove, eTHLocal.autoApprove) &&
        Objects.equals(this.creatorAddressId, eTHLocal.creatorAddressId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressId, forwarderAddressId, autoApprove, creatorAddressId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ETHLocal {\n");
    sb.append("    addressId: ").append(toIndentedString(addressId)).append("\n");
    sb.append("    forwarderAddressId: ").append(toIndentedString(forwarderAddressId)).append("\n");
    sb.append("    autoApprove: ").append(toIndentedString(autoApprove)).append("\n");
    sb.append("    creatorAddressId: ").append(toIndentedString(creatorAddressId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressId");
    openapiFields.add("forwarderAddressId");
    openapiFields.add("autoApprove");
    openapiFields.add("creatorAddressId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ETHLocal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ETHLocal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ETHLocal is not found in the empty JSON string", ETHLocal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ETHLocal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ETHLocal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addressId") != null && !jsonObj.get("addressId").isJsonNull()) && !jsonObj.get("addressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressId").toString()));
      }
      if ((jsonObj.get("forwarderAddressId") != null && !jsonObj.get("forwarderAddressId").isJsonNull()) && !jsonObj.get("forwarderAddressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forwarderAddressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forwarderAddressId").toString()));
      }
      if ((jsonObj.get("creatorAddressId") != null && !jsonObj.get("creatorAddressId").isJsonNull()) && !jsonObj.get("creatorAddressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorAddressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorAddressId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ETHLocal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ETHLocal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ETHLocal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ETHLocal.class));

       return (TypeAdapter<T>) new TypeAdapter<ETHLocal>() {
           @Override
           public void write(JsonWriter out, ETHLocal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ETHLocal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ETHLocal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ETHLocal
   * @throws IOException if the JSON string is invalid with respect to ETHLocal
   */
  public static ETHLocal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ETHLocal.class);
  }

  /**
   * Convert an instance of ETHLocal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

