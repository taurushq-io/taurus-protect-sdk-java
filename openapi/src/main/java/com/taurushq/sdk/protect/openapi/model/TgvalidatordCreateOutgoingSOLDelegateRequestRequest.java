/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordCreateOutgoingSOLDelegateRequestRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordCreateOutgoingSOLDelegateRequestRequest {
  public static final String SERIALIZED_NAME_FROM_ADDRESS_ID = "fromAddressId";
  @SerializedName(SERIALIZED_NAME_FROM_ADDRESS_ID)
  private String fromAddressId;

  public static final String SERIALIZED_NAME_TO_VALIDATOR_ADDRESS_ID = "toValidatorAddressId";
  @SerializedName(SERIALIZED_NAME_TO_VALIDATOR_ADDRESS_ID)
  private String toValidatorAddressId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_FEE_LIMIT = "feeLimit";
  @SerializedName(SERIALIZED_NAME_FEE_LIMIT)
  private String feeLimit;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_USE_UNCONFIRMED_FUNDS = "useUnconfirmedFunds";
  @SerializedName(SERIALIZED_NAME_USE_UNCONFIRMED_FUNDS)
  private Boolean useUnconfirmedFunds;

  public static final String SERIALIZED_NAME_EXTERNAL_REQUEST_ID = "externalRequestId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REQUEST_ID)
  private String externalRequestId;

  public TgvalidatordCreateOutgoingSOLDelegateRequestRequest() {
  }

  public TgvalidatordCreateOutgoingSOLDelegateRequestRequest fromAddressId(String fromAddressId) {
    this.fromAddressId = fromAddressId;
    return this;
  }

  /**
   * Get fromAddressId
   * @return fromAddressId
   */
  @javax.annotation.Nonnull
  public String getFromAddressId() {
    return fromAddressId;
  }

  public void setFromAddressId(String fromAddressId) {
    this.fromAddressId = fromAddressId;
  }


  public TgvalidatordCreateOutgoingSOLDelegateRequestRequest toValidatorAddressId(String toValidatorAddressId) {
    this.toValidatorAddressId = toValidatorAddressId;
    return this;
  }

  /**
   * Get toValidatorAddressId
   * @return toValidatorAddressId
   */
  @javax.annotation.Nullable
  public String getToValidatorAddressId() {
    return toValidatorAddressId;
  }

  public void setToValidatorAddressId(String toValidatorAddressId) {
    this.toValidatorAddressId = toValidatorAddressId;
  }


  public TgvalidatordCreateOutgoingSOLDelegateRequestRequest amount(String amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }


  public TgvalidatordCreateOutgoingSOLDelegateRequestRequest feeLimit(String feeLimit) {
    this.feeLimit = feeLimit;
    return this;
  }

  /**
   * Get feeLimit
   * @return feeLimit
   */
  @javax.annotation.Nullable
  public String getFeeLimit() {
    return feeLimit;
  }

  public void setFeeLimit(String feeLimit) {
    this.feeLimit = feeLimit;
  }


  public TgvalidatordCreateOutgoingSOLDelegateRequestRequest comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public TgvalidatordCreateOutgoingSOLDelegateRequestRequest useUnconfirmedFunds(Boolean useUnconfirmedFunds) {
    this.useUnconfirmedFunds = useUnconfirmedFunds;
    return this;
  }

  /**
   * Get useUnconfirmedFunds
   * @return useUnconfirmedFunds
   */
  @javax.annotation.Nullable
  public Boolean getUseUnconfirmedFunds() {
    return useUnconfirmedFunds;
  }

  public void setUseUnconfirmedFunds(Boolean useUnconfirmedFunds) {
    this.useUnconfirmedFunds = useUnconfirmedFunds;
  }


  public TgvalidatordCreateOutgoingSOLDelegateRequestRequest externalRequestId(String externalRequestId) {
    this.externalRequestId = externalRequestId;
    return this;
  }

  /**
   * Identifier for the request in the user&#39;s system. This must be unique. Attempting to create a request with an existing externalRequestId will do nothing and return the originally created request
   * @return externalRequestId
   */
  @javax.annotation.Nullable
  public String getExternalRequestId() {
    return externalRequestId;
  }

  public void setExternalRequestId(String externalRequestId) {
    this.externalRequestId = externalRequestId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordCreateOutgoingSOLDelegateRequestRequest tgvalidatordCreateOutgoingSOLDelegateRequestRequest = (TgvalidatordCreateOutgoingSOLDelegateRequestRequest) o;
    return Objects.equals(this.fromAddressId, tgvalidatordCreateOutgoingSOLDelegateRequestRequest.fromAddressId) &&
        Objects.equals(this.toValidatorAddressId, tgvalidatordCreateOutgoingSOLDelegateRequestRequest.toValidatorAddressId) &&
        Objects.equals(this.amount, tgvalidatordCreateOutgoingSOLDelegateRequestRequest.amount) &&
        Objects.equals(this.feeLimit, tgvalidatordCreateOutgoingSOLDelegateRequestRequest.feeLimit) &&
        Objects.equals(this.comment, tgvalidatordCreateOutgoingSOLDelegateRequestRequest.comment) &&
        Objects.equals(this.useUnconfirmedFunds, tgvalidatordCreateOutgoingSOLDelegateRequestRequest.useUnconfirmedFunds) &&
        Objects.equals(this.externalRequestId, tgvalidatordCreateOutgoingSOLDelegateRequestRequest.externalRequestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fromAddressId, toValidatorAddressId, amount, feeLimit, comment, useUnconfirmedFunds, externalRequestId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordCreateOutgoingSOLDelegateRequestRequest {\n");
    sb.append("    fromAddressId: ").append(toIndentedString(fromAddressId)).append("\n");
    sb.append("    toValidatorAddressId: ").append(toIndentedString(toValidatorAddressId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    feeLimit: ").append(toIndentedString(feeLimit)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    useUnconfirmedFunds: ").append(toIndentedString(useUnconfirmedFunds)).append("\n");
    sb.append("    externalRequestId: ").append(toIndentedString(externalRequestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fromAddressId");
    openapiFields.add("toValidatorAddressId");
    openapiFields.add("amount");
    openapiFields.add("feeLimit");
    openapiFields.add("comment");
    openapiFields.add("useUnconfirmedFunds");
    openapiFields.add("externalRequestId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fromAddressId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordCreateOutgoingSOLDelegateRequestRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordCreateOutgoingSOLDelegateRequestRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordCreateOutgoingSOLDelegateRequestRequest is not found in the empty JSON string", TgvalidatordCreateOutgoingSOLDelegateRequestRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordCreateOutgoingSOLDelegateRequestRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordCreateOutgoingSOLDelegateRequestRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TgvalidatordCreateOutgoingSOLDelegateRequestRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("fromAddressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromAddressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromAddressId").toString()));
      }
      if ((jsonObj.get("toValidatorAddressId") != null && !jsonObj.get("toValidatorAddressId").isJsonNull()) && !jsonObj.get("toValidatorAddressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toValidatorAddressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toValidatorAddressId").toString()));
      }
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("feeLimit") != null && !jsonObj.get("feeLimit").isJsonNull()) && !jsonObj.get("feeLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feeLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feeLimit").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("externalRequestId") != null && !jsonObj.get("externalRequestId").isJsonNull()) && !jsonObj.get("externalRequestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalRequestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalRequestId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordCreateOutgoingSOLDelegateRequestRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordCreateOutgoingSOLDelegateRequestRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordCreateOutgoingSOLDelegateRequestRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordCreateOutgoingSOLDelegateRequestRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordCreateOutgoingSOLDelegateRequestRequest>() {
           @Override
           public void write(JsonWriter out, TgvalidatordCreateOutgoingSOLDelegateRequestRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordCreateOutgoingSOLDelegateRequestRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordCreateOutgoingSOLDelegateRequestRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordCreateOutgoingSOLDelegateRequestRequest
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordCreateOutgoingSOLDelegateRequestRequest
   */
  public static TgvalidatordCreateOutgoingSOLDelegateRequestRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordCreateOutgoingSOLDelegateRequestRequest.class);
  }

  /**
   * Convert an instance of TgvalidatordCreateOutgoingSOLDelegateRequestRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

