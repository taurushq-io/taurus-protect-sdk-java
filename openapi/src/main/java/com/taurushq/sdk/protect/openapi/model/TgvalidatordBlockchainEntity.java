/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordCurrency;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordDOTBlockchainInfo;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordEVMBlockchainInfo;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordBlockchainEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordBlockchainEntity {
  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_BASE_CURRENCY = "baseCurrency";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY)
  private TgvalidatordCurrency baseCurrency;

  public static final String SERIALIZED_NAME_DOT_INFO = "dotInfo";
  @SerializedName(SERIALIZED_NAME_DOT_INFO)
  private TgvalidatordDOTBlockchainInfo dotInfo;

  public static final String SERIALIZED_NAME_ETH_INFO = "ethInfo";
  @SerializedName(SERIALIZED_NAME_ETH_INFO)
  private TgvalidatordEVMBlockchainInfo ethInfo;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_CHAIN_ID = "chainId";
  @SerializedName(SERIALIZED_NAME_CHAIN_ID)
  private String chainId;

  public static final String SERIALIZED_NAME_BLACKHOLE_ADDRESS = "blackholeAddress";
  @SerializedName(SERIALIZED_NAME_BLACKHOLE_ADDRESS)
  private String blackholeAddress;

  public static final String SERIALIZED_NAME_CONFIRMATIONS = "confirmations";
  @SerializedName(SERIALIZED_NAME_CONFIRMATIONS)
  private String confirmations;

  public static final String SERIALIZED_NAME_BLOCK_HEIGHT = "blockHeight";
  @SerializedName(SERIALIZED_NAME_BLOCK_HEIGHT)
  private String blockHeight;

  public static final String SERIALIZED_NAME_IS_LAYER2_CHAIN = "isLayer2Chain";
  @SerializedName(SERIALIZED_NAME_IS_LAYER2_CHAIN)
  private Boolean isLayer2Chain;

  public static final String SERIALIZED_NAME_LAYER1_NETWORK = "layer1Network";
  @SerializedName(SERIALIZED_NAME_LAYER1_NETWORK)
  private String layer1Network;

  public TgvalidatordBlockchainEntity() {
  }

  public TgvalidatordBlockchainEntity symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * symbol of the blockchain (e.g. BTC, ETH, FTM, Cosmos, ...)
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public TgvalidatordBlockchainEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TgvalidatordBlockchainEntity baseCurrency(TgvalidatordCurrency baseCurrency) {
    this.baseCurrency = baseCurrency;
    return this;
  }

  /**
   * Get baseCurrency
   * @return baseCurrency
   */
  @javax.annotation.Nullable
  public TgvalidatordCurrency getBaseCurrency() {
    return baseCurrency;
  }

  public void setBaseCurrency(TgvalidatordCurrency baseCurrency) {
    this.baseCurrency = baseCurrency;
  }


  public TgvalidatordBlockchainEntity dotInfo(TgvalidatordDOTBlockchainInfo dotInfo) {
    this.dotInfo = dotInfo;
    return this;
  }

  /**
   * Get dotInfo
   * @return dotInfo
   */
  @javax.annotation.Nullable
  public TgvalidatordDOTBlockchainInfo getDotInfo() {
    return dotInfo;
  }

  public void setDotInfo(TgvalidatordDOTBlockchainInfo dotInfo) {
    this.dotInfo = dotInfo;
  }


  public TgvalidatordBlockchainEntity ethInfo(TgvalidatordEVMBlockchainInfo ethInfo) {
    this.ethInfo = ethInfo;
    return this;
  }

  /**
   * Get ethInfo
   * @return ethInfo
   */
  @javax.annotation.Nullable
  public TgvalidatordEVMBlockchainInfo getEthInfo() {
    return ethInfo;
  }

  public void setEthInfo(TgvalidatordEVMBlockchainInfo ethInfo) {
    this.ethInfo = ethInfo;
  }


  public TgvalidatordBlockchainEntity network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Get network
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public TgvalidatordBlockchainEntity chainId(String chainId) {
    this.chainId = chainId;
    return this;
  }

  /**
   * Get chainId
   * @return chainId
   */
  @javax.annotation.Nullable
  public String getChainId() {
    return chainId;
  }

  public void setChainId(String chainId) {
    this.chainId = chainId;
  }


  public TgvalidatordBlockchainEntity blackholeAddress(String blackholeAddress) {
    this.blackholeAddress = blackholeAddress;
    return this;
  }

  /**
   * Destination address used for cancel requests
   * @return blackholeAddress
   */
  @javax.annotation.Nullable
  public String getBlackholeAddress() {
    return blackholeAddress;
  }

  public void setBlackholeAddress(String blackholeAddress) {
    this.blackholeAddress = blackholeAddress;
  }


  public TgvalidatordBlockchainEntity confirmations(String confirmations) {
    this.confirmations = confirmations;
    return this;
  }

  /**
   * Number of blocks needed for a transaction to be considered as confirmed
   * @return confirmations
   */
  @javax.annotation.Nullable
  public String getConfirmations() {
    return confirmations;
  }

  public void setConfirmations(String confirmations) {
    this.confirmations = confirmations;
  }


  public TgvalidatordBlockchainEntity blockHeight(String blockHeight) {
    this.blockHeight = blockHeight;
    return this;
  }

  /**
   * Current block height
   * @return blockHeight
   */
  @javax.annotation.Nullable
  public String getBlockHeight() {
    return blockHeight;
  }

  public void setBlockHeight(String blockHeight) {
    this.blockHeight = blockHeight;
  }


  public TgvalidatordBlockchainEntity isLayer2Chain(Boolean isLayer2Chain) {
    this.isLayer2Chain = isLayer2Chain;
    return this;
  }

  /**
   * True indicates this is a Layer2 blockchain
   * @return isLayer2Chain
   */
  @javax.annotation.Nullable
  public Boolean getIsLayer2Chain() {
    return isLayer2Chain;
  }

  public void setIsLayer2Chain(Boolean isLayer2Chain) {
    this.isLayer2Chain = isLayer2Chain;
  }


  public TgvalidatordBlockchainEntity layer1Network(String layer1Network) {
    this.layer1Network = layer1Network;
    return this;
  }

  /**
   * Underlying layer 1 blockchain network, only relevant when isLayer2Chain is true
   * @return layer1Network
   */
  @javax.annotation.Nullable
  public String getLayer1Network() {
    return layer1Network;
  }

  public void setLayer1Network(String layer1Network) {
    this.layer1Network = layer1Network;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordBlockchainEntity tgvalidatordBlockchainEntity = (TgvalidatordBlockchainEntity) o;
    return Objects.equals(this.symbol, tgvalidatordBlockchainEntity.symbol) &&
        Objects.equals(this.name, tgvalidatordBlockchainEntity.name) &&
        Objects.equals(this.baseCurrency, tgvalidatordBlockchainEntity.baseCurrency) &&
        Objects.equals(this.dotInfo, tgvalidatordBlockchainEntity.dotInfo) &&
        Objects.equals(this.ethInfo, tgvalidatordBlockchainEntity.ethInfo) &&
        Objects.equals(this.network, tgvalidatordBlockchainEntity.network) &&
        Objects.equals(this.chainId, tgvalidatordBlockchainEntity.chainId) &&
        Objects.equals(this.blackholeAddress, tgvalidatordBlockchainEntity.blackholeAddress) &&
        Objects.equals(this.confirmations, tgvalidatordBlockchainEntity.confirmations) &&
        Objects.equals(this.blockHeight, tgvalidatordBlockchainEntity.blockHeight) &&
        Objects.equals(this.isLayer2Chain, tgvalidatordBlockchainEntity.isLayer2Chain) &&
        Objects.equals(this.layer1Network, tgvalidatordBlockchainEntity.layer1Network);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, name, baseCurrency, dotInfo, ethInfo, network, chainId, blackholeAddress, confirmations, blockHeight, isLayer2Chain, layer1Network);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordBlockchainEntity {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    baseCurrency: ").append(toIndentedString(baseCurrency)).append("\n");
    sb.append("    dotInfo: ").append(toIndentedString(dotInfo)).append("\n");
    sb.append("    ethInfo: ").append(toIndentedString(ethInfo)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    chainId: ").append(toIndentedString(chainId)).append("\n");
    sb.append("    blackholeAddress: ").append(toIndentedString(blackholeAddress)).append("\n");
    sb.append("    confirmations: ").append(toIndentedString(confirmations)).append("\n");
    sb.append("    blockHeight: ").append(toIndentedString(blockHeight)).append("\n");
    sb.append("    isLayer2Chain: ").append(toIndentedString(isLayer2Chain)).append("\n");
    sb.append("    layer1Network: ").append(toIndentedString(layer1Network)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("symbol");
    openapiFields.add("name");
    openapiFields.add("baseCurrency");
    openapiFields.add("dotInfo");
    openapiFields.add("ethInfo");
    openapiFields.add("network");
    openapiFields.add("chainId");
    openapiFields.add("blackholeAddress");
    openapiFields.add("confirmations");
    openapiFields.add("blockHeight");
    openapiFields.add("isLayer2Chain");
    openapiFields.add("layer1Network");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordBlockchainEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordBlockchainEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordBlockchainEntity is not found in the empty JSON string", TgvalidatordBlockchainEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordBlockchainEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordBlockchainEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `baseCurrency`
      if (jsonObj.get("baseCurrency") != null && !jsonObj.get("baseCurrency").isJsonNull()) {
        TgvalidatordCurrency.validateJsonElement(jsonObj.get("baseCurrency"));
      }
      // validate the optional field `dotInfo`
      if (jsonObj.get("dotInfo") != null && !jsonObj.get("dotInfo").isJsonNull()) {
        TgvalidatordDOTBlockchainInfo.validateJsonElement(jsonObj.get("dotInfo"));
      }
      // validate the optional field `ethInfo`
      if (jsonObj.get("ethInfo") != null && !jsonObj.get("ethInfo").isJsonNull()) {
        TgvalidatordEVMBlockchainInfo.validateJsonElement(jsonObj.get("ethInfo"));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("chainId") != null && !jsonObj.get("chainId").isJsonNull()) && !jsonObj.get("chainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chainId").toString()));
      }
      if ((jsonObj.get("blackholeAddress") != null && !jsonObj.get("blackholeAddress").isJsonNull()) && !jsonObj.get("blackholeAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blackholeAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blackholeAddress").toString()));
      }
      if ((jsonObj.get("confirmations") != null && !jsonObj.get("confirmations").isJsonNull()) && !jsonObj.get("confirmations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmations").toString()));
      }
      if ((jsonObj.get("blockHeight") != null && !jsonObj.get("blockHeight").isJsonNull()) && !jsonObj.get("blockHeight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockHeight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockHeight").toString()));
      }
      if ((jsonObj.get("layer1Network") != null && !jsonObj.get("layer1Network").isJsonNull()) && !jsonObj.get("layer1Network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layer1Network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layer1Network").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordBlockchainEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordBlockchainEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordBlockchainEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordBlockchainEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordBlockchainEntity>() {
           @Override
           public void write(JsonWriter out, TgvalidatordBlockchainEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordBlockchainEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordBlockchainEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordBlockchainEntity
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordBlockchainEntity
   */
  public static TgvalidatordBlockchainEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordBlockchainEntity.class);
  }

  /**
   * Convert an instance of TgvalidatordBlockchainEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

