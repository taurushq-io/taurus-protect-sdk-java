/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordScimOperation;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * ScimServiceScimPatchGroupBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class ScimServiceScimPatchGroupBody {
  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<String> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPERATIONS = "Operations";
  @SerializedName(SERIALIZED_NAME_OPERATIONS)
  private List<TgvalidatordScimOperation> operations = new ArrayList<>();

  public ScimServiceScimPatchGroupBody() {
  }

  public ScimServiceScimPatchGroupBody schemas(List<String> schemas) {
    this.schemas = schemas;
    return this;
  }

  public ScimServiceScimPatchGroupBody addSchemasItem(String schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

  /**
   * Get schemas
   * @return schemas
   */
  @javax.annotation.Nullable
  public List<String> getSchemas() {
    return schemas;
  }

  public void setSchemas(List<String> schemas) {
    this.schemas = schemas;
  }


  public ScimServiceScimPatchGroupBody operations(List<TgvalidatordScimOperation> operations) {
    this.operations = operations;
    return this;
  }

  public ScimServiceScimPatchGroupBody addOperationsItem(TgvalidatordScimOperation operationsItem) {
    if (this.operations == null) {
      this.operations = new ArrayList<>();
    }
    this.operations.add(operationsItem);
    return this;
  }

  /**
   * Get operations
   * @return operations
   */
  @javax.annotation.Nullable
  public List<TgvalidatordScimOperation> getOperations() {
    return operations;
  }

  public void setOperations(List<TgvalidatordScimOperation> operations) {
    this.operations = operations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScimServiceScimPatchGroupBody scimServiceScimPatchGroupBody = (ScimServiceScimPatchGroupBody) o;
    return Objects.equals(this.schemas, scimServiceScimPatchGroupBody.schemas) &&
        Objects.equals(this.operations, scimServiceScimPatchGroupBody.operations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemas, operations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScimServiceScimPatchGroupBody {\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("schemas");
    openapiFields.add("Operations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScimServiceScimPatchGroupBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScimServiceScimPatchGroupBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScimServiceScimPatchGroupBody is not found in the empty JSON string", ScimServiceScimPatchGroupBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScimServiceScimPatchGroupBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScimServiceScimPatchGroupBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonNull() && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (jsonObj.get("Operations") != null && !jsonObj.get("Operations").isJsonNull()) {
        JsonArray jsonArrayoperations = jsonObj.getAsJsonArray("Operations");
        if (jsonArrayoperations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Operations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Operations` to be an array in the JSON string but got `%s`", jsonObj.get("Operations").toString()));
          }

          // validate the optional field `Operations` (array)
          for (int i = 0; i < jsonArrayoperations.size(); i++) {
            TgvalidatordScimOperation.validateJsonElement(jsonArrayoperations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScimServiceScimPatchGroupBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScimServiceScimPatchGroupBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScimServiceScimPatchGroupBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScimServiceScimPatchGroupBody.class));

       return (TypeAdapter<T>) new TypeAdapter<ScimServiceScimPatchGroupBody>() {
           @Override
           public void write(JsonWriter out, ScimServiceScimPatchGroupBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScimServiceScimPatchGroupBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScimServiceScimPatchGroupBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScimServiceScimPatchGroupBody
   * @throws IOException if the JSON string is invalid with respect to ScimServiceScimPatchGroupBody
   */
  public static ScimServiceScimPatchGroupBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScimServiceScimPatchGroupBody.class);
  }

  /**
   * Convert an instance of ScimServiceScimPatchGroupBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

