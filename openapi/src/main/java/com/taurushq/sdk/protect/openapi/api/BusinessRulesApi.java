/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.api;

import com.taurushq.sdk.protect.openapi.ApiCallback;
import com.taurushq.sdk.protect.openapi.ApiClient;
import com.taurushq.sdk.protect.openapi.ApiException;
import com.taurushq.sdk.protect.openapi.ApiResponse;
import com.taurushq.sdk.protect.openapi.Configuration;
import com.taurushq.sdk.protect.openapi.Pair;
import com.taurushq.sdk.protect.openapi.ProgressRequestBody;
import com.taurushq.sdk.protect.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.taurushq.sdk.protect.openapi.model.GooglerpcStatus;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetBusinessRulesReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetBusinessRulesV2Reply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordUpdateTransactionsEnabledBusinessRuleRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BusinessRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BusinessRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BusinessRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ruleServiceGetBusinessRules
     * @param limit  (optional)
     * @param offset  (optional)
     * @param ids  (optional)
     * @param ruleKeys  (optional)
     * @param ruleGroups  (optional)
     * @param walletIds  (optional)
     * @param currencies Filter on IDs or symbols of the currency (optional)
     * @param addressIds  (optional)
     * @param level one of &#39;&#39;, &#39;global&#39;, &#39;currency&#39;, &#39;address&#39;, &#39;wallet&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call ruleServiceGetBusinessRulesCall(String limit, String offset, List<String> ids, List<String> ruleKeys, List<String> ruleGroups, List<String> walletIds, List<String> currencies, List<String> addressIds, String level, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/businessrules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        if (ruleKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ruleKeys", ruleKeys));
        }

        if (ruleGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ruleGroups", ruleGroups));
        }

        if (walletIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "walletIds", walletIds));
        }

        if (currencies != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "currencies", currencies));
        }

        if (addressIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "addressIds", addressIds));
        }

        if (level != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("level", level));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleServiceGetBusinessRulesValidateBeforeCall(String limit, String offset, List<String> ids, List<String> ruleKeys, List<String> ruleGroups, List<String> walletIds, List<String> currencies, List<String> addressIds, String level, final ApiCallback _callback) throws ApiException {
        return ruleServiceGetBusinessRulesCall(limit, offset, ids, ruleKeys, ruleGroups, walletIds, currencies, addressIds, level, _callback);

    }

    /**
     * List business rules
     * Deprecated - Use /api/rest/v2/businessrules instead - This endpoint returns a list of business rules.  Required role: **Admin** or **AdminReadOnly**.
     * @param limit  (optional)
     * @param offset  (optional)
     * @param ids  (optional)
     * @param ruleKeys  (optional)
     * @param ruleGroups  (optional)
     * @param walletIds  (optional)
     * @param currencies Filter on IDs or symbols of the currency (optional)
     * @param addressIds  (optional)
     * @param level one of &#39;&#39;, &#39;global&#39;, &#39;currency&#39;, &#39;address&#39;, &#39;wallet&#39; (optional)
     * @return TgvalidatordGetBusinessRulesReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public TgvalidatordGetBusinessRulesReply ruleServiceGetBusinessRules(String limit, String offset, List<String> ids, List<String> ruleKeys, List<String> ruleGroups, List<String> walletIds, List<String> currencies, List<String> addressIds, String level) throws ApiException {
        ApiResponse<TgvalidatordGetBusinessRulesReply> localVarResp = ruleServiceGetBusinessRulesWithHttpInfo(limit, offset, ids, ruleKeys, ruleGroups, walletIds, currencies, addressIds, level);
        return localVarResp.getData();
    }

    /**
     * List business rules
     * Deprecated - Use /api/rest/v2/businessrules instead - This endpoint returns a list of business rules.  Required role: **Admin** or **AdminReadOnly**.
     * @param limit  (optional)
     * @param offset  (optional)
     * @param ids  (optional)
     * @param ruleKeys  (optional)
     * @param ruleGroups  (optional)
     * @param walletIds  (optional)
     * @param currencies Filter on IDs or symbols of the currency (optional)
     * @param addressIds  (optional)
     * @param level one of &#39;&#39;, &#39;global&#39;, &#39;currency&#39;, &#39;address&#39;, &#39;wallet&#39; (optional)
     * @return ApiResponse&lt;TgvalidatordGetBusinessRulesReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<TgvalidatordGetBusinessRulesReply> ruleServiceGetBusinessRulesWithHttpInfo(String limit, String offset, List<String> ids, List<String> ruleKeys, List<String> ruleGroups, List<String> walletIds, List<String> currencies, List<String> addressIds, String level) throws ApiException {
        okhttp3.Call localVarCall = ruleServiceGetBusinessRulesValidateBeforeCall(limit, offset, ids, ruleKeys, ruleGroups, walletIds, currencies, addressIds, level, null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetBusinessRulesReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List business rules (asynchronously)
     * Deprecated - Use /api/rest/v2/businessrules instead - This endpoint returns a list of business rules.  Required role: **Admin** or **AdminReadOnly**.
     * @param limit  (optional)
     * @param offset  (optional)
     * @param ids  (optional)
     * @param ruleKeys  (optional)
     * @param ruleGroups  (optional)
     * @param walletIds  (optional)
     * @param currencies Filter on IDs or symbols of the currency (optional)
     * @param addressIds  (optional)
     * @param level one of &#39;&#39;, &#39;global&#39;, &#39;currency&#39;, &#39;address&#39;, &#39;wallet&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call ruleServiceGetBusinessRulesAsync(String limit, String offset, List<String> ids, List<String> ruleKeys, List<String> ruleGroups, List<String> walletIds, List<String> currencies, List<String> addressIds, String level, final ApiCallback<TgvalidatordGetBusinessRulesReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleServiceGetBusinessRulesValidateBeforeCall(limit, offset, ids, ruleKeys, ruleGroups, walletIds, currencies, addressIds, level, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetBusinessRulesReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleServiceGetBusinessRulesV2
     * @param ids  (optional)
     * @param ruleKeys  (optional)
     * @param ruleGroups  (optional)
     * @param walletIds Deprecated - Use EntityType and EntityID instead (optional)
     * @param currencyIds Filter on currency ids (optional)
     * @param addressIds Deprecated - Use EntityType and EntityID instead (optional)
     * @param level Deprecated - Use EntityType instead  one of &#39;&#39;, &#39;global&#39;, &#39;currency&#39;, &#39;address&#39;, &#39;wallet&#39; (optional)
     * @param cursorCurrentPage Base64-encoded string representing the current window of data (optional)
     * @param cursorPageRequest The page to request, w.r.t the current page. Can be one of &#x60;FIRST&#x60;, &#x60;PREVIOUS&#x60;, &#x60;NEXT&#x60;, &#x60;LAST&#x60; (optional)
     * @param cursorPageSize The size of the page requested. The handling service should impose a hard limit on this (optional)
     * @param entityType Filters rules by what they apply to. This can be one of &#x60;global&#x60;, &#x60;currency&#x60;, &#x60;wallet&#x60;, &#x60;address&#x60;, &#x60;exchange&#x60;, &#x60;exchange_account&#x60;. (optional)
     * @param entityIDs Filters rules by the identifier of the affected entity. For wallets, addresses, and currencies this is their ID. For exchanges this is the exchange label. Leave this field blank for global rules. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleServiceGetBusinessRulesV2Call(List<String> ids, List<String> ruleKeys, List<String> ruleGroups, List<String> walletIds, List<String> currencyIds, List<String> addressIds, String level, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize, String entityType, List<String> entityIDs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v2/businessrules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        if (ruleKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ruleKeys", ruleKeys));
        }

        if (ruleGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ruleGroups", ruleGroups));
        }

        if (walletIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "walletIds", walletIds));
        }

        if (currencyIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "currencyIds", currencyIds));
        }

        if (addressIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "addressIds", addressIds));
        }

        if (level != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("level", level));
        }

        if (cursorCurrentPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor.currentPage", cursorCurrentPage));
        }

        if (cursorPageRequest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor.pageRequest", cursorPageRequest));
        }

        if (cursorPageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor.pageSize", cursorPageSize));
        }

        if (entityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityType", entityType));
        }

        if (entityIDs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entityIDs", entityIDs));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleServiceGetBusinessRulesV2ValidateBeforeCall(List<String> ids, List<String> ruleKeys, List<String> ruleGroups, List<String> walletIds, List<String> currencyIds, List<String> addressIds, String level, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize, String entityType, List<String> entityIDs, final ApiCallback _callback) throws ApiException {
        return ruleServiceGetBusinessRulesV2Call(ids, ruleKeys, ruleGroups, walletIds, currencyIds, addressIds, level, cursorCurrentPage, cursorPageRequest, cursorPageSize, entityType, entityIDs, _callback);

    }

    /**
     * List business rules
     * This endpoint returns a list of business rules.  Required role: **Admin** or **AdminReadOnly**.
     * @param ids  (optional)
     * @param ruleKeys  (optional)
     * @param ruleGroups  (optional)
     * @param walletIds Deprecated - Use EntityType and EntityID instead (optional)
     * @param currencyIds Filter on currency ids (optional)
     * @param addressIds Deprecated - Use EntityType and EntityID instead (optional)
     * @param level Deprecated - Use EntityType instead  one of &#39;&#39;, &#39;global&#39;, &#39;currency&#39;, &#39;address&#39;, &#39;wallet&#39; (optional)
     * @param cursorCurrentPage Base64-encoded string representing the current window of data (optional)
     * @param cursorPageRequest The page to request, w.r.t the current page. Can be one of &#x60;FIRST&#x60;, &#x60;PREVIOUS&#x60;, &#x60;NEXT&#x60;, &#x60;LAST&#x60; (optional)
     * @param cursorPageSize The size of the page requested. The handling service should impose a hard limit on this (optional)
     * @param entityType Filters rules by what they apply to. This can be one of &#x60;global&#x60;, &#x60;currency&#x60;, &#x60;wallet&#x60;, &#x60;address&#x60;, &#x60;exchange&#x60;, &#x60;exchange_account&#x60;. (optional)
     * @param entityIDs Filters rules by the identifier of the affected entity. For wallets, addresses, and currencies this is their ID. For exchanges this is the exchange label. Leave this field blank for global rules. (optional)
     * @return TgvalidatordGetBusinessRulesV2Reply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordGetBusinessRulesV2Reply ruleServiceGetBusinessRulesV2(List<String> ids, List<String> ruleKeys, List<String> ruleGroups, List<String> walletIds, List<String> currencyIds, List<String> addressIds, String level, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize, String entityType, List<String> entityIDs) throws ApiException {
        ApiResponse<TgvalidatordGetBusinessRulesV2Reply> localVarResp = ruleServiceGetBusinessRulesV2WithHttpInfo(ids, ruleKeys, ruleGroups, walletIds, currencyIds, addressIds, level, cursorCurrentPage, cursorPageRequest, cursorPageSize, entityType, entityIDs);
        return localVarResp.getData();
    }

    /**
     * List business rules
     * This endpoint returns a list of business rules.  Required role: **Admin** or **AdminReadOnly**.
     * @param ids  (optional)
     * @param ruleKeys  (optional)
     * @param ruleGroups  (optional)
     * @param walletIds Deprecated - Use EntityType and EntityID instead (optional)
     * @param currencyIds Filter on currency ids (optional)
     * @param addressIds Deprecated - Use EntityType and EntityID instead (optional)
     * @param level Deprecated - Use EntityType instead  one of &#39;&#39;, &#39;global&#39;, &#39;currency&#39;, &#39;address&#39;, &#39;wallet&#39; (optional)
     * @param cursorCurrentPage Base64-encoded string representing the current window of data (optional)
     * @param cursorPageRequest The page to request, w.r.t the current page. Can be one of &#x60;FIRST&#x60;, &#x60;PREVIOUS&#x60;, &#x60;NEXT&#x60;, &#x60;LAST&#x60; (optional)
     * @param cursorPageSize The size of the page requested. The handling service should impose a hard limit on this (optional)
     * @param entityType Filters rules by what they apply to. This can be one of &#x60;global&#x60;, &#x60;currency&#x60;, &#x60;wallet&#x60;, &#x60;address&#x60;, &#x60;exchange&#x60;, &#x60;exchange_account&#x60;. (optional)
     * @param entityIDs Filters rules by the identifier of the affected entity. For wallets, addresses, and currencies this is their ID. For exchanges this is the exchange label. Leave this field blank for global rules. (optional)
     * @return ApiResponse&lt;TgvalidatordGetBusinessRulesV2Reply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordGetBusinessRulesV2Reply> ruleServiceGetBusinessRulesV2WithHttpInfo(List<String> ids, List<String> ruleKeys, List<String> ruleGroups, List<String> walletIds, List<String> currencyIds, List<String> addressIds, String level, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize, String entityType, List<String> entityIDs) throws ApiException {
        okhttp3.Call localVarCall = ruleServiceGetBusinessRulesV2ValidateBeforeCall(ids, ruleKeys, ruleGroups, walletIds, currencyIds, addressIds, level, cursorCurrentPage, cursorPageRequest, cursorPageSize, entityType, entityIDs, null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetBusinessRulesV2Reply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List business rules (asynchronously)
     * This endpoint returns a list of business rules.  Required role: **Admin** or **AdminReadOnly**.
     * @param ids  (optional)
     * @param ruleKeys  (optional)
     * @param ruleGroups  (optional)
     * @param walletIds Deprecated - Use EntityType and EntityID instead (optional)
     * @param currencyIds Filter on currency ids (optional)
     * @param addressIds Deprecated - Use EntityType and EntityID instead (optional)
     * @param level Deprecated - Use EntityType instead  one of &#39;&#39;, &#39;global&#39;, &#39;currency&#39;, &#39;address&#39;, &#39;wallet&#39; (optional)
     * @param cursorCurrentPage Base64-encoded string representing the current window of data (optional)
     * @param cursorPageRequest The page to request, w.r.t the current page. Can be one of &#x60;FIRST&#x60;, &#x60;PREVIOUS&#x60;, &#x60;NEXT&#x60;, &#x60;LAST&#x60; (optional)
     * @param cursorPageSize The size of the page requested. The handling service should impose a hard limit on this (optional)
     * @param entityType Filters rules by what they apply to. This can be one of &#x60;global&#x60;, &#x60;currency&#x60;, &#x60;wallet&#x60;, &#x60;address&#x60;, &#x60;exchange&#x60;, &#x60;exchange_account&#x60;. (optional)
     * @param entityIDs Filters rules by the identifier of the affected entity. For wallets, addresses, and currencies this is their ID. For exchanges this is the exchange label. Leave this field blank for global rules. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleServiceGetBusinessRulesV2Async(List<String> ids, List<String> ruleKeys, List<String> ruleGroups, List<String> walletIds, List<String> currencyIds, List<String> addressIds, String level, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize, String entityType, List<String> entityIDs, final ApiCallback<TgvalidatordGetBusinessRulesV2Reply> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleServiceGetBusinessRulesV2ValidateBeforeCall(ids, ruleKeys, ruleGroups, walletIds, currencyIds, addressIds, level, cursorCurrentPage, cursorPageRequest, cursorPageSize, entityType, entityIDs, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetBusinessRulesV2Reply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleServiceUpdateTransactionsEnabledBusinessRule
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleServiceUpdateTransactionsEnabledBusinessRuleCall(TgvalidatordUpdateTransactionsEnabledBusinessRuleRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/rest/v1/businessrules/transactions_enabled";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleServiceUpdateTransactionsEnabledBusinessRuleValidateBeforeCall(TgvalidatordUpdateTransactionsEnabledBusinessRuleRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ruleServiceUpdateTransactionsEnabledBusinessRule(Async)");
        }

        return ruleServiceUpdateTransactionsEnabledBusinessRuleCall(body, _callback);

    }

    /**
     * Enable/disable requests
     * This endpoint toggles the requests enabling rule.  Required role: **Admin**.
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object ruleServiceUpdateTransactionsEnabledBusinessRule(TgvalidatordUpdateTransactionsEnabledBusinessRuleRequest body) throws ApiException {
        ApiResponse<Object> localVarResp = ruleServiceUpdateTransactionsEnabledBusinessRuleWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Enable/disable requests
     * This endpoint toggles the requests enabling rule.  Required role: **Admin**.
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> ruleServiceUpdateTransactionsEnabledBusinessRuleWithHttpInfo(TgvalidatordUpdateTransactionsEnabledBusinessRuleRequest body) throws ApiException {
        okhttp3.Call localVarCall = ruleServiceUpdateTransactionsEnabledBusinessRuleValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable/disable requests (asynchronously)
     * This endpoint toggles the requests enabling rule.  Required role: **Admin**.
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleServiceUpdateTransactionsEnabledBusinessRuleAsync(TgvalidatordUpdateTransactionsEnabledBusinessRuleRequest body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleServiceUpdateTransactionsEnabledBusinessRuleValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
