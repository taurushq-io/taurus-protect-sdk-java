/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.taurushq.sdk.protect.openapi.model.WhitelistedAddressBatchSignatureWhitelistedAddressSignature;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordWhitelistedAddressBatchSignature
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordWhitelistedAddressBatchSignature {
  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private String ID;

  public static final String SERIALIZED_NAME_TENANT_I_D = "TenantID";
  @SerializedName(SERIALIZED_NAME_TENANT_I_D)
  private String tenantID;

  public static final String SERIALIZED_NAME_USER_I_D = "UserID";
  @SerializedName(SERIALIZED_NAME_USER_I_D)
  private String userID;

  public static final String SERIALIZED_NAME_SIGNATURE = "Signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_COMMENT = "Comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_UPDATE_DATE = "UpdateDate";
  @SerializedName(SERIALIZED_NAME_UPDATE_DATE)
  private OffsetDateTime updateDate;

  public static final String SERIALIZED_NAME_SIGNATURES = "signatures";
  @SerializedName(SERIALIZED_NAME_SIGNATURES)
  private List<WhitelistedAddressBatchSignatureWhitelistedAddressSignature> signatures = new ArrayList<>();

  public TgvalidatordWhitelistedAddressBatchSignature() {
  }

  public TgvalidatordWhitelistedAddressBatchSignature ID(String ID) {
    this.ID = ID;
    return this;
  }

  /**
   * Get ID
   * @return ID
   */
  @javax.annotation.Nullable
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }


  public TgvalidatordWhitelistedAddressBatchSignature tenantID(String tenantID) {
    this.tenantID = tenantID;
    return this;
  }

  /**
   * Get tenantID
   * @return tenantID
   */
  @javax.annotation.Nullable
  public String getTenantID() {
    return tenantID;
  }

  public void setTenantID(String tenantID) {
    this.tenantID = tenantID;
  }


  public TgvalidatordWhitelistedAddressBatchSignature userID(String userID) {
    this.userID = userID;
    return this;
  }

  /**
   * Get userID
   * @return userID
   */
  @javax.annotation.Nullable
  public String getUserID() {
    return userID;
  }

  public void setUserID(String userID) {
    this.userID = userID;
  }


  public TgvalidatordWhitelistedAddressBatchSignature signature(String signature) {
    this.signature = signature;
    return this;
  }

  /**
   * Get signature
   * @return signature
   */
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }


  public TgvalidatordWhitelistedAddressBatchSignature comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public TgvalidatordWhitelistedAddressBatchSignature status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public TgvalidatordWhitelistedAddressBatchSignature creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public TgvalidatordWhitelistedAddressBatchSignature updateDate(OffsetDateTime updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  /**
   * Get updateDate
   * @return updateDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdateDate() {
    return updateDate;
  }

  public void setUpdateDate(OffsetDateTime updateDate) {
    this.updateDate = updateDate;
  }


  public TgvalidatordWhitelistedAddressBatchSignature signatures(List<WhitelistedAddressBatchSignatureWhitelistedAddressSignature> signatures) {
    this.signatures = signatures;
    return this;
  }

  public TgvalidatordWhitelistedAddressBatchSignature addSignaturesItem(WhitelistedAddressBatchSignatureWhitelistedAddressSignature signaturesItem) {
    if (this.signatures == null) {
      this.signatures = new ArrayList<>();
    }
    this.signatures.add(signaturesItem);
    return this;
  }

  /**
   * Get signatures
   * @return signatures
   */
  @javax.annotation.Nullable
  public List<WhitelistedAddressBatchSignatureWhitelistedAddressSignature> getSignatures() {
    return signatures;
  }

  public void setSignatures(List<WhitelistedAddressBatchSignatureWhitelistedAddressSignature> signatures) {
    this.signatures = signatures;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordWhitelistedAddressBatchSignature tgvalidatordWhitelistedAddressBatchSignature = (TgvalidatordWhitelistedAddressBatchSignature) o;
    return Objects.equals(this.ID, tgvalidatordWhitelistedAddressBatchSignature.ID) &&
        Objects.equals(this.tenantID, tgvalidatordWhitelistedAddressBatchSignature.tenantID) &&
        Objects.equals(this.userID, tgvalidatordWhitelistedAddressBatchSignature.userID) &&
        Objects.equals(this.signature, tgvalidatordWhitelistedAddressBatchSignature.signature) &&
        Objects.equals(this.comment, tgvalidatordWhitelistedAddressBatchSignature.comment) &&
        Objects.equals(this.status, tgvalidatordWhitelistedAddressBatchSignature.status) &&
        Objects.equals(this.creationDate, tgvalidatordWhitelistedAddressBatchSignature.creationDate) &&
        Objects.equals(this.updateDate, tgvalidatordWhitelistedAddressBatchSignature.updateDate) &&
        Objects.equals(this.signatures, tgvalidatordWhitelistedAddressBatchSignature.signatures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, tenantID, userID, signature, comment, status, creationDate, updateDate, signatures);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordWhitelistedAddressBatchSignature {\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    tenantID: ").append(toIndentedString(tenantID)).append("\n");
    sb.append("    userID: ").append(toIndentedString(userID)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    updateDate: ").append(toIndentedString(updateDate)).append("\n");
    sb.append("    signatures: ").append(toIndentedString(signatures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ID");
    openapiFields.add("TenantID");
    openapiFields.add("UserID");
    openapiFields.add("Signature");
    openapiFields.add("Comment");
    openapiFields.add("Status");
    openapiFields.add("CreationDate");
    openapiFields.add("UpdateDate");
    openapiFields.add("signatures");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordWhitelistedAddressBatchSignature
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordWhitelistedAddressBatchSignature.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordWhitelistedAddressBatchSignature is not found in the empty JSON string", TgvalidatordWhitelistedAddressBatchSignature.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordWhitelistedAddressBatchSignature.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordWhitelistedAddressBatchSignature` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      if ((jsonObj.get("TenantID") != null && !jsonObj.get("TenantID").isJsonNull()) && !jsonObj.get("TenantID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TenantID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TenantID").toString()));
      }
      if ((jsonObj.get("UserID") != null && !jsonObj.get("UserID").isJsonNull()) && !jsonObj.get("UserID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserID").toString()));
      }
      if ((jsonObj.get("Signature") != null && !jsonObj.get("Signature").isJsonNull()) && !jsonObj.get("Signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Signature").toString()));
      }
      if ((jsonObj.get("Comment") != null && !jsonObj.get("Comment").isJsonNull()) && !jsonObj.get("Comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Comment").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if (jsonObj.get("signatures") != null && !jsonObj.get("signatures").isJsonNull()) {
        JsonArray jsonArraysignatures = jsonObj.getAsJsonArray("signatures");
        if (jsonArraysignatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("signatures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `signatures` to be an array in the JSON string but got `%s`", jsonObj.get("signatures").toString()));
          }

          // validate the optional field `signatures` (array)
          for (int i = 0; i < jsonArraysignatures.size(); i++) {
            WhitelistedAddressBatchSignatureWhitelistedAddressSignature.validateJsonElement(jsonArraysignatures.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordWhitelistedAddressBatchSignature.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordWhitelistedAddressBatchSignature' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordWhitelistedAddressBatchSignature> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordWhitelistedAddressBatchSignature.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordWhitelistedAddressBatchSignature>() {
           @Override
           public void write(JsonWriter out, TgvalidatordWhitelistedAddressBatchSignature value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordWhitelistedAddressBatchSignature read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordWhitelistedAddressBatchSignature given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordWhitelistedAddressBatchSignature
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordWhitelistedAddressBatchSignature
   */
  public static TgvalidatordWhitelistedAddressBatchSignature fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordWhitelistedAddressBatchSignature.class);
  }

  /**
   * Convert an instance of TgvalidatordWhitelistedAddressBatchSignature to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

