/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordCurrencyFilter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordGetCurrencyStatisticsHistoryRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordGetCurrencyStatisticsHistoryRequest {
  public static final String SERIALIZED_NAME_CURRENCIES = "currencies";
  @SerializedName(SERIALIZED_NAME_CURRENCIES)
  private List<TgvalidatordCurrencyFilter> currencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERVAL_HOURS = "intervalHours";
  @SerializedName(SERIALIZED_NAME_INTERVAL_HOURS)
  private String intervalHours;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private OffsetDateTime from;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private OffsetDateTime to;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private String limit;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private String sortOrder;

  public TgvalidatordGetCurrencyStatisticsHistoryRequest() {
  }

  public TgvalidatordGetCurrencyStatisticsHistoryRequest currencies(List<TgvalidatordCurrencyFilter> currencies) {
    this.currencies = currencies;
    return this;
  }

  public TgvalidatordGetCurrencyStatisticsHistoryRequest addCurrenciesItem(TgvalidatordCurrencyFilter currenciesItem) {
    if (this.currencies == null) {
      this.currencies = new ArrayList<>();
    }
    this.currencies.add(currenciesItem);
    return this;
  }

  /**
   * Get currencies
   * @return currencies
   */
  @javax.annotation.Nullable
  public List<TgvalidatordCurrencyFilter> getCurrencies() {
    return currencies;
  }

  public void setCurrencies(List<TgvalidatordCurrencyFilter> currencies) {
    this.currencies = currencies;
  }


  public TgvalidatordGetCurrencyStatisticsHistoryRequest intervalHours(String intervalHours) {
    this.intervalHours = intervalHours;
    return this;
  }

  /**
   * Get intervalHours
   * @return intervalHours
   */
  @javax.annotation.Nonnull
  public String getIntervalHours() {
    return intervalHours;
  }

  public void setIntervalHours(String intervalHours) {
    this.intervalHours = intervalHours;
  }


  public TgvalidatordGetCurrencyStatisticsHistoryRequest from(OffsetDateTime from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFrom() {
    return from;
  }

  public void setFrom(OffsetDateTime from) {
    this.from = from;
  }


  public TgvalidatordGetCurrencyStatisticsHistoryRequest to(OffsetDateTime to) {
    this.to = to;
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTo() {
    return to;
  }

  public void setTo(OffsetDateTime to) {
    this.to = to;
  }


  public TgvalidatordGetCurrencyStatisticsHistoryRequest limit(String limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Get limit
   * @return limit
   */
  @javax.annotation.Nonnull
  public String getLimit() {
    return limit;
  }

  public void setLimit(String limit) {
    this.limit = limit;
  }


  public TgvalidatordGetCurrencyStatisticsHistoryRequest sortOrder(String sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Set this parameter to ASC to get the stats history point sorted in ascending order or DESC to get them in descending order (based on timestamp).
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public String getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(String sortOrder) {
    this.sortOrder = sortOrder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordGetCurrencyStatisticsHistoryRequest tgvalidatordGetCurrencyStatisticsHistoryRequest = (TgvalidatordGetCurrencyStatisticsHistoryRequest) o;
    return Objects.equals(this.currencies, tgvalidatordGetCurrencyStatisticsHistoryRequest.currencies) &&
        Objects.equals(this.intervalHours, tgvalidatordGetCurrencyStatisticsHistoryRequest.intervalHours) &&
        Objects.equals(this.from, tgvalidatordGetCurrencyStatisticsHistoryRequest.from) &&
        Objects.equals(this.to, tgvalidatordGetCurrencyStatisticsHistoryRequest.to) &&
        Objects.equals(this.limit, tgvalidatordGetCurrencyStatisticsHistoryRequest.limit) &&
        Objects.equals(this.sortOrder, tgvalidatordGetCurrencyStatisticsHistoryRequest.sortOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencies, intervalHours, from, to, limit, sortOrder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordGetCurrencyStatisticsHistoryRequest {\n");
    sb.append("    currencies: ").append(toIndentedString(currencies)).append("\n");
    sb.append("    intervalHours: ").append(toIndentedString(intervalHours)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currencies");
    openapiFields.add("intervalHours");
    openapiFields.add("from");
    openapiFields.add("to");
    openapiFields.add("limit");
    openapiFields.add("sortOrder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("intervalHours");
    openapiRequiredFields.add("limit");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordGetCurrencyStatisticsHistoryRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordGetCurrencyStatisticsHistoryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordGetCurrencyStatisticsHistoryRequest is not found in the empty JSON string", TgvalidatordGetCurrencyStatisticsHistoryRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordGetCurrencyStatisticsHistoryRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordGetCurrencyStatisticsHistoryRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TgvalidatordGetCurrencyStatisticsHistoryRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("currencies") != null && !jsonObj.get("currencies").isJsonNull()) {
        JsonArray jsonArraycurrencies = jsonObj.getAsJsonArray("currencies");
        if (jsonArraycurrencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("currencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `currencies` to be an array in the JSON string but got `%s`", jsonObj.get("currencies").toString()));
          }

          // validate the optional field `currencies` (array)
          for (int i = 0; i < jsonArraycurrencies.size(); i++) {
            TgvalidatordCurrencyFilter.validateJsonElement(jsonArraycurrencies.get(i));
          };
        }
      }
      if (!jsonObj.get("intervalHours").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intervalHours` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intervalHours").toString()));
      }
      if (!jsonObj.get("limit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limit").toString()));
      }
      if ((jsonObj.get("sortOrder") != null && !jsonObj.get("sortOrder").isJsonNull()) && !jsonObj.get("sortOrder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortOrder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortOrder").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordGetCurrencyStatisticsHistoryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordGetCurrencyStatisticsHistoryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordGetCurrencyStatisticsHistoryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordGetCurrencyStatisticsHistoryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordGetCurrencyStatisticsHistoryRequest>() {
           @Override
           public void write(JsonWriter out, TgvalidatordGetCurrencyStatisticsHistoryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordGetCurrencyStatisticsHistoryRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordGetCurrencyStatisticsHistoryRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordGetCurrencyStatisticsHistoryRequest
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordGetCurrencyStatisticsHistoryRequest
   */
  public static TgvalidatordGetCurrencyStatisticsHistoryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordGetCurrencyStatisticsHistoryRequest.class);
  }

  /**
   * Convert an instance of TgvalidatordGetCurrencyStatisticsHistoryRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

