/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordCreateWhitelistedAddressRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordCreateWhitelistedAddressRequest {
  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_EXCHANGE_ACCOUNT_ID = "exchangeAccountId";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_ACCOUNT_ID)
  private String exchangeAccountId;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_LINKED_INTERNAL_ADDRESS_IDS = "linkedInternalAddressIds";
  @SerializedName(SERIALIZED_NAME_LINKED_INTERNAL_ADDRESS_IDS)
  private List<String> linkedInternalAddressIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDRESS_TYPE = "addressType";
  @SerializedName(SERIALIZED_NAME_ADDRESS_TYPE)
  private String addressType;

  public static final String SERIALIZED_NAME_CONTRACT_TYPE = "contractType";
  @SerializedName(SERIALIZED_NAME_CONTRACT_TYPE)
  private String contractType;

  public static final String SERIALIZED_NAME_LINKED_WALLET_IDS = "linkedWalletIds";
  @SerializedName(SERIALIZED_NAME_LINKED_WALLET_IDS)
  private List<String> linkedWalletIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_BLOCKCHAIN = "blockchain";
  @SerializedName(SERIALIZED_NAME_BLOCKCHAIN)
  private String blockchain;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_VISIBILITY_GROUP_I_D = "visibilityGroupID";
  @SerializedName(SERIALIZED_NAME_VISIBILITY_GROUP_I_D)
  private String visibilityGroupID;

  public TgvalidatordCreateWhitelistedAddressRequest() {
  }

  public TgvalidatordCreateWhitelistedAddressRequest currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * deprecated: use the blockchain parameter instead 
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public TgvalidatordCreateWhitelistedAddressRequest address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public TgvalidatordCreateWhitelistedAddressRequest memo(String memo) {
    this.memo = memo;
    return this;
  }

  /**
   * Get memo
   * @return memo
   */
  @javax.annotation.Nullable
  public String getMemo() {
    return memo;
  }

  public void setMemo(String memo) {
    this.memo = memo;
  }


  public TgvalidatordCreateWhitelistedAddressRequest label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nonnull
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public TgvalidatordCreateWhitelistedAddressRequest exchangeAccountId(String exchangeAccountId) {
    this.exchangeAccountId = exchangeAccountId;
    return this;
  }

  /**
   * Get exchangeAccountId
   * @return exchangeAccountId
   */
  @javax.annotation.Nullable
  public String getExchangeAccountId() {
    return exchangeAccountId;
  }

  public void setExchangeAccountId(String exchangeAccountId) {
    this.exchangeAccountId = exchangeAccountId;
  }


  public TgvalidatordCreateWhitelistedAddressRequest customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Get customerId
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public TgvalidatordCreateWhitelistedAddressRequest linkedInternalAddressIds(List<String> linkedInternalAddressIds) {
    this.linkedInternalAddressIds = linkedInternalAddressIds;
    return this;
  }

  public TgvalidatordCreateWhitelistedAddressRequest addLinkedInternalAddressIdsItem(String linkedInternalAddressIdsItem) {
    if (this.linkedInternalAddressIds == null) {
      this.linkedInternalAddressIds = new ArrayList<>();
    }
    this.linkedInternalAddressIds.add(linkedInternalAddressIdsItem);
    return this;
  }

  /**
   * Get linkedInternalAddressIds
   * @return linkedInternalAddressIds
   */
  @javax.annotation.Nullable
  public List<String> getLinkedInternalAddressIds() {
    return linkedInternalAddressIds;
  }

  public void setLinkedInternalAddressIds(List<String> linkedInternalAddressIds) {
    this.linkedInternalAddressIds = linkedInternalAddressIds;
  }


  public TgvalidatordCreateWhitelistedAddressRequest addressType(String addressType) {
    this.addressType = addressType;
    return this;
  }

  /**
   * Get addressType
   * @return addressType
   */
  @javax.annotation.Nullable
  public String getAddressType() {
    return addressType;
  }

  public void setAddressType(String addressType) {
    this.addressType = addressType;
  }


  public TgvalidatordCreateWhitelistedAddressRequest contractType(String contractType) {
    this.contractType = contractType;
    return this;
  }

  /**
   * Get contractType
   * @return contractType
   */
  @javax.annotation.Nullable
  public String getContractType() {
    return contractType;
  }

  public void setContractType(String contractType) {
    this.contractType = contractType;
  }


  public TgvalidatordCreateWhitelistedAddressRequest linkedWalletIds(List<String> linkedWalletIds) {
    this.linkedWalletIds = linkedWalletIds;
    return this;
  }

  public TgvalidatordCreateWhitelistedAddressRequest addLinkedWalletIdsItem(String linkedWalletIdsItem) {
    if (this.linkedWalletIds == null) {
      this.linkedWalletIds = new ArrayList<>();
    }
    this.linkedWalletIds.add(linkedWalletIdsItem);
    return this;
  }

  /**
   * Get linkedWalletIds
   * @return linkedWalletIds
   */
  @javax.annotation.Nullable
  public List<String> getLinkedWalletIds() {
    return linkedWalletIds;
  }

  public void setLinkedWalletIds(List<String> linkedWalletIds) {
    this.linkedWalletIds = linkedWalletIds;
  }


  public TgvalidatordCreateWhitelistedAddressRequest blockchain(String blockchain) {
    this.blockchain = blockchain;
    return this;
  }

  /**
   * Symbol of the blockchain of which to whitelist an address
   * @return blockchain
   */
  @javax.annotation.Nonnull
  public String getBlockchain() {
    return blockchain;
  }

  public void setBlockchain(String blockchain) {
    this.blockchain = blockchain;
  }


  public TgvalidatordCreateWhitelistedAddressRequest network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Get network
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public TgvalidatordCreateWhitelistedAddressRequest visibilityGroupID(String visibilityGroupID) {
    this.visibilityGroupID = visibilityGroupID;
    return this;
  }

  /**
   * Get visibilityGroupID
   * @return visibilityGroupID
   */
  @javax.annotation.Nullable
  public String getVisibilityGroupID() {
    return visibilityGroupID;
  }

  public void setVisibilityGroupID(String visibilityGroupID) {
    this.visibilityGroupID = visibilityGroupID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordCreateWhitelistedAddressRequest tgvalidatordCreateWhitelistedAddressRequest = (TgvalidatordCreateWhitelistedAddressRequest) o;
    return Objects.equals(this.currency, tgvalidatordCreateWhitelistedAddressRequest.currency) &&
        Objects.equals(this.address, tgvalidatordCreateWhitelistedAddressRequest.address) &&
        Objects.equals(this.memo, tgvalidatordCreateWhitelistedAddressRequest.memo) &&
        Objects.equals(this.label, tgvalidatordCreateWhitelistedAddressRequest.label) &&
        Objects.equals(this.exchangeAccountId, tgvalidatordCreateWhitelistedAddressRequest.exchangeAccountId) &&
        Objects.equals(this.customerId, tgvalidatordCreateWhitelistedAddressRequest.customerId) &&
        Objects.equals(this.linkedInternalAddressIds, tgvalidatordCreateWhitelistedAddressRequest.linkedInternalAddressIds) &&
        Objects.equals(this.addressType, tgvalidatordCreateWhitelistedAddressRequest.addressType) &&
        Objects.equals(this.contractType, tgvalidatordCreateWhitelistedAddressRequest.contractType) &&
        Objects.equals(this.linkedWalletIds, tgvalidatordCreateWhitelistedAddressRequest.linkedWalletIds) &&
        Objects.equals(this.blockchain, tgvalidatordCreateWhitelistedAddressRequest.blockchain) &&
        Objects.equals(this.network, tgvalidatordCreateWhitelistedAddressRequest.network) &&
        Objects.equals(this.visibilityGroupID, tgvalidatordCreateWhitelistedAddressRequest.visibilityGroupID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, address, memo, label, exchangeAccountId, customerId, linkedInternalAddressIds, addressType, contractType, linkedWalletIds, blockchain, network, visibilityGroupID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordCreateWhitelistedAddressRequest {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    exchangeAccountId: ").append(toIndentedString(exchangeAccountId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    linkedInternalAddressIds: ").append(toIndentedString(linkedInternalAddressIds)).append("\n");
    sb.append("    addressType: ").append(toIndentedString(addressType)).append("\n");
    sb.append("    contractType: ").append(toIndentedString(contractType)).append("\n");
    sb.append("    linkedWalletIds: ").append(toIndentedString(linkedWalletIds)).append("\n");
    sb.append("    blockchain: ").append(toIndentedString(blockchain)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    visibilityGroupID: ").append(toIndentedString(visibilityGroupID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currency");
    openapiFields.add("address");
    openapiFields.add("memo");
    openapiFields.add("label");
    openapiFields.add("exchangeAccountId");
    openapiFields.add("customerId");
    openapiFields.add("linkedInternalAddressIds");
    openapiFields.add("addressType");
    openapiFields.add("contractType");
    openapiFields.add("linkedWalletIds");
    openapiFields.add("blockchain");
    openapiFields.add("network");
    openapiFields.add("visibilityGroupID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("blockchain");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordCreateWhitelistedAddressRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordCreateWhitelistedAddressRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordCreateWhitelistedAddressRequest is not found in the empty JSON string", TgvalidatordCreateWhitelistedAddressRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordCreateWhitelistedAddressRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordCreateWhitelistedAddressRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TgvalidatordCreateWhitelistedAddressRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("exchangeAccountId") != null && !jsonObj.get("exchangeAccountId").isJsonNull()) && !jsonObj.get("exchangeAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchangeAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchangeAccountId").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("linkedInternalAddressIds") != null && !jsonObj.get("linkedInternalAddressIds").isJsonNull() && !jsonObj.get("linkedInternalAddressIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedInternalAddressIds` to be an array in the JSON string but got `%s`", jsonObj.get("linkedInternalAddressIds").toString()));
      }
      if ((jsonObj.get("addressType") != null && !jsonObj.get("addressType").isJsonNull()) && !jsonObj.get("addressType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressType").toString()));
      }
      if ((jsonObj.get("contractType") != null && !jsonObj.get("contractType").isJsonNull()) && !jsonObj.get("contractType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("linkedWalletIds") != null && !jsonObj.get("linkedWalletIds").isJsonNull() && !jsonObj.get("linkedWalletIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedWalletIds` to be an array in the JSON string but got `%s`", jsonObj.get("linkedWalletIds").toString()));
      }
      if (!jsonObj.get("blockchain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockchain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockchain").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("visibilityGroupID") != null && !jsonObj.get("visibilityGroupID").isJsonNull()) && !jsonObj.get("visibilityGroupID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibilityGroupID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibilityGroupID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordCreateWhitelistedAddressRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordCreateWhitelistedAddressRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordCreateWhitelistedAddressRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordCreateWhitelistedAddressRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordCreateWhitelistedAddressRequest>() {
           @Override
           public void write(JsonWriter out, TgvalidatordCreateWhitelistedAddressRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordCreateWhitelistedAddressRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordCreateWhitelistedAddressRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordCreateWhitelistedAddressRequest
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordCreateWhitelistedAddressRequest
   */
  public static TgvalidatordCreateWhitelistedAddressRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordCreateWhitelistedAddressRequest.class);
  }

  /**
   * Convert an instance of TgvalidatordCreateWhitelistedAddressRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

