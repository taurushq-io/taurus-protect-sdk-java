/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordTnPledgeTrail;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordTnPledge
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordTnPledge {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SHARED_ADDRESS_I_D = "sharedAddressID";
  @SerializedName(SERIALIZED_NAME_SHARED_ADDRESS_I_D)
  private String sharedAddressID;

  public static final String SERIALIZED_NAME_OWNER_PARTICIPANT_I_D = "ownerParticipantID";
  @SerializedName(SERIALIZED_NAME_OWNER_PARTICIPANT_I_D)
  private String ownerParticipantID;

  public static final String SERIALIZED_NAME_TARGET_PARTICIPANT_I_D = "targetParticipantID";
  @SerializedName(SERIALIZED_NAME_TARGET_PARTICIPANT_I_D)
  private String targetParticipantID;

  public static final String SERIALIZED_NAME_CURRENCY_I_D = "currencyID";
  @SerializedName(SERIALIZED_NAME_CURRENCY_I_D)
  private String currencyID;

  public static final String SERIALIZED_NAME_BLOCKCHAIN = "blockchain";
  @SerializedName(SERIALIZED_NAME_BLOCKCHAIN)
  private String blockchain;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_ARG1 = "arg1";
  @SerializedName(SERIALIZED_NAME_ARG1)
  private String arg1;

  public static final String SERIALIZED_NAME_ARG2 = "arg2";
  @SerializedName(SERIALIZED_NAME_ARG2)
  private String arg2;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_PLEDGE_TYPE = "pledgeType";
  @SerializedName(SERIALIZED_NAME_PLEDGE_TYPE)
  private String pledgeType;

  public static final String SERIALIZED_NAME_TRAILS = "trails";
  @SerializedName(SERIALIZED_NAME_TRAILS)
  private List<TgvalidatordTnPledgeTrail> trails = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORIGIN_CREATION_DATE = "originCreationDate";
  @SerializedName(SERIALIZED_NAME_ORIGIN_CREATION_DATE)
  private OffsetDateTime originCreationDate;

  public TgvalidatordTnPledge() {
  }

  public TgvalidatordTnPledge id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TgvalidatordTnPledge sharedAddressID(String sharedAddressID) {
    this.sharedAddressID = sharedAddressID;
    return this;
  }

  /**
   * Get sharedAddressID
   * @return sharedAddressID
   */
  @javax.annotation.Nullable
  public String getSharedAddressID() {
    return sharedAddressID;
  }

  public void setSharedAddressID(String sharedAddressID) {
    this.sharedAddressID = sharedAddressID;
  }


  public TgvalidatordTnPledge ownerParticipantID(String ownerParticipantID) {
    this.ownerParticipantID = ownerParticipantID;
    return this;
  }

  /**
   * Get ownerParticipantID
   * @return ownerParticipantID
   */
  @javax.annotation.Nullable
  public String getOwnerParticipantID() {
    return ownerParticipantID;
  }

  public void setOwnerParticipantID(String ownerParticipantID) {
    this.ownerParticipantID = ownerParticipantID;
  }


  public TgvalidatordTnPledge targetParticipantID(String targetParticipantID) {
    this.targetParticipantID = targetParticipantID;
    return this;
  }

  /**
   * Get targetParticipantID
   * @return targetParticipantID
   */
  @javax.annotation.Nullable
  public String getTargetParticipantID() {
    return targetParticipantID;
  }

  public void setTargetParticipantID(String targetParticipantID) {
    this.targetParticipantID = targetParticipantID;
  }


  public TgvalidatordTnPledge currencyID(String currencyID) {
    this.currencyID = currencyID;
    return this;
  }

  /**
   * Get currencyID
   * @return currencyID
   */
  @javax.annotation.Nullable
  public String getCurrencyID() {
    return currencyID;
  }

  public void setCurrencyID(String currencyID) {
    this.currencyID = currencyID;
  }


  public TgvalidatordTnPledge blockchain(String blockchain) {
    this.blockchain = blockchain;
    return this;
  }

  /**
   * Get blockchain
   * @return blockchain
   */
  @javax.annotation.Nullable
  public String getBlockchain() {
    return blockchain;
  }

  public void setBlockchain(String blockchain) {
    this.blockchain = blockchain;
  }


  public TgvalidatordTnPledge network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Get network
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public TgvalidatordTnPledge arg1(String arg1) {
    this.arg1 = arg1;
    return this;
  }

  /**
   * Get arg1
   * @return arg1
   */
  @javax.annotation.Nullable
  public String getArg1() {
    return arg1;
  }

  public void setArg1(String arg1) {
    this.arg1 = arg1;
  }


  public TgvalidatordTnPledge arg2(String arg2) {
    this.arg2 = arg2;
    return this;
  }

  /**
   * Get arg2
   * @return arg2
   */
  @javax.annotation.Nullable
  public String getArg2() {
    return arg2;
  }

  public void setArg2(String arg2) {
    this.arg2 = arg2;
  }


  public TgvalidatordTnPledge amount(String amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }


  public TgvalidatordTnPledge status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public TgvalidatordTnPledge pledgeType(String pledgeType) {
    this.pledgeType = pledgeType;
    return this;
  }

  /**
   * Get pledgeType
   * @return pledgeType
   */
  @javax.annotation.Nullable
  public String getPledgeType() {
    return pledgeType;
  }

  public void setPledgeType(String pledgeType) {
    this.pledgeType = pledgeType;
  }


  public TgvalidatordTnPledge trails(List<TgvalidatordTnPledgeTrail> trails) {
    this.trails = trails;
    return this;
  }

  public TgvalidatordTnPledge addTrailsItem(TgvalidatordTnPledgeTrail trailsItem) {
    if (this.trails == null) {
      this.trails = new ArrayList<>();
    }
    this.trails.add(trailsItem);
    return this;
  }

  /**
   * Get trails
   * @return trails
   */
  @javax.annotation.Nullable
  public List<TgvalidatordTnPledgeTrail> getTrails() {
    return trails;
  }

  public void setTrails(List<TgvalidatordTnPledgeTrail> trails) {
    this.trails = trails;
  }


  public TgvalidatordTnPledge originCreationDate(OffsetDateTime originCreationDate) {
    this.originCreationDate = originCreationDate;
    return this;
  }

  /**
   * Get originCreationDate
   * @return originCreationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getOriginCreationDate() {
    return originCreationDate;
  }

  public void setOriginCreationDate(OffsetDateTime originCreationDate) {
    this.originCreationDate = originCreationDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordTnPledge tgvalidatordTnPledge = (TgvalidatordTnPledge) o;
    return Objects.equals(this.id, tgvalidatordTnPledge.id) &&
        Objects.equals(this.sharedAddressID, tgvalidatordTnPledge.sharedAddressID) &&
        Objects.equals(this.ownerParticipantID, tgvalidatordTnPledge.ownerParticipantID) &&
        Objects.equals(this.targetParticipantID, tgvalidatordTnPledge.targetParticipantID) &&
        Objects.equals(this.currencyID, tgvalidatordTnPledge.currencyID) &&
        Objects.equals(this.blockchain, tgvalidatordTnPledge.blockchain) &&
        Objects.equals(this.network, tgvalidatordTnPledge.network) &&
        Objects.equals(this.arg1, tgvalidatordTnPledge.arg1) &&
        Objects.equals(this.arg2, tgvalidatordTnPledge.arg2) &&
        Objects.equals(this.amount, tgvalidatordTnPledge.amount) &&
        Objects.equals(this.status, tgvalidatordTnPledge.status) &&
        Objects.equals(this.pledgeType, tgvalidatordTnPledge.pledgeType) &&
        Objects.equals(this.trails, tgvalidatordTnPledge.trails) &&
        Objects.equals(this.originCreationDate, tgvalidatordTnPledge.originCreationDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, sharedAddressID, ownerParticipantID, targetParticipantID, currencyID, blockchain, network, arg1, arg2, amount, status, pledgeType, trails, originCreationDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordTnPledge {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sharedAddressID: ").append(toIndentedString(sharedAddressID)).append("\n");
    sb.append("    ownerParticipantID: ").append(toIndentedString(ownerParticipantID)).append("\n");
    sb.append("    targetParticipantID: ").append(toIndentedString(targetParticipantID)).append("\n");
    sb.append("    currencyID: ").append(toIndentedString(currencyID)).append("\n");
    sb.append("    blockchain: ").append(toIndentedString(blockchain)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    arg1: ").append(toIndentedString(arg1)).append("\n");
    sb.append("    arg2: ").append(toIndentedString(arg2)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    pledgeType: ").append(toIndentedString(pledgeType)).append("\n");
    sb.append("    trails: ").append(toIndentedString(trails)).append("\n");
    sb.append("    originCreationDate: ").append(toIndentedString(originCreationDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("sharedAddressID");
    openapiFields.add("ownerParticipantID");
    openapiFields.add("targetParticipantID");
    openapiFields.add("currencyID");
    openapiFields.add("blockchain");
    openapiFields.add("network");
    openapiFields.add("arg1");
    openapiFields.add("arg2");
    openapiFields.add("amount");
    openapiFields.add("status");
    openapiFields.add("pledgeType");
    openapiFields.add("trails");
    openapiFields.add("originCreationDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordTnPledge
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordTnPledge.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordTnPledge is not found in the empty JSON string", TgvalidatordTnPledge.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordTnPledge.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordTnPledge` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("sharedAddressID") != null && !jsonObj.get("sharedAddressID").isJsonNull()) && !jsonObj.get("sharedAddressID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedAddressID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedAddressID").toString()));
      }
      if ((jsonObj.get("ownerParticipantID") != null && !jsonObj.get("ownerParticipantID").isJsonNull()) && !jsonObj.get("ownerParticipantID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerParticipantID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerParticipantID").toString()));
      }
      if ((jsonObj.get("targetParticipantID") != null && !jsonObj.get("targetParticipantID").isJsonNull()) && !jsonObj.get("targetParticipantID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetParticipantID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetParticipantID").toString()));
      }
      if ((jsonObj.get("currencyID") != null && !jsonObj.get("currencyID").isJsonNull()) && !jsonObj.get("currencyID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyID").toString()));
      }
      if ((jsonObj.get("blockchain") != null && !jsonObj.get("blockchain").isJsonNull()) && !jsonObj.get("blockchain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockchain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockchain").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("arg1") != null && !jsonObj.get("arg1").isJsonNull()) && !jsonObj.get("arg1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arg1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arg1").toString()));
      }
      if ((jsonObj.get("arg2") != null && !jsonObj.get("arg2").isJsonNull()) && !jsonObj.get("arg2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arg2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arg2").toString()));
      }
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("pledgeType") != null && !jsonObj.get("pledgeType").isJsonNull()) && !jsonObj.get("pledgeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pledgeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pledgeType").toString()));
      }
      if (jsonObj.get("trails") != null && !jsonObj.get("trails").isJsonNull()) {
        JsonArray jsonArraytrails = jsonObj.getAsJsonArray("trails");
        if (jsonArraytrails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("trails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `trails` to be an array in the JSON string but got `%s`", jsonObj.get("trails").toString()));
          }

          // validate the optional field `trails` (array)
          for (int i = 0; i < jsonArraytrails.size(); i++) {
            TgvalidatordTnPledgeTrail.validateJsonElement(jsonArraytrails.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordTnPledge.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordTnPledge' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordTnPledge> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordTnPledge.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordTnPledge>() {
           @Override
           public void write(JsonWriter out, TgvalidatordTnPledge value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordTnPledge read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordTnPledge given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordTnPledge
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordTnPledge
   */
  public static TgvalidatordTnPledge fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordTnPledge.class);
  }

  /**
   * Convert an instance of TgvalidatordTnPledge to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

