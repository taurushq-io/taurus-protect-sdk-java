/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordCreateOutgoingCancelRequestRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordCreateOutgoingCancelRequestRequest {
  public static final String SERIALIZED_NAME_ADDRESS_ID = "addressId";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ID)
  private String addressId;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_FEE_PAYER_ID = "feePayerId";
  @SerializedName(SERIALIZED_NAME_FEE_PAYER_ID)
  private String feePayerId;

  public static final String SERIALIZED_NAME_ADDRESS_IDS = "addressIds";
  @SerializedName(SERIALIZED_NAME_ADDRESS_IDS)
  private List<String> addressIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_NONCES = "nonces";
  @SerializedName(SERIALIZED_NAME_NONCES)
  private List<String> nonces = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTERNAL_REQUEST_ID = "externalRequestId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REQUEST_ID)
  private String externalRequestId;

  public TgvalidatordCreateOutgoingCancelRequestRequest() {
  }

  public TgvalidatordCreateOutgoingCancelRequestRequest addressId(String addressId) {
    this.addressId = addressId;
    return this;
  }

  /**
   * Get addressId
   * @return addressId
   */
  @javax.annotation.Nonnull
  public String getAddressId() {
    return addressId;
  }

  public void setAddressId(String addressId) {
    this.addressId = addressId;
  }


  public TgvalidatordCreateOutgoingCancelRequestRequest nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * Get nonce
   * @return nonce
   */
  @javax.annotation.Nullable
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public TgvalidatordCreateOutgoingCancelRequestRequest feePayerId(String feePayerId) {
    this.feePayerId = feePayerId;
    return this;
  }

  /**
   * Get feePayerId
   * @return feePayerId
   */
  @javax.annotation.Nullable
  public String getFeePayerId() {
    return feePayerId;
  }

  public void setFeePayerId(String feePayerId) {
    this.feePayerId = feePayerId;
  }


  public TgvalidatordCreateOutgoingCancelRequestRequest addressIds(List<String> addressIds) {
    this.addressIds = addressIds;
    return this;
  }

  public TgvalidatordCreateOutgoingCancelRequestRequest addAddressIdsItem(String addressIdsItem) {
    if (this.addressIds == null) {
      this.addressIds = new ArrayList<>();
    }
    this.addressIds.add(addressIdsItem);
    return this;
  }

  /**
   * Get addressIds
   * @return addressIds
   */
  @javax.annotation.Nullable
  public List<String> getAddressIds() {
    return addressIds;
  }

  public void setAddressIds(List<String> addressIds) {
    this.addressIds = addressIds;
  }


  public TgvalidatordCreateOutgoingCancelRequestRequest nonces(List<String> nonces) {
    this.nonces = nonces;
    return this;
  }

  public TgvalidatordCreateOutgoingCancelRequestRequest addNoncesItem(String noncesItem) {
    if (this.nonces == null) {
      this.nonces = new ArrayList<>();
    }
    this.nonces.add(noncesItem);
    return this;
  }

  /**
   * Get nonces
   * @return nonces
   */
  @javax.annotation.Nullable
  public List<String> getNonces() {
    return nonces;
  }

  public void setNonces(List<String> nonces) {
    this.nonces = nonces;
  }


  public TgvalidatordCreateOutgoingCancelRequestRequest externalRequestId(String externalRequestId) {
    this.externalRequestId = externalRequestId;
    return this;
  }

  /**
   * Identifier for the request in the user&#39;s system. This must be unique. Attempting to create a request with an existing externalRequestId will do nothing and return the originally created request
   * @return externalRequestId
   */
  @javax.annotation.Nullable
  public String getExternalRequestId() {
    return externalRequestId;
  }

  public void setExternalRequestId(String externalRequestId) {
    this.externalRequestId = externalRequestId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordCreateOutgoingCancelRequestRequest tgvalidatordCreateOutgoingCancelRequestRequest = (TgvalidatordCreateOutgoingCancelRequestRequest) o;
    return Objects.equals(this.addressId, tgvalidatordCreateOutgoingCancelRequestRequest.addressId) &&
        Objects.equals(this.nonce, tgvalidatordCreateOutgoingCancelRequestRequest.nonce) &&
        Objects.equals(this.feePayerId, tgvalidatordCreateOutgoingCancelRequestRequest.feePayerId) &&
        Objects.equals(this.addressIds, tgvalidatordCreateOutgoingCancelRequestRequest.addressIds) &&
        Objects.equals(this.nonces, tgvalidatordCreateOutgoingCancelRequestRequest.nonces) &&
        Objects.equals(this.externalRequestId, tgvalidatordCreateOutgoingCancelRequestRequest.externalRequestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressId, nonce, feePayerId, addressIds, nonces, externalRequestId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordCreateOutgoingCancelRequestRequest {\n");
    sb.append("    addressId: ").append(toIndentedString(addressId)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    feePayerId: ").append(toIndentedString(feePayerId)).append("\n");
    sb.append("    addressIds: ").append(toIndentedString(addressIds)).append("\n");
    sb.append("    nonces: ").append(toIndentedString(nonces)).append("\n");
    sb.append("    externalRequestId: ").append(toIndentedString(externalRequestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressId");
    openapiFields.add("nonce");
    openapiFields.add("feePayerId");
    openapiFields.add("addressIds");
    openapiFields.add("nonces");
    openapiFields.add("externalRequestId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addressId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordCreateOutgoingCancelRequestRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordCreateOutgoingCancelRequestRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordCreateOutgoingCancelRequestRequest is not found in the empty JSON string", TgvalidatordCreateOutgoingCancelRequestRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordCreateOutgoingCancelRequestRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordCreateOutgoingCancelRequestRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TgvalidatordCreateOutgoingCancelRequestRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("addressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressId").toString()));
      }
      if ((jsonObj.get("nonce") != null && !jsonObj.get("nonce").isJsonNull()) && !jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
      if ((jsonObj.get("feePayerId") != null && !jsonObj.get("feePayerId").isJsonNull()) && !jsonObj.get("feePayerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feePayerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feePayerId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("addressIds") != null && !jsonObj.get("addressIds").isJsonNull() && !jsonObj.get("addressIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressIds` to be an array in the JSON string but got `%s`", jsonObj.get("addressIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nonces") != null && !jsonObj.get("nonces").isJsonNull() && !jsonObj.get("nonces").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonces` to be an array in the JSON string but got `%s`", jsonObj.get("nonces").toString()));
      }
      if ((jsonObj.get("externalRequestId") != null && !jsonObj.get("externalRequestId").isJsonNull()) && !jsonObj.get("externalRequestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalRequestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalRequestId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordCreateOutgoingCancelRequestRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordCreateOutgoingCancelRequestRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordCreateOutgoingCancelRequestRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordCreateOutgoingCancelRequestRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordCreateOutgoingCancelRequestRequest>() {
           @Override
           public void write(JsonWriter out, TgvalidatordCreateOutgoingCancelRequestRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordCreateOutgoingCancelRequestRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordCreateOutgoingCancelRequestRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordCreateOutgoingCancelRequestRequest
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordCreateOutgoingCancelRequestRequest
   */
  public static TgvalidatordCreateOutgoingCancelRequestRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordCreateOutgoingCancelRequestRequest.class);
  }

  /**
   * Convert an instance of TgvalidatordCreateOutgoingCancelRequestRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

