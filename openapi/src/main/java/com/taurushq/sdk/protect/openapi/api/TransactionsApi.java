/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.api;

import com.taurushq.sdk.protect.openapi.ApiCallback;
import com.taurushq.sdk.protect.openapi.ApiClient;
import com.taurushq.sdk.protect.openapi.ApiException;
import com.taurushq.sdk.protect.openapi.ApiResponse;
import com.taurushq.sdk.protect.openapi.Configuration;
import com.taurushq.sdk.protect.openapi.Pair;
import com.taurushq.sdk.protect.openapi.ProgressRequestBody;
import com.taurushq.sdk.protect.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.taurushq.sdk.protect.openapi.model.GooglerpcStatus;
import java.time.OffsetDateTime;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordExportTransactionsReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetTransactionsReply;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for transactionServiceExportTransactions
     * @param currency Filter on ID or symbol of the currency (optional)
     * @param direction  (optional)
     * @param query  (optional)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @param transactionIds  (optional)
     * @param format Desired file format, can be json, csv or csv_simple. (optional)
     * @param type  (optional)
     * @param source Returns only transaction that have this address as a source (optional)
     * @param destination Returns only transaction that have this address as a destination (optional)
     * @param ids Filter on Protect transaction ID, as visible in the transaction objects. (optional)
     * @param blockchain  (optional)
     * @param network  (optional)
     * @param fromBlockNumber  (optional)
     * @param toBlockNumber  (optional)
     * @param amountAbove Returns only transactions with an amount strictly above the given amount (optional)
     * @param excludeUnknownSourceDestination Returns only transactions with a known source and destination, default false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionServiceExportTransactionsCall(String currency, String direction, String query, String limit, String offset, OffsetDateTime from, OffsetDateTime to, List<String> transactionIds, String format, String type, String source, String destination, List<String> ids, String blockchain, String network, String fromBlockNumber, String toBlockNumber, String amountAbove, Boolean excludeUnknownSourceDestination, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/transactions/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (transactionIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "transactionIds", transactionIds));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (destination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination", destination));
        }

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        if (blockchain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blockchain", blockchain));
        }

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        if (fromBlockNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromBlockNumber", fromBlockNumber));
        }

        if (toBlockNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toBlockNumber", toBlockNumber));
        }

        if (amountAbove != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amountAbove", amountAbove));
        }

        if (excludeUnknownSourceDestination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeUnknownSourceDestination", excludeUnknownSourceDestination));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionServiceExportTransactionsValidateBeforeCall(String currency, String direction, String query, String limit, String offset, OffsetDateTime from, OffsetDateTime to, List<String> transactionIds, String format, String type, String source, String destination, List<String> ids, String blockchain, String network, String fromBlockNumber, String toBlockNumber, String amountAbove, Boolean excludeUnknownSourceDestination, final ApiCallback _callback) throws ApiException {
        return transactionServiceExportTransactionsCall(currency, direction, query, limit, offset, from, to, transactionIds, format, type, source, destination, ids, blockchain, network, fromBlockNumber, toBlockNumber, amountAbove, excludeUnknownSourceDestination, _callback);

    }

    /**
     * Export transactions
     * This endpoint exports a list of transactions
     * @param currency Filter on ID or symbol of the currency (optional)
     * @param direction  (optional)
     * @param query  (optional)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @param transactionIds  (optional)
     * @param format Desired file format, can be json, csv or csv_simple. (optional)
     * @param type  (optional)
     * @param source Returns only transaction that have this address as a source (optional)
     * @param destination Returns only transaction that have this address as a destination (optional)
     * @param ids Filter on Protect transaction ID, as visible in the transaction objects. (optional)
     * @param blockchain  (optional)
     * @param network  (optional)
     * @param fromBlockNumber  (optional)
     * @param toBlockNumber  (optional)
     * @param amountAbove Returns only transactions with an amount strictly above the given amount (optional)
     * @param excludeUnknownSourceDestination Returns only transactions with a known source and destination, default false (optional)
     * @return TgvalidatordExportTransactionsReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordExportTransactionsReply transactionServiceExportTransactions(String currency, String direction, String query, String limit, String offset, OffsetDateTime from, OffsetDateTime to, List<String> transactionIds, String format, String type, String source, String destination, List<String> ids, String blockchain, String network, String fromBlockNumber, String toBlockNumber, String amountAbove, Boolean excludeUnknownSourceDestination) throws ApiException {
        ApiResponse<TgvalidatordExportTransactionsReply> localVarResp = transactionServiceExportTransactionsWithHttpInfo(currency, direction, query, limit, offset, from, to, transactionIds, format, type, source, destination, ids, blockchain, network, fromBlockNumber, toBlockNumber, amountAbove, excludeUnknownSourceDestination);
        return localVarResp.getData();
    }

    /**
     * Export transactions
     * This endpoint exports a list of transactions
     * @param currency Filter on ID or symbol of the currency (optional)
     * @param direction  (optional)
     * @param query  (optional)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @param transactionIds  (optional)
     * @param format Desired file format, can be json, csv or csv_simple. (optional)
     * @param type  (optional)
     * @param source Returns only transaction that have this address as a source (optional)
     * @param destination Returns only transaction that have this address as a destination (optional)
     * @param ids Filter on Protect transaction ID, as visible in the transaction objects. (optional)
     * @param blockchain  (optional)
     * @param network  (optional)
     * @param fromBlockNumber  (optional)
     * @param toBlockNumber  (optional)
     * @param amountAbove Returns only transactions with an amount strictly above the given amount (optional)
     * @param excludeUnknownSourceDestination Returns only transactions with a known source and destination, default false (optional)
     * @return ApiResponse&lt;TgvalidatordExportTransactionsReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordExportTransactionsReply> transactionServiceExportTransactionsWithHttpInfo(String currency, String direction, String query, String limit, String offset, OffsetDateTime from, OffsetDateTime to, List<String> transactionIds, String format, String type, String source, String destination, List<String> ids, String blockchain, String network, String fromBlockNumber, String toBlockNumber, String amountAbove, Boolean excludeUnknownSourceDestination) throws ApiException {
        okhttp3.Call localVarCall = transactionServiceExportTransactionsValidateBeforeCall(currency, direction, query, limit, offset, from, to, transactionIds, format, type, source, destination, ids, blockchain, network, fromBlockNumber, toBlockNumber, amountAbove, excludeUnknownSourceDestination, null);
        Type localVarReturnType = new TypeToken<TgvalidatordExportTransactionsReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export transactions (asynchronously)
     * This endpoint exports a list of transactions
     * @param currency Filter on ID or symbol of the currency (optional)
     * @param direction  (optional)
     * @param query  (optional)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @param transactionIds  (optional)
     * @param format Desired file format, can be json, csv or csv_simple. (optional)
     * @param type  (optional)
     * @param source Returns only transaction that have this address as a source (optional)
     * @param destination Returns only transaction that have this address as a destination (optional)
     * @param ids Filter on Protect transaction ID, as visible in the transaction objects. (optional)
     * @param blockchain  (optional)
     * @param network  (optional)
     * @param fromBlockNumber  (optional)
     * @param toBlockNumber  (optional)
     * @param amountAbove Returns only transactions with an amount strictly above the given amount (optional)
     * @param excludeUnknownSourceDestination Returns only transactions with a known source and destination, default false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionServiceExportTransactionsAsync(String currency, String direction, String query, String limit, String offset, OffsetDateTime from, OffsetDateTime to, List<String> transactionIds, String format, String type, String source, String destination, List<String> ids, String blockchain, String network, String fromBlockNumber, String toBlockNumber, String amountAbove, Boolean excludeUnknownSourceDestination, final ApiCallback<TgvalidatordExportTransactionsReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionServiceExportTransactionsValidateBeforeCall(currency, direction, query, limit, offset, from, to, transactionIds, format, type, source, destination, ids, blockchain, network, fromBlockNumber, toBlockNumber, amountAbove, excludeUnknownSourceDestination, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordExportTransactionsReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionServiceGetTransactions
     * @param currency Filter on ID or symbol of the currency (optional)
     * @param direction  (optional)
     * @param query Filter by query string in any of the fields address, customerid, transactionid, hash, type. (optional)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @param transactionIds Filter on Protect internal transactionID. This is purely internal and should rarely be used by clients (optional)
     * @param type  (optional)
     * @param source Returns only transaction that have this address as a source (optional)
     * @param destination Returns only transaction that have this address as a destination (optional)
     * @param ids Filter on Protect transaction ID, as visible in the transaction objects. (optional)
     * @param blockchain  (optional)
     * @param network  (optional)
     * @param fromBlockNumber  (optional)
     * @param toBlockNumber  (optional)
     * @param hashes Filter on transaction hash, as visible in the transaction objects. (optional)
     * @param address Returns only transaction that have this address as either a source or a destination (optional)
     * @param amountAbove Returns only transactions with an amount strictly above the given amount (optional)
     * @param excludeUnknownSourceDestination Returns only transactions with a known source and destination, default false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionServiceGetTransactionsCall(String currency, String direction, String query, String limit, String offset, OffsetDateTime from, OffsetDateTime to, List<String> transactionIds, String type, String source, String destination, List<String> ids, String blockchain, String network, String fromBlockNumber, String toBlockNumber, List<String> hashes, String address, String amountAbove, Boolean excludeUnknownSourceDestination, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (transactionIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "transactionIds", transactionIds));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (destination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination", destination));
        }

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        if (blockchain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blockchain", blockchain));
        }

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        if (fromBlockNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromBlockNumber", fromBlockNumber));
        }

        if (toBlockNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toBlockNumber", toBlockNumber));
        }

        if (hashes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "hashes", hashes));
        }

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (amountAbove != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amountAbove", amountAbove));
        }

        if (excludeUnknownSourceDestination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeUnknownSourceDestination", excludeUnknownSourceDestination));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionServiceGetTransactionsValidateBeforeCall(String currency, String direction, String query, String limit, String offset, OffsetDateTime from, OffsetDateTime to, List<String> transactionIds, String type, String source, String destination, List<String> ids, String blockchain, String network, String fromBlockNumber, String toBlockNumber, List<String> hashes, String address, String amountAbove, Boolean excludeUnknownSourceDestination, final ApiCallback _callback) throws ApiException {
        return transactionServiceGetTransactionsCall(currency, direction, query, limit, offset, from, to, transactionIds, type, source, destination, ids, blockchain, network, fromBlockNumber, toBlockNumber, hashes, address, amountAbove, excludeUnknownSourceDestination, _callback);

    }

    /**
     * List transactions
     * This endpoint returns a list of transactions
     * @param currency Filter on ID or symbol of the currency (optional)
     * @param direction  (optional)
     * @param query Filter by query string in any of the fields address, customerid, transactionid, hash, type. (optional)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @param transactionIds Filter on Protect internal transactionID. This is purely internal and should rarely be used by clients (optional)
     * @param type  (optional)
     * @param source Returns only transaction that have this address as a source (optional)
     * @param destination Returns only transaction that have this address as a destination (optional)
     * @param ids Filter on Protect transaction ID, as visible in the transaction objects. (optional)
     * @param blockchain  (optional)
     * @param network  (optional)
     * @param fromBlockNumber  (optional)
     * @param toBlockNumber  (optional)
     * @param hashes Filter on transaction hash, as visible in the transaction objects. (optional)
     * @param address Returns only transaction that have this address as either a source or a destination (optional)
     * @param amountAbove Returns only transactions with an amount strictly above the given amount (optional)
     * @param excludeUnknownSourceDestination Returns only transactions with a known source and destination, default false (optional)
     * @return TgvalidatordGetTransactionsReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordGetTransactionsReply transactionServiceGetTransactions(String currency, String direction, String query, String limit, String offset, OffsetDateTime from, OffsetDateTime to, List<String> transactionIds, String type, String source, String destination, List<String> ids, String blockchain, String network, String fromBlockNumber, String toBlockNumber, List<String> hashes, String address, String amountAbove, Boolean excludeUnknownSourceDestination) throws ApiException {
        ApiResponse<TgvalidatordGetTransactionsReply> localVarResp = transactionServiceGetTransactionsWithHttpInfo(currency, direction, query, limit, offset, from, to, transactionIds, type, source, destination, ids, blockchain, network, fromBlockNumber, toBlockNumber, hashes, address, amountAbove, excludeUnknownSourceDestination);
        return localVarResp.getData();
    }

    /**
     * List transactions
     * This endpoint returns a list of transactions
     * @param currency Filter on ID or symbol of the currency (optional)
     * @param direction  (optional)
     * @param query Filter by query string in any of the fields address, customerid, transactionid, hash, type. (optional)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @param transactionIds Filter on Protect internal transactionID. This is purely internal and should rarely be used by clients (optional)
     * @param type  (optional)
     * @param source Returns only transaction that have this address as a source (optional)
     * @param destination Returns only transaction that have this address as a destination (optional)
     * @param ids Filter on Protect transaction ID, as visible in the transaction objects. (optional)
     * @param blockchain  (optional)
     * @param network  (optional)
     * @param fromBlockNumber  (optional)
     * @param toBlockNumber  (optional)
     * @param hashes Filter on transaction hash, as visible in the transaction objects. (optional)
     * @param address Returns only transaction that have this address as either a source or a destination (optional)
     * @param amountAbove Returns only transactions with an amount strictly above the given amount (optional)
     * @param excludeUnknownSourceDestination Returns only transactions with a known source and destination, default false (optional)
     * @return ApiResponse&lt;TgvalidatordGetTransactionsReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordGetTransactionsReply> transactionServiceGetTransactionsWithHttpInfo(String currency, String direction, String query, String limit, String offset, OffsetDateTime from, OffsetDateTime to, List<String> transactionIds, String type, String source, String destination, List<String> ids, String blockchain, String network, String fromBlockNumber, String toBlockNumber, List<String> hashes, String address, String amountAbove, Boolean excludeUnknownSourceDestination) throws ApiException {
        okhttp3.Call localVarCall = transactionServiceGetTransactionsValidateBeforeCall(currency, direction, query, limit, offset, from, to, transactionIds, type, source, destination, ids, blockchain, network, fromBlockNumber, toBlockNumber, hashes, address, amountAbove, excludeUnknownSourceDestination, null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetTransactionsReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List transactions (asynchronously)
     * This endpoint returns a list of transactions
     * @param currency Filter on ID or symbol of the currency (optional)
     * @param direction  (optional)
     * @param query Filter by query string in any of the fields address, customerid, transactionid, hash, type. (optional)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @param transactionIds Filter on Protect internal transactionID. This is purely internal and should rarely be used by clients (optional)
     * @param type  (optional)
     * @param source Returns only transaction that have this address as a source (optional)
     * @param destination Returns only transaction that have this address as a destination (optional)
     * @param ids Filter on Protect transaction ID, as visible in the transaction objects. (optional)
     * @param blockchain  (optional)
     * @param network  (optional)
     * @param fromBlockNumber  (optional)
     * @param toBlockNumber  (optional)
     * @param hashes Filter on transaction hash, as visible in the transaction objects. (optional)
     * @param address Returns only transaction that have this address as either a source or a destination (optional)
     * @param amountAbove Returns only transactions with an amount strictly above the given amount (optional)
     * @param excludeUnknownSourceDestination Returns only transactions with a known source and destination, default false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionServiceGetTransactionsAsync(String currency, String direction, String query, String limit, String offset, OffsetDateTime from, OffsetDateTime to, List<String> transactionIds, String type, String source, String destination, List<String> ids, String blockchain, String network, String fromBlockNumber, String toBlockNumber, List<String> hashes, String address, String amountAbove, Boolean excludeUnknownSourceDestination, final ApiCallback<TgvalidatordGetTransactionsReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionServiceGetTransactionsValidateBeforeCall(currency, direction, query, limit, offset, from, to, transactionIds, type, source, destination, ids, blockchain, network, fromBlockNumber, toBlockNumber, hashes, address, amountAbove, excludeUnknownSourceDestination, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetTransactionsReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
