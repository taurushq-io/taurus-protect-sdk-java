/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * Balance in the smallest currency unit. Example: 1500000000000000000 WEI (smallest ETH unit) corresponds to 1.5 ETH
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordBalance {
  public static final String SERIALIZED_NAME_TOTAL_CONFIRMED = "totalConfirmed";
  @SerializedName(SERIALIZED_NAME_TOTAL_CONFIRMED)
  private String totalConfirmed;

  public static final String SERIALIZED_NAME_TOTAL_UNCONFIRMED = "totalUnconfirmed";
  @SerializedName(SERIALIZED_NAME_TOTAL_UNCONFIRMED)
  private String totalUnconfirmed;

  public static final String SERIALIZED_NAME_AVAILABLE_CONFIRMED = "availableConfirmed";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_CONFIRMED)
  private String availableConfirmed;

  public static final String SERIALIZED_NAME_AVAILABLE_UNCONFIRMED = "availableUnconfirmed";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_UNCONFIRMED)
  private String availableUnconfirmed;

  public static final String SERIALIZED_NAME_RESERVED_CONFIRMED = "reservedConfirmed";
  @SerializedName(SERIALIZED_NAME_RESERVED_CONFIRMED)
  private String reservedConfirmed;

  public static final String SERIALIZED_NAME_RESERVED_UNCONFIRMED = "reservedUnconfirmed";
  @SerializedName(SERIALIZED_NAME_RESERVED_UNCONFIRMED)
  private String reservedUnconfirmed;

  public TgvalidatordBalance() {
  }

  public TgvalidatordBalance totalConfirmed(String totalConfirmed) {
    this.totalConfirmed = totalConfirmed;
    return this;
  }

  /**
   * Get totalConfirmed
   * @return totalConfirmed
   */
  @javax.annotation.Nullable
  public String getTotalConfirmed() {
    return totalConfirmed;
  }

  public void setTotalConfirmed(String totalConfirmed) {
    this.totalConfirmed = totalConfirmed;
  }


  public TgvalidatordBalance totalUnconfirmed(String totalUnconfirmed) {
    this.totalUnconfirmed = totalUnconfirmed;
    return this;
  }

  /**
   * Get totalUnconfirmed
   * @return totalUnconfirmed
   */
  @javax.annotation.Nullable
  public String getTotalUnconfirmed() {
    return totalUnconfirmed;
  }

  public void setTotalUnconfirmed(String totalUnconfirmed) {
    this.totalUnconfirmed = totalUnconfirmed;
  }


  public TgvalidatordBalance availableConfirmed(String availableConfirmed) {
    this.availableConfirmed = availableConfirmed;
    return this;
  }

  /**
   * Get availableConfirmed
   * @return availableConfirmed
   */
  @javax.annotation.Nullable
  public String getAvailableConfirmed() {
    return availableConfirmed;
  }

  public void setAvailableConfirmed(String availableConfirmed) {
    this.availableConfirmed = availableConfirmed;
  }


  public TgvalidatordBalance availableUnconfirmed(String availableUnconfirmed) {
    this.availableUnconfirmed = availableUnconfirmed;
    return this;
  }

  /**
   * Get availableUnconfirmed
   * @return availableUnconfirmed
   */
  @javax.annotation.Nullable
  public String getAvailableUnconfirmed() {
    return availableUnconfirmed;
  }

  public void setAvailableUnconfirmed(String availableUnconfirmed) {
    this.availableUnconfirmed = availableUnconfirmed;
  }


  public TgvalidatordBalance reservedConfirmed(String reservedConfirmed) {
    this.reservedConfirmed = reservedConfirmed;
    return this;
  }

  /**
   * Get reservedConfirmed
   * @return reservedConfirmed
   */
  @javax.annotation.Nullable
  public String getReservedConfirmed() {
    return reservedConfirmed;
  }

  public void setReservedConfirmed(String reservedConfirmed) {
    this.reservedConfirmed = reservedConfirmed;
  }


  public TgvalidatordBalance reservedUnconfirmed(String reservedUnconfirmed) {
    this.reservedUnconfirmed = reservedUnconfirmed;
    return this;
  }

  /**
   * Get reservedUnconfirmed
   * @return reservedUnconfirmed
   */
  @javax.annotation.Nullable
  public String getReservedUnconfirmed() {
    return reservedUnconfirmed;
  }

  public void setReservedUnconfirmed(String reservedUnconfirmed) {
    this.reservedUnconfirmed = reservedUnconfirmed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordBalance tgvalidatordBalance = (TgvalidatordBalance) o;
    return Objects.equals(this.totalConfirmed, tgvalidatordBalance.totalConfirmed) &&
        Objects.equals(this.totalUnconfirmed, tgvalidatordBalance.totalUnconfirmed) &&
        Objects.equals(this.availableConfirmed, tgvalidatordBalance.availableConfirmed) &&
        Objects.equals(this.availableUnconfirmed, tgvalidatordBalance.availableUnconfirmed) &&
        Objects.equals(this.reservedConfirmed, tgvalidatordBalance.reservedConfirmed) &&
        Objects.equals(this.reservedUnconfirmed, tgvalidatordBalance.reservedUnconfirmed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalConfirmed, totalUnconfirmed, availableConfirmed, availableUnconfirmed, reservedConfirmed, reservedUnconfirmed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordBalance {\n");
    sb.append("    totalConfirmed: ").append(toIndentedString(totalConfirmed)).append("\n");
    sb.append("    totalUnconfirmed: ").append(toIndentedString(totalUnconfirmed)).append("\n");
    sb.append("    availableConfirmed: ").append(toIndentedString(availableConfirmed)).append("\n");
    sb.append("    availableUnconfirmed: ").append(toIndentedString(availableUnconfirmed)).append("\n");
    sb.append("    reservedConfirmed: ").append(toIndentedString(reservedConfirmed)).append("\n");
    sb.append("    reservedUnconfirmed: ").append(toIndentedString(reservedUnconfirmed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("totalConfirmed");
    openapiFields.add("totalUnconfirmed");
    openapiFields.add("availableConfirmed");
    openapiFields.add("availableUnconfirmed");
    openapiFields.add("reservedConfirmed");
    openapiFields.add("reservedUnconfirmed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordBalance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordBalance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordBalance is not found in the empty JSON string", TgvalidatordBalance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordBalance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordBalance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("totalConfirmed") != null && !jsonObj.get("totalConfirmed").isJsonNull()) && !jsonObj.get("totalConfirmed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalConfirmed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalConfirmed").toString()));
      }
      if ((jsonObj.get("totalUnconfirmed") != null && !jsonObj.get("totalUnconfirmed").isJsonNull()) && !jsonObj.get("totalUnconfirmed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalUnconfirmed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalUnconfirmed").toString()));
      }
      if ((jsonObj.get("availableConfirmed") != null && !jsonObj.get("availableConfirmed").isJsonNull()) && !jsonObj.get("availableConfirmed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableConfirmed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availableConfirmed").toString()));
      }
      if ((jsonObj.get("availableUnconfirmed") != null && !jsonObj.get("availableUnconfirmed").isJsonNull()) && !jsonObj.get("availableUnconfirmed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableUnconfirmed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availableUnconfirmed").toString()));
      }
      if ((jsonObj.get("reservedConfirmed") != null && !jsonObj.get("reservedConfirmed").isJsonNull()) && !jsonObj.get("reservedConfirmed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservedConfirmed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservedConfirmed").toString()));
      }
      if ((jsonObj.get("reservedUnconfirmed") != null && !jsonObj.get("reservedUnconfirmed").isJsonNull()) && !jsonObj.get("reservedUnconfirmed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservedUnconfirmed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservedUnconfirmed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordBalance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordBalance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordBalance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordBalance.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordBalance>() {
           @Override
           public void write(JsonWriter out, TgvalidatordBalance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordBalance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordBalance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordBalance
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordBalance
   */
  public static TgvalidatordBalance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordBalance.class);
  }

  /**
   * Convert an instance of TgvalidatordBalance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

