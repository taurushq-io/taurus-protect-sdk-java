/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordCreateIncomingRequestRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordCreateIncomingRequestRequest {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_FROM_EXCHANGE_ID = "fromExchangeId";
  @SerializedName(SERIALIZED_NAME_FROM_EXCHANGE_ID)
  private String fromExchangeId;

  public static final String SERIALIZED_NAME_TO_ADDRESS_ID = "toAddressId";
  @SerializedName(SERIALIZED_NAME_TO_ADDRESS_ID)
  private String toAddressId;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_TRANSACTION_REFERENCE = "transactionReference";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_REFERENCE)
  private String transactionReference;

  public static final String SERIALIZED_NAME_EXTERNAL_REQUEST_ID = "externalRequestId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REQUEST_ID)
  private String externalRequestId;

  public static final String SERIALIZED_NAME_FEE_PAID_BY_RECEIVER = "feePaidByReceiver";
  @SerializedName(SERIALIZED_NAME_FEE_PAID_BY_RECEIVER)
  private Boolean feePaidByReceiver;

  public TgvalidatordCreateIncomingRequestRequest() {
  }

  public TgvalidatordCreateIncomingRequestRequest amount(String amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nonnull
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }


  public TgvalidatordCreateIncomingRequestRequest fromExchangeId(String fromExchangeId) {
    this.fromExchangeId = fromExchangeId;
    return this;
  }

  /**
   * Get fromExchangeId
   * @return fromExchangeId
   */
  @javax.annotation.Nonnull
  public String getFromExchangeId() {
    return fromExchangeId;
  }

  public void setFromExchangeId(String fromExchangeId) {
    this.fromExchangeId = fromExchangeId;
  }


  public TgvalidatordCreateIncomingRequestRequest toAddressId(String toAddressId) {
    this.toAddressId = toAddressId;
    return this;
  }

  /**
   * Get toAddressId
   * @return toAddressId
   */
  @javax.annotation.Nonnull
  public String getToAddressId() {
    return toAddressId;
  }

  public void setToAddressId(String toAddressId) {
    this.toAddressId = toAddressId;
  }


  public TgvalidatordCreateIncomingRequestRequest comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public TgvalidatordCreateIncomingRequestRequest transactionReference(String transactionReference) {
    this.transactionReference = transactionReference;
    return this;
  }

  /**
   * DEPRECATED - use externalRequestId instead
   * @return transactionReference
   */
  @javax.annotation.Nullable
  public String getTransactionReference() {
    return transactionReference;
  }

  public void setTransactionReference(String transactionReference) {
    this.transactionReference = transactionReference;
  }


  public TgvalidatordCreateIncomingRequestRequest externalRequestId(String externalRequestId) {
    this.externalRequestId = externalRequestId;
    return this;
  }

  /**
   * Identifier for the request in the user&#39;s system. This must be unique. Attempting to create a request with an existing externalRequestId will do nothing and return the originally created request
   * @return externalRequestId
   */
  @javax.annotation.Nullable
  public String getExternalRequestId() {
    return externalRequestId;
  }

  public void setExternalRequestId(String externalRequestId) {
    this.externalRequestId = externalRequestId;
  }


  public TgvalidatordCreateIncomingRequestRequest feePaidByReceiver(Boolean feePaidByReceiver) {
    this.feePaidByReceiver = feePaidByReceiver;
    return this;
  }

  /**
   * [Coinbase Pro/Exchange] If this flag is set, the fee will directly be deduced from the withdrawal amount (total withdrawal of requested amount). If the flag is not set, the fees will be added to the withdrawal amount (total withdrawal of requested amount plus fees).
   * @return feePaidByReceiver
   */
  @javax.annotation.Nullable
  public Boolean getFeePaidByReceiver() {
    return feePaidByReceiver;
  }

  public void setFeePaidByReceiver(Boolean feePaidByReceiver) {
    this.feePaidByReceiver = feePaidByReceiver;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordCreateIncomingRequestRequest tgvalidatordCreateIncomingRequestRequest = (TgvalidatordCreateIncomingRequestRequest) o;
    return Objects.equals(this.amount, tgvalidatordCreateIncomingRequestRequest.amount) &&
        Objects.equals(this.fromExchangeId, tgvalidatordCreateIncomingRequestRequest.fromExchangeId) &&
        Objects.equals(this.toAddressId, tgvalidatordCreateIncomingRequestRequest.toAddressId) &&
        Objects.equals(this.comment, tgvalidatordCreateIncomingRequestRequest.comment) &&
        Objects.equals(this.transactionReference, tgvalidatordCreateIncomingRequestRequest.transactionReference) &&
        Objects.equals(this.externalRequestId, tgvalidatordCreateIncomingRequestRequest.externalRequestId) &&
        Objects.equals(this.feePaidByReceiver, tgvalidatordCreateIncomingRequestRequest.feePaidByReceiver);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, fromExchangeId, toAddressId, comment, transactionReference, externalRequestId, feePaidByReceiver);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordCreateIncomingRequestRequest {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    fromExchangeId: ").append(toIndentedString(fromExchangeId)).append("\n");
    sb.append("    toAddressId: ").append(toIndentedString(toAddressId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    transactionReference: ").append(toIndentedString(transactionReference)).append("\n");
    sb.append("    externalRequestId: ").append(toIndentedString(externalRequestId)).append("\n");
    sb.append("    feePaidByReceiver: ").append(toIndentedString(feePaidByReceiver)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("fromExchangeId");
    openapiFields.add("toAddressId");
    openapiFields.add("comment");
    openapiFields.add("transactionReference");
    openapiFields.add("externalRequestId");
    openapiFields.add("feePaidByReceiver");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("fromExchangeId");
    openapiRequiredFields.add("toAddressId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordCreateIncomingRequestRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordCreateIncomingRequestRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordCreateIncomingRequestRequest is not found in the empty JSON string", TgvalidatordCreateIncomingRequestRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordCreateIncomingRequestRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordCreateIncomingRequestRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TgvalidatordCreateIncomingRequestRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if (!jsonObj.get("fromExchangeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromExchangeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromExchangeId").toString()));
      }
      if (!jsonObj.get("toAddressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toAddressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toAddressId").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("transactionReference") != null && !jsonObj.get("transactionReference").isJsonNull()) && !jsonObj.get("transactionReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionReference").toString()));
      }
      if ((jsonObj.get("externalRequestId") != null && !jsonObj.get("externalRequestId").isJsonNull()) && !jsonObj.get("externalRequestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalRequestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalRequestId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordCreateIncomingRequestRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordCreateIncomingRequestRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordCreateIncomingRequestRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordCreateIncomingRequestRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordCreateIncomingRequestRequest>() {
           @Override
           public void write(JsonWriter out, TgvalidatordCreateIncomingRequestRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordCreateIncomingRequestRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordCreateIncomingRequestRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordCreateIncomingRequestRequest
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordCreateIncomingRequestRequest
   */
  public static TgvalidatordCreateIncomingRequestRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordCreateIncomingRequestRequest.class);
  }

  /**
   * Convert an instance of TgvalidatordCreateIncomingRequestRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

