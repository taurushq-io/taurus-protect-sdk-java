/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.auth;

import com.google.common.base.Strings;
import com.taurushq.sdk.protect.openapi.ApiException;
import com.taurushq.sdk.protect.openapi.Pair;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;

import java.net.URI;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import static com.taurushq.sdk.protect.openapi.auth.CryptoTPV1.calculateSignedHeader;


public class ApiKeyTPV1Auth implements Authentication {
    private byte[] apiSecret;
    private String apiKey;

    public ApiKeyTPV1Auth() {
    }

    public void setApiKey(String apiKey) {
        this.apiKey = apiKey;
    }


    public void setApiSecret(String apiSecret) throws ApiKeyTPV1Exception {

        if (Strings.isNullOrEmpty(apiSecret)) {
            throw new ApiKeyTPV1Exception("invalid Api Secret: secret cannot be null or empty");
        }

        try {
            this.apiSecret = Hex.decodeHex(apiSecret);
        } catch (DecoderException e) {
            throw new ApiKeyTPV1Exception("invalid Api Secret: secret needs to be a valid hex encoding string", e);
        }
    }


    private String getHost(URI uri) {
        if (uri.getPort() == -1 || uri.getScheme().equals("http") && uri.getPort() == 80 || uri.getScheme().equals("https") && uri.getPort() == 443) {
            return uri.getHost();
        }
        return uri.getHost() + ":" + uri.getPort();
    }

    private String getContentType(Map<String, String> headerParams) {
        if (headerParams.getOrDefault("Content-Type", "").equals("application/json")) {
            // default charset to be included in the signature
            headerParams.put("Content-Type", "application/json; charset=utf-8");
        }
        return headerParams.getOrDefault("Content-Type", "");
    }

    @Override
    public void applyToParams(List<Pair> queryParams, Map<String, String> headerParams, Map<String, String> cookieParams,
                              String payload, String method, URI uri) throws ApiException {

        String header = calculateSignedHeader(apiKey, apiSecret, UUID.randomUUID().toString(), System.currentTimeMillis(), method, getHost(uri), uri.getPath(), uri.getRawQuery(), getContentType(headerParams), payload);
        headerParams.put("Authorization", header);
    }
}


