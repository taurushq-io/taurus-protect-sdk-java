/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordXTZBaker
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordXTZBaker {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_STAKING_BOND = "stakingBond";
  @SerializedName(SERIALIZED_NAME_STAKING_BOND)
  private String stakingBond;

  public static final String SERIALIZED_NAME_STAKING_BALANCE = "stakingBalance";
  @SerializedName(SERIALIZED_NAME_STAKING_BALANCE)
  private String stakingBalance;

  public static final String SERIALIZED_NAME_STAKING_CAPACITY = "stakingCapacity";
  @SerializedName(SERIALIZED_NAME_STAKING_CAPACITY)
  private String stakingCapacity;

  public static final String SERIALIZED_NAME_AVAILABLE_CAPACITY = "availableCapacity";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_CAPACITY)
  private String availableCapacity;

  public TgvalidatordXTZBaker() {
  }

  public TgvalidatordXTZBaker address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public TgvalidatordXTZBaker stakingBond(String stakingBond) {
    this.stakingBond = stakingBond;
    return this;
  }

  /**
   * Get stakingBond
   * @return stakingBond
   */
  @javax.annotation.Nullable
  public String getStakingBond() {
    return stakingBond;
  }

  public void setStakingBond(String stakingBond) {
    this.stakingBond = stakingBond;
  }


  public TgvalidatordXTZBaker stakingBalance(String stakingBalance) {
    this.stakingBalance = stakingBalance;
    return this;
  }

  /**
   * Get stakingBalance
   * @return stakingBalance
   */
  @javax.annotation.Nullable
  public String getStakingBalance() {
    return stakingBalance;
  }

  public void setStakingBalance(String stakingBalance) {
    this.stakingBalance = stakingBalance;
  }


  public TgvalidatordXTZBaker stakingCapacity(String stakingCapacity) {
    this.stakingCapacity = stakingCapacity;
    return this;
  }

  /**
   * Get stakingCapacity
   * @return stakingCapacity
   */
  @javax.annotation.Nullable
  public String getStakingCapacity() {
    return stakingCapacity;
  }

  public void setStakingCapacity(String stakingCapacity) {
    this.stakingCapacity = stakingCapacity;
  }


  public TgvalidatordXTZBaker availableCapacity(String availableCapacity) {
    this.availableCapacity = availableCapacity;
    return this;
  }

  /**
   * Get availableCapacity
   * @return availableCapacity
   */
  @javax.annotation.Nullable
  public String getAvailableCapacity() {
    return availableCapacity;
  }

  public void setAvailableCapacity(String availableCapacity) {
    this.availableCapacity = availableCapacity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordXTZBaker tgvalidatordXTZBaker = (TgvalidatordXTZBaker) o;
    return Objects.equals(this.address, tgvalidatordXTZBaker.address) &&
        Objects.equals(this.stakingBond, tgvalidatordXTZBaker.stakingBond) &&
        Objects.equals(this.stakingBalance, tgvalidatordXTZBaker.stakingBalance) &&
        Objects.equals(this.stakingCapacity, tgvalidatordXTZBaker.stakingCapacity) &&
        Objects.equals(this.availableCapacity, tgvalidatordXTZBaker.availableCapacity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, stakingBond, stakingBalance, stakingCapacity, availableCapacity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordXTZBaker {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    stakingBond: ").append(toIndentedString(stakingBond)).append("\n");
    sb.append("    stakingBalance: ").append(toIndentedString(stakingBalance)).append("\n");
    sb.append("    stakingCapacity: ").append(toIndentedString(stakingCapacity)).append("\n");
    sb.append("    availableCapacity: ").append(toIndentedString(availableCapacity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("stakingBond");
    openapiFields.add("stakingBalance");
    openapiFields.add("stakingCapacity");
    openapiFields.add("availableCapacity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordXTZBaker
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordXTZBaker.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordXTZBaker is not found in the empty JSON string", TgvalidatordXTZBaker.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordXTZBaker.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordXTZBaker` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("stakingBond") != null && !jsonObj.get("stakingBond").isJsonNull()) && !jsonObj.get("stakingBond").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stakingBond` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stakingBond").toString()));
      }
      if ((jsonObj.get("stakingBalance") != null && !jsonObj.get("stakingBalance").isJsonNull()) && !jsonObj.get("stakingBalance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stakingBalance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stakingBalance").toString()));
      }
      if ((jsonObj.get("stakingCapacity") != null && !jsonObj.get("stakingCapacity").isJsonNull()) && !jsonObj.get("stakingCapacity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stakingCapacity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stakingCapacity").toString()));
      }
      if ((jsonObj.get("availableCapacity") != null && !jsonObj.get("availableCapacity").isJsonNull()) && !jsonObj.get("availableCapacity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableCapacity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availableCapacity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordXTZBaker.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordXTZBaker' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordXTZBaker> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordXTZBaker.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordXTZBaker>() {
           @Override
           public void write(JsonWriter out, TgvalidatordXTZBaker value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordXTZBaker read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordXTZBaker given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordXTZBaker
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordXTZBaker
   */
  public static TgvalidatordXTZBaker fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordXTZBaker.class);
  }

  /**
   * Convert an instance of TgvalidatordXTZBaker to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

