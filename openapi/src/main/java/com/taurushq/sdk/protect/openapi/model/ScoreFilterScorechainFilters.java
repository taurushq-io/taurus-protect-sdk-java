/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * The risk score of Scorechain is between 0 (highest risk, bad) to 100 (lowest risk, good).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class ScoreFilterScorechainFilters {
  public static final String SERIALIZED_NAME_SCORE_IN_BELOW = "scoreInBelow";
  @SerializedName(SERIALIZED_NAME_SCORE_IN_BELOW)
  private String scoreInBelow;

  public static final String SERIALIZED_NAME_SCORE_OUT_BELOW = "scoreOutBelow";
  @SerializedName(SERIALIZED_NAME_SCORE_OUT_BELOW)
  private String scoreOutBelow;

  public static final String SERIALIZED_NAME_SCORE_EXCLUSIVE = "scoreExclusive";
  @SerializedName(SERIALIZED_NAME_SCORE_EXCLUSIVE)
  private Boolean scoreExclusive;

  public ScoreFilterScorechainFilters() {
  }

  public ScoreFilterScorechainFilters scoreInBelow(String scoreInBelow) {
    this.scoreInBelow = scoreInBelow;
    return this;
  }

  /**
   * Filter addresses under a Scorechain incoming score threshold.
   * @return scoreInBelow
   */
  @javax.annotation.Nullable
  public String getScoreInBelow() {
    return scoreInBelow;
  }

  public void setScoreInBelow(String scoreInBelow) {
    this.scoreInBelow = scoreInBelow;
  }


  public ScoreFilterScorechainFilters scoreOutBelow(String scoreOutBelow) {
    this.scoreOutBelow = scoreOutBelow;
    return this;
  }

  /**
   * Filter addresses under a Scorechain outgoing score threshold.
   * @return scoreOutBelow
   */
  @javax.annotation.Nullable
  public String getScoreOutBelow() {
    return scoreOutBelow;
  }

  public void setScoreOutBelow(String scoreOutBelow) {
    this.scoreOutBelow = scoreOutBelow;
  }


  public ScoreFilterScorechainFilters scoreExclusive(Boolean scoreExclusive) {
    this.scoreExclusive = scoreExclusive;
    return this;
  }

  /**
   * By default when both Scorechain scores scoreInBelow and scoreOutBelow are provided, it returns the addresses matching (scoreInBelow AND scoreOutBelow). When scoreExclusive is set to true, it will return the addresses matching (scoreInBelow OR scoreOutBelow).
   * @return scoreExclusive
   */
  @javax.annotation.Nullable
  public Boolean getScoreExclusive() {
    return scoreExclusive;
  }

  public void setScoreExclusive(Boolean scoreExclusive) {
    this.scoreExclusive = scoreExclusive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScoreFilterScorechainFilters scoreFilterScorechainFilters = (ScoreFilterScorechainFilters) o;
    return Objects.equals(this.scoreInBelow, scoreFilterScorechainFilters.scoreInBelow) &&
        Objects.equals(this.scoreOutBelow, scoreFilterScorechainFilters.scoreOutBelow) &&
        Objects.equals(this.scoreExclusive, scoreFilterScorechainFilters.scoreExclusive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scoreInBelow, scoreOutBelow, scoreExclusive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScoreFilterScorechainFilters {\n");
    sb.append("    scoreInBelow: ").append(toIndentedString(scoreInBelow)).append("\n");
    sb.append("    scoreOutBelow: ").append(toIndentedString(scoreOutBelow)).append("\n");
    sb.append("    scoreExclusive: ").append(toIndentedString(scoreExclusive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scoreInBelow");
    openapiFields.add("scoreOutBelow");
    openapiFields.add("scoreExclusive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScoreFilterScorechainFilters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScoreFilterScorechainFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScoreFilterScorechainFilters is not found in the empty JSON string", ScoreFilterScorechainFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScoreFilterScorechainFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScoreFilterScorechainFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("scoreInBelow") != null && !jsonObj.get("scoreInBelow").isJsonNull()) && !jsonObj.get("scoreInBelow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scoreInBelow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scoreInBelow").toString()));
      }
      if ((jsonObj.get("scoreOutBelow") != null && !jsonObj.get("scoreOutBelow").isJsonNull()) && !jsonObj.get("scoreOutBelow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scoreOutBelow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scoreOutBelow").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScoreFilterScorechainFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScoreFilterScorechainFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScoreFilterScorechainFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScoreFilterScorechainFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<ScoreFilterScorechainFilters>() {
           @Override
           public void write(JsonWriter out, ScoreFilterScorechainFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScoreFilterScorechainFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScoreFilterScorechainFilters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScoreFilterScorechainFilters
   * @throws IOException if the JSON string is invalid with respect to ScoreFilterScorechainFilters
   */
  public static ScoreFilterScorechainFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScoreFilterScorechainFilters.class);
  }

  /**
   * Convert an instance of ScoreFilterScorechainFilters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

