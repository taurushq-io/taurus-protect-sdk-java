/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.api;

import com.taurushq.sdk.protect.openapi.ApiCallback;
import com.taurushq.sdk.protect.openapi.ApiClient;
import com.taurushq.sdk.protect.openapi.ApiException;
import com.taurushq.sdk.protect.openapi.ApiResponse;
import com.taurushq.sdk.protect.openapi.Configuration;
import com.taurushq.sdk.protect.openapi.Pair;
import com.taurushq.sdk.protect.openapi.ProgressRequestBody;
import com.taurushq.sdk.protect.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.taurushq.sdk.protect.openapi.model.GooglerpcStatus;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordExportExchangesReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetExchangeCounterpartiesReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetExchangeReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetExchangeWithdrawalFeeReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetExchangesReply;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExchangeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExchangeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExchangeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for exchangeServiceExportExchanges
     * @param format Desired file format, can be csv or json. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exchangeServiceExportExchangesCall(String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/exchangeaccounts/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exchangeServiceExportExchangesValidateBeforeCall(String format, final ApiCallback _callback) throws ApiException {
        return exchangeServiceExportExchangesCall(format, _callback);

    }

    /**
     * Export exchange accounts
     * This endpoint exports a list of exchange accounts
     * @param format Desired file format, can be csv or json. (optional)
     * @return TgvalidatordExportExchangesReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordExportExchangesReply exchangeServiceExportExchanges(String format) throws ApiException {
        ApiResponse<TgvalidatordExportExchangesReply> localVarResp = exchangeServiceExportExchangesWithHttpInfo(format);
        return localVarResp.getData();
    }

    /**
     * Export exchange accounts
     * This endpoint exports a list of exchange accounts
     * @param format Desired file format, can be csv or json. (optional)
     * @return ApiResponse&lt;TgvalidatordExportExchangesReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordExportExchangesReply> exchangeServiceExportExchangesWithHttpInfo(String format) throws ApiException {
        okhttp3.Call localVarCall = exchangeServiceExportExchangesValidateBeforeCall(format, null);
        Type localVarReturnType = new TypeToken<TgvalidatordExportExchangesReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export exchange accounts (asynchronously)
     * This endpoint exports a list of exchange accounts
     * @param format Desired file format, can be csv or json. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exchangeServiceExportExchangesAsync(String format, final ApiCallback<TgvalidatordExportExchangesReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = exchangeServiceExportExchangesValidateBeforeCall(format, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordExportExchangesReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exchangeServiceGetExchange
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exchangeServiceGetExchangeCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/exchangeaccounts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exchangeServiceGetExchangeValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling exchangeServiceGetExchange(Async)");
        }

        return exchangeServiceGetExchangeCall(id, _callback);

    }

    /**
     * Get an exchange account
     * This endpoint returns an exchange account
     * @param id  (required)
     * @return TgvalidatordGetExchangeReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordGetExchangeReply exchangeServiceGetExchange(String id) throws ApiException {
        ApiResponse<TgvalidatordGetExchangeReply> localVarResp = exchangeServiceGetExchangeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get an exchange account
     * This endpoint returns an exchange account
     * @param id  (required)
     * @return ApiResponse&lt;TgvalidatordGetExchangeReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordGetExchangeReply> exchangeServiceGetExchangeWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = exchangeServiceGetExchangeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetExchangeReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an exchange account (asynchronously)
     * This endpoint returns an exchange account
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exchangeServiceGetExchangeAsync(String id, final ApiCallback<TgvalidatordGetExchangeReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = exchangeServiceGetExchangeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetExchangeReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exchangeServiceGetExchangeCounterparties
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exchangeServiceGetExchangeCounterpartiesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/exchanges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exchangeServiceGetExchangeCounterpartiesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return exchangeServiceGetExchangeCounterpartiesCall(_callback);

    }

    /**
     * List exchanges
     * This endpoint returns a list of all exchanges, their exposure and exposure limits.
     * @return TgvalidatordGetExchangeCounterpartiesReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordGetExchangeCounterpartiesReply exchangeServiceGetExchangeCounterparties() throws ApiException {
        ApiResponse<TgvalidatordGetExchangeCounterpartiesReply> localVarResp = exchangeServiceGetExchangeCounterpartiesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List exchanges
     * This endpoint returns a list of all exchanges, their exposure and exposure limits.
     * @return ApiResponse&lt;TgvalidatordGetExchangeCounterpartiesReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordGetExchangeCounterpartiesReply> exchangeServiceGetExchangeCounterpartiesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = exchangeServiceGetExchangeCounterpartiesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetExchangeCounterpartiesReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List exchanges (asynchronously)
     * This endpoint returns a list of all exchanges, their exposure and exposure limits.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exchangeServiceGetExchangeCounterpartiesAsync(final ApiCallback<TgvalidatordGetExchangeCounterpartiesReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = exchangeServiceGetExchangeCounterpartiesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetExchangeCounterpartiesReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exchangeServiceGetExchangeWithdrawalFee
     * @param id  (required)
     * @param toAddressId  (optional)
     * @param amount Amount in the smallest currency unit, based on the currency decimals. Example: 1500000000000000000 WEI (smallest ETH unit) corresponds to 1.5 ETH (ETH has 18 decimals places) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exchangeServiceGetExchangeWithdrawalFeeCall(String id, String toAddressId, String amount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/exchangeaccounts/{id}/withdrawalfee"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (toAddressId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toAddressId", toAddressId));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exchangeServiceGetExchangeWithdrawalFeeValidateBeforeCall(String id, String toAddressId, String amount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling exchangeServiceGetExchangeWithdrawalFee(Async)");
        }

        return exchangeServiceGetExchangeWithdrawalFeeCall(id, toAddressId, amount, _callback);

    }

    /**
     * Get the withdrawal fees
     * This endpoint returns the withdrawal fees of an exchange account. An empty response means that the exchange does not provide a live estimation of its fees
     * @param id  (required)
     * @param toAddressId  (optional)
     * @param amount Amount in the smallest currency unit, based on the currency decimals. Example: 1500000000000000000 WEI (smallest ETH unit) corresponds to 1.5 ETH (ETH has 18 decimals places) (optional)
     * @return TgvalidatordGetExchangeWithdrawalFeeReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordGetExchangeWithdrawalFeeReply exchangeServiceGetExchangeWithdrawalFee(String id, String toAddressId, String amount) throws ApiException {
        ApiResponse<TgvalidatordGetExchangeWithdrawalFeeReply> localVarResp = exchangeServiceGetExchangeWithdrawalFeeWithHttpInfo(id, toAddressId, amount);
        return localVarResp.getData();
    }

    /**
     * Get the withdrawal fees
     * This endpoint returns the withdrawal fees of an exchange account. An empty response means that the exchange does not provide a live estimation of its fees
     * @param id  (required)
     * @param toAddressId  (optional)
     * @param amount Amount in the smallest currency unit, based on the currency decimals. Example: 1500000000000000000 WEI (smallest ETH unit) corresponds to 1.5 ETH (ETH has 18 decimals places) (optional)
     * @return ApiResponse&lt;TgvalidatordGetExchangeWithdrawalFeeReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordGetExchangeWithdrawalFeeReply> exchangeServiceGetExchangeWithdrawalFeeWithHttpInfo(String id, String toAddressId, String amount) throws ApiException {
        okhttp3.Call localVarCall = exchangeServiceGetExchangeWithdrawalFeeValidateBeforeCall(id, toAddressId, amount, null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetExchangeWithdrawalFeeReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the withdrawal fees (asynchronously)
     * This endpoint returns the withdrawal fees of an exchange account. An empty response means that the exchange does not provide a live estimation of its fees
     * @param id  (required)
     * @param toAddressId  (optional)
     * @param amount Amount in the smallest currency unit, based on the currency decimals. Example: 1500000000000000000 WEI (smallest ETH unit) corresponds to 1.5 ETH (ETH has 18 decimals places) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exchangeServiceGetExchangeWithdrawalFeeAsync(String id, String toAddressId, String amount, final ApiCallback<TgvalidatordGetExchangeWithdrawalFeeReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = exchangeServiceGetExchangeWithdrawalFeeValidateBeforeCall(id, toAddressId, amount, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetExchangeWithdrawalFeeReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exchangeServiceGetExchanges
     * @param currencyID Filter on currency ID (optional)
     * @param includeBaseCurrencyValuation  (optional)
     * @param exchangeLabel  (optional)
     * @param sortOrder Set this parameter to ASC to get the id sorted in ASC order or DESC to get them in descending order. By default, the order is DESC. (optional)
     * @param cursorCurrentPage Base64-encoded string representing the current window of data (optional)
     * @param cursorPageRequest The page to request, w.r.t the current page. Can be one of &#x60;FIRST&#x60;, &#x60;PREVIOUS&#x60;, &#x60;NEXT&#x60;, &#x60;LAST&#x60; (optional)
     * @param cursorPageSize The size of the page requested. The handling service should impose a hard limit on this (optional)
     * @param status Returns only exchange accounts that have this status. Leave empty to select all statuses. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exchangeServiceGetExchangesCall(String currencyID, Boolean includeBaseCurrencyValuation, String exchangeLabel, String sortOrder, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/exchangeaccounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currencyID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencyID", currencyID));
        }

        if (includeBaseCurrencyValuation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeBaseCurrencyValuation", includeBaseCurrencyValuation));
        }

        if (exchangeLabel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exchangeLabel", exchangeLabel));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (cursorCurrentPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor.currentPage", cursorCurrentPage));
        }

        if (cursorPageRequest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor.pageRequest", cursorPageRequest));
        }

        if (cursorPageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor.pageSize", cursorPageSize));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exchangeServiceGetExchangesValidateBeforeCall(String currencyID, Boolean includeBaseCurrencyValuation, String exchangeLabel, String sortOrder, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize, String status, final ApiCallback _callback) throws ApiException {
        return exchangeServiceGetExchangesCall(currencyID, includeBaseCurrencyValuation, exchangeLabel, sortOrder, cursorCurrentPage, cursorPageRequest, cursorPageSize, status, _callback);

    }

    /**
     * List exchange accounts
     * This endpoint returns a list of exchange accounts
     * @param currencyID Filter on currency ID (optional)
     * @param includeBaseCurrencyValuation  (optional)
     * @param exchangeLabel  (optional)
     * @param sortOrder Set this parameter to ASC to get the id sorted in ASC order or DESC to get them in descending order. By default, the order is DESC. (optional)
     * @param cursorCurrentPage Base64-encoded string representing the current window of data (optional)
     * @param cursorPageRequest The page to request, w.r.t the current page. Can be one of &#x60;FIRST&#x60;, &#x60;PREVIOUS&#x60;, &#x60;NEXT&#x60;, &#x60;LAST&#x60; (optional)
     * @param cursorPageSize The size of the page requested. The handling service should impose a hard limit on this (optional)
     * @param status Returns only exchange accounts that have this status. Leave empty to select all statuses. (optional)
     * @return TgvalidatordGetExchangesReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordGetExchangesReply exchangeServiceGetExchanges(String currencyID, Boolean includeBaseCurrencyValuation, String exchangeLabel, String sortOrder, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize, String status) throws ApiException {
        ApiResponse<TgvalidatordGetExchangesReply> localVarResp = exchangeServiceGetExchangesWithHttpInfo(currencyID, includeBaseCurrencyValuation, exchangeLabel, sortOrder, cursorCurrentPage, cursorPageRequest, cursorPageSize, status);
        return localVarResp.getData();
    }

    /**
     * List exchange accounts
     * This endpoint returns a list of exchange accounts
     * @param currencyID Filter on currency ID (optional)
     * @param includeBaseCurrencyValuation  (optional)
     * @param exchangeLabel  (optional)
     * @param sortOrder Set this parameter to ASC to get the id sorted in ASC order or DESC to get them in descending order. By default, the order is DESC. (optional)
     * @param cursorCurrentPage Base64-encoded string representing the current window of data (optional)
     * @param cursorPageRequest The page to request, w.r.t the current page. Can be one of &#x60;FIRST&#x60;, &#x60;PREVIOUS&#x60;, &#x60;NEXT&#x60;, &#x60;LAST&#x60; (optional)
     * @param cursorPageSize The size of the page requested. The handling service should impose a hard limit on this (optional)
     * @param status Returns only exchange accounts that have this status. Leave empty to select all statuses. (optional)
     * @return ApiResponse&lt;TgvalidatordGetExchangesReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordGetExchangesReply> exchangeServiceGetExchangesWithHttpInfo(String currencyID, Boolean includeBaseCurrencyValuation, String exchangeLabel, String sortOrder, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize, String status) throws ApiException {
        okhttp3.Call localVarCall = exchangeServiceGetExchangesValidateBeforeCall(currencyID, includeBaseCurrencyValuation, exchangeLabel, sortOrder, cursorCurrentPage, cursorPageRequest, cursorPageSize, status, null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetExchangesReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List exchange accounts (asynchronously)
     * This endpoint returns a list of exchange accounts
     * @param currencyID Filter on currency ID (optional)
     * @param includeBaseCurrencyValuation  (optional)
     * @param exchangeLabel  (optional)
     * @param sortOrder Set this parameter to ASC to get the id sorted in ASC order or DESC to get them in descending order. By default, the order is DESC. (optional)
     * @param cursorCurrentPage Base64-encoded string representing the current window of data (optional)
     * @param cursorPageRequest The page to request, w.r.t the current page. Can be one of &#x60;FIRST&#x60;, &#x60;PREVIOUS&#x60;, &#x60;NEXT&#x60;, &#x60;LAST&#x60; (optional)
     * @param cursorPageSize The size of the page requested. The handling service should impose a hard limit on this (optional)
     * @param status Returns only exchange accounts that have this status. Leave empty to select all statuses. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exchangeServiceGetExchangesAsync(String currencyID, Boolean includeBaseCurrencyValuation, String exchangeLabel, String sortOrder, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize, String status, final ApiCallback<TgvalidatordGetExchangesReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = exchangeServiceGetExchangesValidateBeforeCall(currencyID, includeBaseCurrencyValuation, exchangeLabel, sortOrder, cursorCurrentPage, cursorPageRequest, cursorPageSize, status, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetExchangesReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
