/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * Creates an XLM Path Payment Strict Receive Request. Sending asset is the asset associated to the address identified by &#x60;fromAddressId&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_MAX_SENDER_AMOUNT = "maxSenderAmount";
  @SerializedName(SERIALIZED_NAME_MAX_SENDER_AMOUNT)
  private String maxSenderAmount;

  public static final String SERIALIZED_NAME_FEE_LIMIT = "feeLimit";
  @SerializedName(SERIALIZED_NAME_FEE_LIMIT)
  private String feeLimit;

  public static final String SERIALIZED_NAME_FROM_ADDRESS_ID = "fromAddressId";
  @SerializedName(SERIALIZED_NAME_FROM_ADDRESS_ID)
  private String fromAddressId;

  public static final String SERIALIZED_NAME_TO_ADDRESS_ID = "toAddressId";
  @SerializedName(SERIALIZED_NAME_TO_ADDRESS_ID)
  private String toAddressId;

  public static final String SERIALIZED_NAME_TO_WHITELISTED_ADDRESS_ID = "toWhitelistedAddressId";
  @SerializedName(SERIALIZED_NAME_TO_WHITELISTED_ADDRESS_ID)
  private String toWhitelistedAddressId;

  public static final String SERIALIZED_NAME_DESTINATION_ASSET_I_D = "destinationAssetID";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ASSET_I_D)
  private String destinationAssetID;

  public static final String SERIALIZED_NAME_DESTINATION_ASSET_ISSUER = "destinationAssetIssuer";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ASSET_ISSUER)
  private String destinationAssetIssuer;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_EXTERNAL_REQUEST_ID = "externalRequestId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REQUEST_ID)
  private String externalRequestId;

  public static final String SERIALIZED_NAME_DESTINATION_ADDRESS_MEMO = "destinationAddressMemo";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ADDRESS_MEMO)
  private String destinationAddressMemo;

  public TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest() {
  }

  public TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest amount(String amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Amount to destination asset be received, in the smallest currency unit, based on the currency decimals. For example, 1 corresponds to 1 &#39;stroop&#39; (one ten-millionth of XLM), and 1 XLM corresponds to 10000000 (7 decimals)
   * @return amount
   */
  @javax.annotation.Nonnull
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }


  public TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest maxSenderAmount(String maxSenderAmount) {
    this.maxSenderAmount = maxSenderAmount;
    return this;
  }

  /**
   * Maximum Amount that the sender should be able to send. Amount in the smallest currency unit, based on the currency decimals. For example, 1 corresponds to 1 &#39;stroop&#39; (one ten-millionth of XLM), and 1 XLM corresponds to 10000000 (7 decimals)
   * @return maxSenderAmount
   */
  @javax.annotation.Nullable
  public String getMaxSenderAmount() {
    return maxSenderAmount;
  }

  public void setMaxSenderAmount(String maxSenderAmount) {
    this.maxSenderAmount = maxSenderAmount;
  }


  public TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest feeLimit(String feeLimit) {
    this.feeLimit = feeLimit;
    return this;
  }

  /**
   * Get feeLimit
   * @return feeLimit
   */
  @javax.annotation.Nullable
  public String getFeeLimit() {
    return feeLimit;
  }

  public void setFeeLimit(String feeLimit) {
    this.feeLimit = feeLimit;
  }


  public TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest fromAddressId(String fromAddressId) {
    this.fromAddressId = fromAddressId;
    return this;
  }

  /**
   * Get fromAddressId
   * @return fromAddressId
   */
  @javax.annotation.Nonnull
  public String getFromAddressId() {
    return fromAddressId;
  }

  public void setFromAddressId(String fromAddressId) {
    this.fromAddressId = fromAddressId;
  }


  public TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest toAddressId(String toAddressId) {
    this.toAddressId = toAddressId;
    return this;
  }

  /**
   * A destination should be specified. Either toAddressId or toWhitelistedAddressId.
   * @return toAddressId
   */
  @javax.annotation.Nullable
  public String getToAddressId() {
    return toAddressId;
  }

  public void setToAddressId(String toAddressId) {
    this.toAddressId = toAddressId;
  }


  public TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest toWhitelistedAddressId(String toWhitelistedAddressId) {
    this.toWhitelistedAddressId = toWhitelistedAddressId;
    return this;
  }

  /**
   * A destination should be specified. Either toAddressId or toWhitelistedAddressId.
   * @return toWhitelistedAddressId
   */
  @javax.annotation.Nullable
  public String getToWhitelistedAddressId() {
    return toWhitelistedAddressId;
  }

  public void setToWhitelistedAddressId(String toWhitelistedAddressId) {
    this.toWhitelistedAddressId = toWhitelistedAddressId;
  }


  public TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest destinationAssetID(String destinationAssetID) {
    this.destinationAssetID = destinationAssetID;
    return this;
  }

  /**
   * Specify asset to be received by destination. Can only be set with toWhitelistedAddressId. Leave empty for XLM native
   * @return destinationAssetID
   */
  @javax.annotation.Nullable
  public String getDestinationAssetID() {
    return destinationAssetID;
  }

  public void setDestinationAssetID(String destinationAssetID) {
    this.destinationAssetID = destinationAssetID;
  }


  public TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest destinationAssetIssuer(String destinationAssetIssuer) {
    this.destinationAssetIssuer = destinationAssetIssuer;
    return this;
  }

  /**
   * Specify asset to be received by destination. Can only be set with toWhitelistedAddressId. Leave Empty for XLM native
   * @return destinationAssetIssuer
   */
  @javax.annotation.Nullable
  public String getDestinationAssetIssuer() {
    return destinationAssetIssuer;
  }

  public void setDestinationAssetIssuer(String destinationAssetIssuer) {
    this.destinationAssetIssuer = destinationAssetIssuer;
  }


  public TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest externalRequestId(String externalRequestId) {
    this.externalRequestId = externalRequestId;
    return this;
  }

  /**
   * Identifier for the request in the user&#39;s system. This must be unique. Attempting to create a request with an existing externalRequestId will do nothing and return the originally created request
   * @return externalRequestId
   */
  @javax.annotation.Nullable
  public String getExternalRequestId() {
    return externalRequestId;
  }

  public void setExternalRequestId(String externalRequestId) {
    this.externalRequestId = externalRequestId;
  }


  public TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest destinationAddressMemo(String destinationAddressMemo) {
    this.destinationAddressMemo = destinationAddressMemo;
    return this;
  }

  /**
   * A memo can be specified if the destination is a whitelisted address on a blockchain supporting memos.
   * @return destinationAddressMemo
   */
  @javax.annotation.Nullable
  public String getDestinationAddressMemo() {
    return destinationAddressMemo;
  }

  public void setDestinationAddressMemo(String destinationAddressMemo) {
    this.destinationAddressMemo = destinationAddressMemo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest tgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest = (TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest) o;
    return Objects.equals(this.amount, tgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest.amount) &&
        Objects.equals(this.maxSenderAmount, tgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest.maxSenderAmount) &&
        Objects.equals(this.feeLimit, tgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest.feeLimit) &&
        Objects.equals(this.fromAddressId, tgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest.fromAddressId) &&
        Objects.equals(this.toAddressId, tgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest.toAddressId) &&
        Objects.equals(this.toWhitelistedAddressId, tgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest.toWhitelistedAddressId) &&
        Objects.equals(this.destinationAssetID, tgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest.destinationAssetID) &&
        Objects.equals(this.destinationAssetIssuer, tgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest.destinationAssetIssuer) &&
        Objects.equals(this.comment, tgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest.comment) &&
        Objects.equals(this.externalRequestId, tgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest.externalRequestId) &&
        Objects.equals(this.destinationAddressMemo, tgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest.destinationAddressMemo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, maxSenderAmount, feeLimit, fromAddressId, toAddressId, toWhitelistedAddressId, destinationAssetID, destinationAssetIssuer, comment, externalRequestId, destinationAddressMemo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    maxSenderAmount: ").append(toIndentedString(maxSenderAmount)).append("\n");
    sb.append("    feeLimit: ").append(toIndentedString(feeLimit)).append("\n");
    sb.append("    fromAddressId: ").append(toIndentedString(fromAddressId)).append("\n");
    sb.append("    toAddressId: ").append(toIndentedString(toAddressId)).append("\n");
    sb.append("    toWhitelistedAddressId: ").append(toIndentedString(toWhitelistedAddressId)).append("\n");
    sb.append("    destinationAssetID: ").append(toIndentedString(destinationAssetID)).append("\n");
    sb.append("    destinationAssetIssuer: ").append(toIndentedString(destinationAssetIssuer)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    externalRequestId: ").append(toIndentedString(externalRequestId)).append("\n");
    sb.append("    destinationAddressMemo: ").append(toIndentedString(destinationAddressMemo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("maxSenderAmount");
    openapiFields.add("feeLimit");
    openapiFields.add("fromAddressId");
    openapiFields.add("toAddressId");
    openapiFields.add("toWhitelistedAddressId");
    openapiFields.add("destinationAssetID");
    openapiFields.add("destinationAssetIssuer");
    openapiFields.add("comment");
    openapiFields.add("externalRequestId");
    openapiFields.add("destinationAddressMemo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("fromAddressId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest is not found in the empty JSON string", TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("maxSenderAmount") != null && !jsonObj.get("maxSenderAmount").isJsonNull()) && !jsonObj.get("maxSenderAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxSenderAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxSenderAmount").toString()));
      }
      if ((jsonObj.get("feeLimit") != null && !jsonObj.get("feeLimit").isJsonNull()) && !jsonObj.get("feeLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feeLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feeLimit").toString()));
      }
      if (!jsonObj.get("fromAddressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromAddressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromAddressId").toString()));
      }
      if ((jsonObj.get("toAddressId") != null && !jsonObj.get("toAddressId").isJsonNull()) && !jsonObj.get("toAddressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toAddressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toAddressId").toString()));
      }
      if ((jsonObj.get("toWhitelistedAddressId") != null && !jsonObj.get("toWhitelistedAddressId").isJsonNull()) && !jsonObj.get("toWhitelistedAddressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toWhitelistedAddressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toWhitelistedAddressId").toString()));
      }
      if ((jsonObj.get("destinationAssetID") != null && !jsonObj.get("destinationAssetID").isJsonNull()) && !jsonObj.get("destinationAssetID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationAssetID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationAssetID").toString()));
      }
      if ((jsonObj.get("destinationAssetIssuer") != null && !jsonObj.get("destinationAssetIssuer").isJsonNull()) && !jsonObj.get("destinationAssetIssuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationAssetIssuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationAssetIssuer").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("externalRequestId") != null && !jsonObj.get("externalRequestId").isJsonNull()) && !jsonObj.get("externalRequestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalRequestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalRequestId").toString()));
      }
      if ((jsonObj.get("destinationAddressMemo") != null && !jsonObj.get("destinationAddressMemo").isJsonNull()) && !jsonObj.get("destinationAddressMemo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationAddressMemo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationAddressMemo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest>() {
           @Override
           public void write(JsonWriter out, TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest
   */
  public static TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest.class);
  }

  /**
   * Convert an instance of TgvalidatordCreateOutgoingXLMPathPaymentStrictReceiveRequestRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

