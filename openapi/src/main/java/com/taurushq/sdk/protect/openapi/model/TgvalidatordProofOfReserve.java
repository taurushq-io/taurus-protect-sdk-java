/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.taurushq.sdk.protect.openapi.model.ProofOfReserveReserveType;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordProofOfReserveCipher;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordProofOfReserveCurve;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordProofOfReserve
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordProofOfReserve {
  public static final String SERIALIZED_NAME_CURVE = "curve";
  @SerializedName(SERIALIZED_NAME_CURVE)
  private TgvalidatordProofOfReserveCurve curve;

  public static final String SERIALIZED_NAME_CIPHER = "cipher";
  @SerializedName(SERIALIZED_NAME_CIPHER)
  private TgvalidatordProofOfReserveCipher cipher;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "publicKey";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private byte[] publicKey;

  public static final String SERIALIZED_NAME_CHALLENGE = "challenge";
  @SerializedName(SERIALIZED_NAME_CHALLENGE)
  private String challenge;

  public static final String SERIALIZED_NAME_CHALLENGE_RESPONSE = "challengeResponse";
  @SerializedName(SERIALIZED_NAME_CHALLENGE_RESPONSE)
  private byte[] challengeResponse;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ProofOfReserveReserveType type;

  public static final String SERIALIZED_NAME_STAKE_PUBLIC_KEY = "stakePublicKey";
  @SerializedName(SERIALIZED_NAME_STAKE_PUBLIC_KEY)
  private byte[] stakePublicKey;

  public static final String SERIALIZED_NAME_STAKE_CHALLENGE_RESPONSE = "stakeChallengeResponse";
  @SerializedName(SERIALIZED_NAME_STAKE_CHALLENGE_RESPONSE)
  private byte[] stakeChallengeResponse;

  public TgvalidatordProofOfReserve() {
  }

  public TgvalidatordProofOfReserve curve(TgvalidatordProofOfReserveCurve curve) {
    this.curve = curve;
    return this;
  }

  /**
   * Get curve
   * @return curve
   */
  @javax.annotation.Nullable
  public TgvalidatordProofOfReserveCurve getCurve() {
    return curve;
  }

  public void setCurve(TgvalidatordProofOfReserveCurve curve) {
    this.curve = curve;
  }


  public TgvalidatordProofOfReserve cipher(TgvalidatordProofOfReserveCipher cipher) {
    this.cipher = cipher;
    return this;
  }

  /**
   * Get cipher
   * @return cipher
   */
  @javax.annotation.Nullable
  public TgvalidatordProofOfReserveCipher getCipher() {
    return cipher;
  }

  public void setCipher(TgvalidatordProofOfReserveCipher cipher) {
    this.cipher = cipher;
  }


  public TgvalidatordProofOfReserve path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public TgvalidatordProofOfReserve address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public TgvalidatordProofOfReserve publicKey(byte[] publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * Get publicKey
   * @return publicKey
   */
  @javax.annotation.Nullable
  public byte[] getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(byte[] publicKey) {
    this.publicKey = publicKey;
  }


  public TgvalidatordProofOfReserve challenge(String challenge) {
    this.challenge = challenge;
    return this;
  }

  /**
   * Get challenge
   * @return challenge
   */
  @javax.annotation.Nullable
  public String getChallenge() {
    return challenge;
  }

  public void setChallenge(String challenge) {
    this.challenge = challenge;
  }


  public TgvalidatordProofOfReserve challengeResponse(byte[] challengeResponse) {
    this.challengeResponse = challengeResponse;
    return this;
  }

  /**
   * Get challengeResponse
   * @return challengeResponse
   */
  @javax.annotation.Nullable
  public byte[] getChallengeResponse() {
    return challengeResponse;
  }

  public void setChallengeResponse(byte[] challengeResponse) {
    this.challengeResponse = challengeResponse;
  }


  public TgvalidatordProofOfReserve type(ProofOfReserveReserveType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ProofOfReserveReserveType getType() {
    return type;
  }

  public void setType(ProofOfReserveReserveType type) {
    this.type = type;
  }


  public TgvalidatordProofOfReserve stakePublicKey(byte[] stakePublicKey) {
    this.stakePublicKey = stakePublicKey;
    return this;
  }

  /**
   * Get stakePublicKey
   * @return stakePublicKey
   */
  @javax.annotation.Nullable
  public byte[] getStakePublicKey() {
    return stakePublicKey;
  }

  public void setStakePublicKey(byte[] stakePublicKey) {
    this.stakePublicKey = stakePublicKey;
  }


  public TgvalidatordProofOfReserve stakeChallengeResponse(byte[] stakeChallengeResponse) {
    this.stakeChallengeResponse = stakeChallengeResponse;
    return this;
  }

  /**
   * Get stakeChallengeResponse
   * @return stakeChallengeResponse
   */
  @javax.annotation.Nullable
  public byte[] getStakeChallengeResponse() {
    return stakeChallengeResponse;
  }

  public void setStakeChallengeResponse(byte[] stakeChallengeResponse) {
    this.stakeChallengeResponse = stakeChallengeResponse;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordProofOfReserve tgvalidatordProofOfReserve = (TgvalidatordProofOfReserve) o;
    return Objects.equals(this.curve, tgvalidatordProofOfReserve.curve) &&
        Objects.equals(this.cipher, tgvalidatordProofOfReserve.cipher) &&
        Objects.equals(this.path, tgvalidatordProofOfReserve.path) &&
        Objects.equals(this.address, tgvalidatordProofOfReserve.address) &&
        Arrays.equals(this.publicKey, tgvalidatordProofOfReserve.publicKey) &&
        Objects.equals(this.challenge, tgvalidatordProofOfReserve.challenge) &&
        Arrays.equals(this.challengeResponse, tgvalidatordProofOfReserve.challengeResponse) &&
        Objects.equals(this.type, tgvalidatordProofOfReserve.type) &&
        Arrays.equals(this.stakePublicKey, tgvalidatordProofOfReserve.stakePublicKey) &&
        Arrays.equals(this.stakeChallengeResponse, tgvalidatordProofOfReserve.stakeChallengeResponse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(curve, cipher, path, address, Arrays.hashCode(publicKey), challenge, Arrays.hashCode(challengeResponse), type, Arrays.hashCode(stakePublicKey), Arrays.hashCode(stakeChallengeResponse));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordProofOfReserve {\n");
    sb.append("    curve: ").append(toIndentedString(curve)).append("\n");
    sb.append("    cipher: ").append(toIndentedString(cipher)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    challenge: ").append(toIndentedString(challenge)).append("\n");
    sb.append("    challengeResponse: ").append(toIndentedString(challengeResponse)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    stakePublicKey: ").append(toIndentedString(stakePublicKey)).append("\n");
    sb.append("    stakeChallengeResponse: ").append(toIndentedString(stakeChallengeResponse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("curve");
    openapiFields.add("cipher");
    openapiFields.add("path");
    openapiFields.add("address");
    openapiFields.add("publicKey");
    openapiFields.add("challenge");
    openapiFields.add("challengeResponse");
    openapiFields.add("type");
    openapiFields.add("stakePublicKey");
    openapiFields.add("stakeChallengeResponse");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordProofOfReserve
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordProofOfReserve.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordProofOfReserve is not found in the empty JSON string", TgvalidatordProofOfReserve.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordProofOfReserve.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordProofOfReserve` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `curve`
      if (jsonObj.get("curve") != null && !jsonObj.get("curve").isJsonNull()) {
        TgvalidatordProofOfReserveCurve.validateJsonElement(jsonObj.get("curve"));
      }
      // validate the optional field `cipher`
      if (jsonObj.get("cipher") != null && !jsonObj.get("cipher").isJsonNull()) {
        TgvalidatordProofOfReserveCipher.validateJsonElement(jsonObj.get("cipher"));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("challenge") != null && !jsonObj.get("challenge").isJsonNull()) && !jsonObj.get("challenge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `challenge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("challenge").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        ProofOfReserveReserveType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordProofOfReserve.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordProofOfReserve' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordProofOfReserve> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordProofOfReserve.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordProofOfReserve>() {
           @Override
           public void write(JsonWriter out, TgvalidatordProofOfReserve value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordProofOfReserve read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordProofOfReserve given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordProofOfReserve
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordProofOfReserve
   */
  public static TgvalidatordProofOfReserve fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordProofOfReserve.class);
  }

  /**
   * Convert an instance of TgvalidatordProofOfReserve to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

