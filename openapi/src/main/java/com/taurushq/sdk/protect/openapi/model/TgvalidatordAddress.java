/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordAddressAttribute;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordBalance;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordCurrency;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordScore;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordWalletInfo;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordAddress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordAddress {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_WALLET_ID = "walletId";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  private String walletId;

  public static final String SERIALIZED_NAME_SEED = "seed";
  @SerializedName(SERIALIZED_NAME_SEED)
  private String seed;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_ADDRESS_PATH = "addressPath";
  @SerializedName(SERIALIZED_NAME_ADDRESS_PATH)
  private String addressPath;

  public static final String SERIALIZED_NAME_ADDRESS_INDEX = "addressIndex";
  @SerializedName(SERIALIZED_NAME_ADDRESS_INDEX)
  private String addressIndex;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_ALTERNATE_ADDRESS = "alternateAddress";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_ADDRESS)
  private String alternateAddress;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private TgvalidatordBalance balance;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_SCORES = "scores";
  @SerializedName(SERIALIZED_NAME_SCORES)
  private List<TgvalidatordScore> scores = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<TgvalidatordAddressAttribute> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKED_WHITELISTED_ADDRESS_IDS = "linkedWhitelistedAddressIds";
  @SerializedName(SERIALIZED_NAME_LINKED_WHITELISTED_ADDRESS_IDS)
  private List<String> linkedWhitelistedAddressIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_UPDATE_DATE = "updateDate";
  @SerializedName(SERIALIZED_NAME_UPDATE_DATE)
  private OffsetDateTime updateDate;

  public static final String SERIALIZED_NAME_WALLET_INFO = "walletInfo";
  @SerializedName(SERIALIZED_NAME_WALLET_INFO)
  private TgvalidatordWalletInfo walletInfo;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_CURRENCY_INFO = "currencyInfo";
  @SerializedName(SERIALIZED_NAME_CURRENCY_INFO)
  private TgvalidatordCurrency currencyInfo;

  public static final String SERIALIZED_NAME_CAN_USE_ALL_FUNDS = "canUseAllFunds";
  @SerializedName(SERIALIZED_NAME_CAN_USE_ALL_FUNDS)
  private Boolean canUseAllFunds;

  public TgvalidatordAddress() {
  }

  public TgvalidatordAddress id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TgvalidatordAddress walletId(String walletId) {
    this.walletId = walletId;
    return this;
  }

  /**
   * Get walletId
   * @return walletId
   */
  @javax.annotation.Nullable
  public String getWalletId() {
    return walletId;
  }

  public void setWalletId(String walletId) {
    this.walletId = walletId;
  }


  public TgvalidatordAddress seed(String seed) {
    this.seed = seed;
    return this;
  }

  /**
   * Get seed
   * @return seed
   */
  @javax.annotation.Nullable
  public String getSeed() {
    return seed;
  }

  public void setSeed(String seed) {
    this.seed = seed;
  }


  public TgvalidatordAddress currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public TgvalidatordAddress addressPath(String addressPath) {
    this.addressPath = addressPath;
    return this;
  }

  /**
   * Get addressPath
   * @return addressPath
   */
  @javax.annotation.Nullable
  public String getAddressPath() {
    return addressPath;
  }

  public void setAddressPath(String addressPath) {
    this.addressPath = addressPath;
  }


  public TgvalidatordAddress addressIndex(String addressIndex) {
    this.addressIndex = addressIndex;
    return this;
  }

  /**
   * Get addressIndex
   * @return addressIndex
   */
  @javax.annotation.Nullable
  public String getAddressIndex() {
    return addressIndex;
  }

  public void setAddressIndex(String addressIndex) {
    this.addressIndex = addressIndex;
  }


  public TgvalidatordAddress address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public TgvalidatordAddress alternateAddress(String alternateAddress) {
    this.alternateAddress = alternateAddress;
    return this;
  }

  /**
   * Get alternateAddress
   * @return alternateAddress
   */
  @javax.annotation.Nullable
  public String getAlternateAddress() {
    return alternateAddress;
  }

  public void setAlternateAddress(String alternateAddress) {
    this.alternateAddress = alternateAddress;
  }


  public TgvalidatordAddress comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public TgvalidatordAddress label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public TgvalidatordAddress customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Get customerId
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public TgvalidatordAddress nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * Get nonce
   * @return nonce
   */
  @javax.annotation.Nullable
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public TgvalidatordAddress balance(TgvalidatordBalance balance) {
    this.balance = balance;
    return this;
  }

  /**
   * Get balance
   * @return balance
   */
  @javax.annotation.Nullable
  public TgvalidatordBalance getBalance() {
    return balance;
  }

  public void setBalance(TgvalidatordBalance balance) {
    this.balance = balance;
  }


  public TgvalidatordAddress signature(String signature) {
    this.signature = signature;
    return this;
  }

  /**
   * Get signature
   * @return signature
   */
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }


  public TgvalidatordAddress scores(List<TgvalidatordScore> scores) {
    this.scores = scores;
    return this;
  }

  public TgvalidatordAddress addScoresItem(TgvalidatordScore scoresItem) {
    if (this.scores == null) {
      this.scores = new ArrayList<>();
    }
    this.scores.add(scoresItem);
    return this;
  }

  /**
   * Get scores
   * @return scores
   */
  @javax.annotation.Nullable
  public List<TgvalidatordScore> getScores() {
    return scores;
  }

  public void setScores(List<TgvalidatordScore> scores) {
    this.scores = scores;
  }


  public TgvalidatordAddress attributes(List<TgvalidatordAddressAttribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public TgvalidatordAddress addAttributesItem(TgvalidatordAddressAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public List<TgvalidatordAddressAttribute> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<TgvalidatordAddressAttribute> attributes) {
    this.attributes = attributes;
  }


  public TgvalidatordAddress linkedWhitelistedAddressIds(List<String> linkedWhitelistedAddressIds) {
    this.linkedWhitelistedAddressIds = linkedWhitelistedAddressIds;
    return this;
  }

  public TgvalidatordAddress addLinkedWhitelistedAddressIdsItem(String linkedWhitelistedAddressIdsItem) {
    if (this.linkedWhitelistedAddressIds == null) {
      this.linkedWhitelistedAddressIds = new ArrayList<>();
    }
    this.linkedWhitelistedAddressIds.add(linkedWhitelistedAddressIdsItem);
    return this;
  }

  /**
   * Get linkedWhitelistedAddressIds
   * @return linkedWhitelistedAddressIds
   */
  @javax.annotation.Nullable
  public List<String> getLinkedWhitelistedAddressIds() {
    return linkedWhitelistedAddressIds;
  }

  public void setLinkedWhitelistedAddressIds(List<String> linkedWhitelistedAddressIds) {
    this.linkedWhitelistedAddressIds = linkedWhitelistedAddressIds;
  }


  public TgvalidatordAddress creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public TgvalidatordAddress updateDate(OffsetDateTime updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  /**
   * Get updateDate
   * @return updateDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdateDate() {
    return updateDate;
  }

  public void setUpdateDate(OffsetDateTime updateDate) {
    this.updateDate = updateDate;
  }


  public TgvalidatordAddress walletInfo(TgvalidatordWalletInfo walletInfo) {
    this.walletInfo = walletInfo;
    return this;
  }

  /**
   * Get walletInfo
   * @return walletInfo
   */
  @javax.annotation.Nullable
  public TgvalidatordWalletInfo getWalletInfo() {
    return walletInfo;
  }

  public void setWalletInfo(TgvalidatordWalletInfo walletInfo) {
    this.walletInfo = walletInfo;
  }


  public TgvalidatordAddress disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Get disabled
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public TgvalidatordAddress currencyInfo(TgvalidatordCurrency currencyInfo) {
    this.currencyInfo = currencyInfo;
    return this;
  }

  /**
   * Get currencyInfo
   * @return currencyInfo
   */
  @javax.annotation.Nullable
  public TgvalidatordCurrency getCurrencyInfo() {
    return currencyInfo;
  }

  public void setCurrencyInfo(TgvalidatordCurrency currencyInfo) {
    this.currencyInfo = currencyInfo;
  }


  public TgvalidatordAddress canUseAllFunds(Boolean canUseAllFunds) {
    this.canUseAllFunds = canUseAllFunds;
    return this;
  }

  /**
   * Get canUseAllFunds
   * @return canUseAllFunds
   */
  @javax.annotation.Nullable
  public Boolean getCanUseAllFunds() {
    return canUseAllFunds;
  }

  public void setCanUseAllFunds(Boolean canUseAllFunds) {
    this.canUseAllFunds = canUseAllFunds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordAddress tgvalidatordAddress = (TgvalidatordAddress) o;
    return Objects.equals(this.id, tgvalidatordAddress.id) &&
        Objects.equals(this.walletId, tgvalidatordAddress.walletId) &&
        Objects.equals(this.seed, tgvalidatordAddress.seed) &&
        Objects.equals(this.currency, tgvalidatordAddress.currency) &&
        Objects.equals(this.addressPath, tgvalidatordAddress.addressPath) &&
        Objects.equals(this.addressIndex, tgvalidatordAddress.addressIndex) &&
        Objects.equals(this.address, tgvalidatordAddress.address) &&
        Objects.equals(this.alternateAddress, tgvalidatordAddress.alternateAddress) &&
        Objects.equals(this.comment, tgvalidatordAddress.comment) &&
        Objects.equals(this.label, tgvalidatordAddress.label) &&
        Objects.equals(this.customerId, tgvalidatordAddress.customerId) &&
        Objects.equals(this.nonce, tgvalidatordAddress.nonce) &&
        Objects.equals(this.balance, tgvalidatordAddress.balance) &&
        Objects.equals(this.signature, tgvalidatordAddress.signature) &&
        Objects.equals(this.scores, tgvalidatordAddress.scores) &&
        Objects.equals(this.attributes, tgvalidatordAddress.attributes) &&
        Objects.equals(this.linkedWhitelistedAddressIds, tgvalidatordAddress.linkedWhitelistedAddressIds) &&
        Objects.equals(this.creationDate, tgvalidatordAddress.creationDate) &&
        Objects.equals(this.updateDate, tgvalidatordAddress.updateDate) &&
        Objects.equals(this.walletInfo, tgvalidatordAddress.walletInfo) &&
        Objects.equals(this.disabled, tgvalidatordAddress.disabled) &&
        Objects.equals(this.currencyInfo, tgvalidatordAddress.currencyInfo) &&
        Objects.equals(this.canUseAllFunds, tgvalidatordAddress.canUseAllFunds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, walletId, seed, currency, addressPath, addressIndex, address, alternateAddress, comment, label, customerId, nonce, balance, signature, scores, attributes, linkedWhitelistedAddressIds, creationDate, updateDate, walletInfo, disabled, currencyInfo, canUseAllFunds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordAddress {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    seed: ").append(toIndentedString(seed)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    addressPath: ").append(toIndentedString(addressPath)).append("\n");
    sb.append("    addressIndex: ").append(toIndentedString(addressIndex)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    alternateAddress: ").append(toIndentedString(alternateAddress)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    scores: ").append(toIndentedString(scores)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    linkedWhitelistedAddressIds: ").append(toIndentedString(linkedWhitelistedAddressIds)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    updateDate: ").append(toIndentedString(updateDate)).append("\n");
    sb.append("    walletInfo: ").append(toIndentedString(walletInfo)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    currencyInfo: ").append(toIndentedString(currencyInfo)).append("\n");
    sb.append("    canUseAllFunds: ").append(toIndentedString(canUseAllFunds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("walletId");
    openapiFields.add("seed");
    openapiFields.add("currency");
    openapiFields.add("addressPath");
    openapiFields.add("addressIndex");
    openapiFields.add("address");
    openapiFields.add("alternateAddress");
    openapiFields.add("comment");
    openapiFields.add("label");
    openapiFields.add("customerId");
    openapiFields.add("nonce");
    openapiFields.add("balance");
    openapiFields.add("signature");
    openapiFields.add("scores");
    openapiFields.add("attributes");
    openapiFields.add("linkedWhitelistedAddressIds");
    openapiFields.add("creationDate");
    openapiFields.add("updateDate");
    openapiFields.add("walletInfo");
    openapiFields.add("disabled");
    openapiFields.add("currencyInfo");
    openapiFields.add("canUseAllFunds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordAddress is not found in the empty JSON string", TgvalidatordAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("walletId") != null && !jsonObj.get("walletId").isJsonNull()) && !jsonObj.get("walletId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletId").toString()));
      }
      if ((jsonObj.get("seed") != null && !jsonObj.get("seed").isJsonNull()) && !jsonObj.get("seed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seed").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("addressPath") != null && !jsonObj.get("addressPath").isJsonNull()) && !jsonObj.get("addressPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressPath").toString()));
      }
      if ((jsonObj.get("addressIndex") != null && !jsonObj.get("addressIndex").isJsonNull()) && !jsonObj.get("addressIndex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressIndex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressIndex").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("alternateAddress") != null && !jsonObj.get("alternateAddress").isJsonNull()) && !jsonObj.get("alternateAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternateAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alternateAddress").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("nonce") != null && !jsonObj.get("nonce").isJsonNull()) && !jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
      // validate the optional field `balance`
      if (jsonObj.get("balance") != null && !jsonObj.get("balance").isJsonNull()) {
        TgvalidatordBalance.validateJsonElement(jsonObj.get("balance"));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if (jsonObj.get("scores") != null && !jsonObj.get("scores").isJsonNull()) {
        JsonArray jsonArrayscores = jsonObj.getAsJsonArray("scores");
        if (jsonArrayscores != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scores").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scores` to be an array in the JSON string but got `%s`", jsonObj.get("scores").toString()));
          }

          // validate the optional field `scores` (array)
          for (int i = 0; i < jsonArrayscores.size(); i++) {
            TgvalidatordScore.validateJsonElement(jsonArrayscores.get(i));
          };
        }
      }
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
          }

          // validate the optional field `attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            TgvalidatordAddressAttribute.validateJsonElement(jsonArrayattributes.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("linkedWhitelistedAddressIds") != null && !jsonObj.get("linkedWhitelistedAddressIds").isJsonNull() && !jsonObj.get("linkedWhitelistedAddressIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedWhitelistedAddressIds` to be an array in the JSON string but got `%s`", jsonObj.get("linkedWhitelistedAddressIds").toString()));
      }
      // validate the optional field `walletInfo`
      if (jsonObj.get("walletInfo") != null && !jsonObj.get("walletInfo").isJsonNull()) {
        TgvalidatordWalletInfo.validateJsonElement(jsonObj.get("walletInfo"));
      }
      // validate the optional field `currencyInfo`
      if (jsonObj.get("currencyInfo") != null && !jsonObj.get("currencyInfo").isJsonNull()) {
        TgvalidatordCurrency.validateJsonElement(jsonObj.get("currencyInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordAddress>() {
           @Override
           public void write(JsonWriter out, TgvalidatordAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordAddress
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordAddress
   */
  public static TgvalidatordAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordAddress.class);
  }

  /**
   * Convert an instance of TgvalidatordAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

