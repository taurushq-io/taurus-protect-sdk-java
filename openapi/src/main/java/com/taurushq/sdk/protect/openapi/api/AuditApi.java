/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.api;

import com.taurushq.sdk.protect.openapi.ApiCallback;
import com.taurushq.sdk.protect.openapi.ApiClient;
import com.taurushq.sdk.protect.openapi.ApiException;
import com.taurushq.sdk.protect.openapi.ApiResponse;
import com.taurushq.sdk.protect.openapi.Configuration;
import com.taurushq.sdk.protect.openapi.Pair;
import com.taurushq.sdk.protect.openapi.ProgressRequestBody;
import com.taurushq.sdk.protect.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.taurushq.sdk.protect.openapi.model.GooglerpcStatus;
import java.time.OffsetDateTime;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordExportAuditTrailsReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetAuditTrailsReply;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuditApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuditApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuditApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for auditServiceExportAuditTrails
     * @param externalUserId  (optional)
     * @param entities The entities for which to get audit trails (defaults to all). (optional)
     * @param actions The actions for which to get audit trails (defaults to all). (optional)
     * @param creationDateFrom  (optional)
     * @param creationDateTo  (optional)
     * @param format Desired output format. Can be either &#39;csv&#39; or &#39;json&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when the tenant ID was not found in the JWT. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the service encountered an error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditServiceExportAuditTrailsCall(String externalUserId, List<String> entities, List<String> actions, OffsetDateTime creationDateFrom, OffsetDateTime creationDateTo, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/audit_trails/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (externalUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalUserId", externalUserId));
        }

        if (entities != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities", entities));
        }

        if (actions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "actions", actions));
        }

        if (creationDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("creationDateFrom", creationDateFrom));
        }

        if (creationDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("creationDateTo", creationDateTo));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call auditServiceExportAuditTrailsValidateBeforeCall(String externalUserId, List<String> entities, List<String> actions, OffsetDateTime creationDateFrom, OffsetDateTime creationDateTo, String format, final ApiCallback _callback) throws ApiException {
        return auditServiceExportAuditTrailsCall(externalUserId, entities, actions, creationDateFrom, creationDateTo, format, _callback);

    }

    /**
     * Export audit trails
     * This endpoint exports a list of audit trails as CSV. Note that only a maximum of 10000 trails are exportable at any one time.
     * @param externalUserId  (optional)
     * @param entities The entities for which to get audit trails (defaults to all). (optional)
     * @param actions The actions for which to get audit trails (defaults to all). (optional)
     * @param creationDateFrom  (optional)
     * @param creationDateTo  (optional)
     * @param format Desired output format. Can be either &#39;csv&#39; or &#39;json&#39;. (optional)
     * @return TgvalidatordExportAuditTrailsReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when the tenant ID was not found in the JWT. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the service encountered an error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordExportAuditTrailsReply auditServiceExportAuditTrails(String externalUserId, List<String> entities, List<String> actions, OffsetDateTime creationDateFrom, OffsetDateTime creationDateTo, String format) throws ApiException {
        ApiResponse<TgvalidatordExportAuditTrailsReply> localVarResp = auditServiceExportAuditTrailsWithHttpInfo(externalUserId, entities, actions, creationDateFrom, creationDateTo, format);
        return localVarResp.getData();
    }

    /**
     * Export audit trails
     * This endpoint exports a list of audit trails as CSV. Note that only a maximum of 10000 trails are exportable at any one time.
     * @param externalUserId  (optional)
     * @param entities The entities for which to get audit trails (defaults to all). (optional)
     * @param actions The actions for which to get audit trails (defaults to all). (optional)
     * @param creationDateFrom  (optional)
     * @param creationDateTo  (optional)
     * @param format Desired output format. Can be either &#39;csv&#39; or &#39;json&#39;. (optional)
     * @return ApiResponse&lt;TgvalidatordExportAuditTrailsReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when the tenant ID was not found in the JWT. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the service encountered an error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordExportAuditTrailsReply> auditServiceExportAuditTrailsWithHttpInfo(String externalUserId, List<String> entities, List<String> actions, OffsetDateTime creationDateFrom, OffsetDateTime creationDateTo, String format) throws ApiException {
        okhttp3.Call localVarCall = auditServiceExportAuditTrailsValidateBeforeCall(externalUserId, entities, actions, creationDateFrom, creationDateTo, format, null);
        Type localVarReturnType = new TypeToken<TgvalidatordExportAuditTrailsReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export audit trails (asynchronously)
     * This endpoint exports a list of audit trails as CSV. Note that only a maximum of 10000 trails are exportable at any one time.
     * @param externalUserId  (optional)
     * @param entities The entities for which to get audit trails (defaults to all). (optional)
     * @param actions The actions for which to get audit trails (defaults to all). (optional)
     * @param creationDateFrom  (optional)
     * @param creationDateTo  (optional)
     * @param format Desired output format. Can be either &#39;csv&#39; or &#39;json&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when the tenant ID was not found in the JWT. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the service encountered an error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditServiceExportAuditTrailsAsync(String externalUserId, List<String> entities, List<String> actions, OffsetDateTime creationDateFrom, OffsetDateTime creationDateTo, String format, final ApiCallback<TgvalidatordExportAuditTrailsReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = auditServiceExportAuditTrailsValidateBeforeCall(externalUserId, entities, actions, creationDateFrom, creationDateTo, format, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordExportAuditTrailsReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for auditServiceGetAuditTrails
     * @param externalUserId  (optional)
     * @param entities The entities for which to get audit trails (defaults to all). (optional)
     * @param actions The actions for which to get audit trails (defaults to all). (optional)
     * @param creationDateFrom  (optional)
     * @param creationDateTo  (optional)
     * @param cursorCurrentPage Base64-encoded string representing the current window of data (optional)
     * @param cursorPageRequest The page to request, w.r.t the current page. Can be one of &#x60;FIRST&#x60;, &#x60;PREVIOUS&#x60;, &#x60;NEXT&#x60;, &#x60;LAST&#x60; (optional)
     * @param cursorPageSize The size of the page requested. The handling service should impose a hard limit on this (optional)
     * @param sortingSortBy The columns to order by. Can be &#x60;CreationDate&#x60; (default) (optional)
     * @param sortingSortOrder Can be &#x60;DESC&#x60; (default), &#x60;ASC&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when the tenant ID was not found in the JWT. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the service encountered an error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditServiceGetAuditTrailsCall(String externalUserId, List<String> entities, List<String> actions, OffsetDateTime creationDateFrom, OffsetDateTime creationDateTo, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize, List<String> sortingSortBy, String sortingSortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/audit_trails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (externalUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalUserId", externalUserId));
        }

        if (entities != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities", entities));
        }

        if (actions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "actions", actions));
        }

        if (creationDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("creationDateFrom", creationDateFrom));
        }

        if (creationDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("creationDateTo", creationDateTo));
        }

        if (cursorCurrentPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor.currentPage", cursorCurrentPage));
        }

        if (cursorPageRequest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor.pageRequest", cursorPageRequest));
        }

        if (cursorPageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor.pageSize", cursorPageSize));
        }

        if (sortingSortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sorting.sortBy", sortingSortBy));
        }

        if (sortingSortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sorting.sortOrder", sortingSortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call auditServiceGetAuditTrailsValidateBeforeCall(String externalUserId, List<String> entities, List<String> actions, OffsetDateTime creationDateFrom, OffsetDateTime creationDateTo, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize, List<String> sortingSortBy, String sortingSortOrder, final ApiCallback _callback) throws ApiException {
        return auditServiceGetAuditTrailsCall(externalUserId, entities, actions, creationDateFrom, creationDateTo, cursorCurrentPage, cursorPageRequest, cursorPageSize, sortingSortBy, sortingSortOrder, _callback);

    }

    /**
     * Get audit trails
     * This endpoint returns audit trails for the given tenant, entities, actions, and date range.
     * @param externalUserId  (optional)
     * @param entities The entities for which to get audit trails (defaults to all). (optional)
     * @param actions The actions for which to get audit trails (defaults to all). (optional)
     * @param creationDateFrom  (optional)
     * @param creationDateTo  (optional)
     * @param cursorCurrentPage Base64-encoded string representing the current window of data (optional)
     * @param cursorPageRequest The page to request, w.r.t the current page. Can be one of &#x60;FIRST&#x60;, &#x60;PREVIOUS&#x60;, &#x60;NEXT&#x60;, &#x60;LAST&#x60; (optional)
     * @param cursorPageSize The size of the page requested. The handling service should impose a hard limit on this (optional)
     * @param sortingSortBy The columns to order by. Can be &#x60;CreationDate&#x60; (default) (optional)
     * @param sortingSortOrder Can be &#x60;DESC&#x60; (default), &#x60;ASC&#x60; (optional)
     * @return TgvalidatordGetAuditTrailsReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when the tenant ID was not found in the JWT. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the service encountered an error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordGetAuditTrailsReply auditServiceGetAuditTrails(String externalUserId, List<String> entities, List<String> actions, OffsetDateTime creationDateFrom, OffsetDateTime creationDateTo, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize, List<String> sortingSortBy, String sortingSortOrder) throws ApiException {
        ApiResponse<TgvalidatordGetAuditTrailsReply> localVarResp = auditServiceGetAuditTrailsWithHttpInfo(externalUserId, entities, actions, creationDateFrom, creationDateTo, cursorCurrentPage, cursorPageRequest, cursorPageSize, sortingSortBy, sortingSortOrder);
        return localVarResp.getData();
    }

    /**
     * Get audit trails
     * This endpoint returns audit trails for the given tenant, entities, actions, and date range.
     * @param externalUserId  (optional)
     * @param entities The entities for which to get audit trails (defaults to all). (optional)
     * @param actions The actions for which to get audit trails (defaults to all). (optional)
     * @param creationDateFrom  (optional)
     * @param creationDateTo  (optional)
     * @param cursorCurrentPage Base64-encoded string representing the current window of data (optional)
     * @param cursorPageRequest The page to request, w.r.t the current page. Can be one of &#x60;FIRST&#x60;, &#x60;PREVIOUS&#x60;, &#x60;NEXT&#x60;, &#x60;LAST&#x60; (optional)
     * @param cursorPageSize The size of the page requested. The handling service should impose a hard limit on this (optional)
     * @param sortingSortBy The columns to order by. Can be &#x60;CreationDate&#x60; (default) (optional)
     * @param sortingSortOrder Can be &#x60;DESC&#x60; (default), &#x60;ASC&#x60; (optional)
     * @return ApiResponse&lt;TgvalidatordGetAuditTrailsReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when the tenant ID was not found in the JWT. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the service encountered an error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordGetAuditTrailsReply> auditServiceGetAuditTrailsWithHttpInfo(String externalUserId, List<String> entities, List<String> actions, OffsetDateTime creationDateFrom, OffsetDateTime creationDateTo, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize, List<String> sortingSortBy, String sortingSortOrder) throws ApiException {
        okhttp3.Call localVarCall = auditServiceGetAuditTrailsValidateBeforeCall(externalUserId, entities, actions, creationDateFrom, creationDateTo, cursorCurrentPage, cursorPageRequest, cursorPageSize, sortingSortBy, sortingSortOrder, null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetAuditTrailsReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get audit trails (asynchronously)
     * This endpoint returns audit trails for the given tenant, entities, actions, and date range.
     * @param externalUserId  (optional)
     * @param entities The entities for which to get audit trails (defaults to all). (optional)
     * @param actions The actions for which to get audit trails (defaults to all). (optional)
     * @param creationDateFrom  (optional)
     * @param creationDateTo  (optional)
     * @param cursorCurrentPage Base64-encoded string representing the current window of data (optional)
     * @param cursorPageRequest The page to request, w.r.t the current page. Can be one of &#x60;FIRST&#x60;, &#x60;PREVIOUS&#x60;, &#x60;NEXT&#x60;, &#x60;LAST&#x60; (optional)
     * @param cursorPageSize The size of the page requested. The handling service should impose a hard limit on this (optional)
     * @param sortingSortBy The columns to order by. Can be &#x60;CreationDate&#x60; (default) (optional)
     * @param sortingSortOrder Can be &#x60;DESC&#x60; (default), &#x60;ASC&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when the tenant ID was not found in the JWT. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the service encountered an error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditServiceGetAuditTrailsAsync(String externalUserId, List<String> entities, List<String> actions, OffsetDateTime creationDateFrom, OffsetDateTime creationDateTo, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize, List<String> sortingSortBy, String sortingSortOrder, final ApiCallback<TgvalidatordGetAuditTrailsReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = auditServiceGetAuditTrailsValidateBeforeCall(externalUserId, entities, actions, creationDateFrom, creationDateTo, cursorCurrentPage, cursorPageRequest, cursorPageSize, sortingSortBy, sortingSortOrder, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetAuditTrailsReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
