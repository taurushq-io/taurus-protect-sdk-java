/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.taurushq.sdk.protect.openapi.model.ScoreFilterChainalysisFilters;
import com.taurushq.sdk.protect.openapi.model.ScoreFilterCoinfirmFilters;
import com.taurushq.sdk.protect.openapi.model.ScoreFilterEllipticFilters;
import com.taurushq.sdk.protect.openapi.model.ScoreFilterScorechainFilters;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordScoreFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordScoreFilter {
  public static final String SERIALIZED_NAME_SCORE_PROVIDER = "scoreProvider";
  @SerializedName(SERIALIZED_NAME_SCORE_PROVIDER)
  private String scoreProvider;

  public static final String SERIALIZED_NAME_SCORECHAIN_FILTERS = "scorechainFilters";
  @SerializedName(SERIALIZED_NAME_SCORECHAIN_FILTERS)
  private ScoreFilterScorechainFilters scorechainFilters;

  public static final String SERIALIZED_NAME_COINFIRM_FILTERS = "coinfirmFilters";
  @SerializedName(SERIALIZED_NAME_COINFIRM_FILTERS)
  private ScoreFilterCoinfirmFilters coinfirmFilters;

  public static final String SERIALIZED_NAME_CHAINALYSIS_FILTERS = "chainalysisFilters";
  @SerializedName(SERIALIZED_NAME_CHAINALYSIS_FILTERS)
  private ScoreFilterChainalysisFilters chainalysisFilters;

  public static final String SERIALIZED_NAME_ELLIPTIC_FILTERS = "ellipticFilters";
  @SerializedName(SERIALIZED_NAME_ELLIPTIC_FILTERS)
  private ScoreFilterEllipticFilters ellipticFilters;

  public TgvalidatordScoreFilter() {
  }

  public TgvalidatordScoreFilter scoreProvider(String scoreProvider) {
    this.scoreProvider = scoreProvider;
    return this;
  }

  /**
   * Specify the score provider to filter on, or empty.Each provider has associated filter parameters that can be set.Supported values: &#39;scorechain&#39;, &#39;coinfirm&#39;, &#39;chainalysis&#39;, &#39;elliptic&#39;
   * @return scoreProvider
   */
  @javax.annotation.Nullable
  public String getScoreProvider() {
    return scoreProvider;
  }

  public void setScoreProvider(String scoreProvider) {
    this.scoreProvider = scoreProvider;
  }


  public TgvalidatordScoreFilter scorechainFilters(ScoreFilterScorechainFilters scorechainFilters) {
    this.scorechainFilters = scorechainFilters;
    return this;
  }

  /**
   * Get scorechainFilters
   * @return scorechainFilters
   */
  @javax.annotation.Nullable
  public ScoreFilterScorechainFilters getScorechainFilters() {
    return scorechainFilters;
  }

  public void setScorechainFilters(ScoreFilterScorechainFilters scorechainFilters) {
    this.scorechainFilters = scorechainFilters;
  }


  public TgvalidatordScoreFilter coinfirmFilters(ScoreFilterCoinfirmFilters coinfirmFilters) {
    this.coinfirmFilters = coinfirmFilters;
    return this;
  }

  /**
   * Get coinfirmFilters
   * @return coinfirmFilters
   */
  @javax.annotation.Nullable
  public ScoreFilterCoinfirmFilters getCoinfirmFilters() {
    return coinfirmFilters;
  }

  public void setCoinfirmFilters(ScoreFilterCoinfirmFilters coinfirmFilters) {
    this.coinfirmFilters = coinfirmFilters;
  }


  public TgvalidatordScoreFilter chainalysisFilters(ScoreFilterChainalysisFilters chainalysisFilters) {
    this.chainalysisFilters = chainalysisFilters;
    return this;
  }

  /**
   * Get chainalysisFilters
   * @return chainalysisFilters
   */
  @javax.annotation.Nullable
  public ScoreFilterChainalysisFilters getChainalysisFilters() {
    return chainalysisFilters;
  }

  public void setChainalysisFilters(ScoreFilterChainalysisFilters chainalysisFilters) {
    this.chainalysisFilters = chainalysisFilters;
  }


  public TgvalidatordScoreFilter ellipticFilters(ScoreFilterEllipticFilters ellipticFilters) {
    this.ellipticFilters = ellipticFilters;
    return this;
  }

  /**
   * Get ellipticFilters
   * @return ellipticFilters
   */
  @javax.annotation.Nullable
  public ScoreFilterEllipticFilters getEllipticFilters() {
    return ellipticFilters;
  }

  public void setEllipticFilters(ScoreFilterEllipticFilters ellipticFilters) {
    this.ellipticFilters = ellipticFilters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordScoreFilter tgvalidatordScoreFilter = (TgvalidatordScoreFilter) o;
    return Objects.equals(this.scoreProvider, tgvalidatordScoreFilter.scoreProvider) &&
        Objects.equals(this.scorechainFilters, tgvalidatordScoreFilter.scorechainFilters) &&
        Objects.equals(this.coinfirmFilters, tgvalidatordScoreFilter.coinfirmFilters) &&
        Objects.equals(this.chainalysisFilters, tgvalidatordScoreFilter.chainalysisFilters) &&
        Objects.equals(this.ellipticFilters, tgvalidatordScoreFilter.ellipticFilters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scoreProvider, scorechainFilters, coinfirmFilters, chainalysisFilters, ellipticFilters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordScoreFilter {\n");
    sb.append("    scoreProvider: ").append(toIndentedString(scoreProvider)).append("\n");
    sb.append("    scorechainFilters: ").append(toIndentedString(scorechainFilters)).append("\n");
    sb.append("    coinfirmFilters: ").append(toIndentedString(coinfirmFilters)).append("\n");
    sb.append("    chainalysisFilters: ").append(toIndentedString(chainalysisFilters)).append("\n");
    sb.append("    ellipticFilters: ").append(toIndentedString(ellipticFilters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scoreProvider");
    openapiFields.add("scorechainFilters");
    openapiFields.add("coinfirmFilters");
    openapiFields.add("chainalysisFilters");
    openapiFields.add("ellipticFilters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordScoreFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordScoreFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordScoreFilter is not found in the empty JSON string", TgvalidatordScoreFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordScoreFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordScoreFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("scoreProvider") != null && !jsonObj.get("scoreProvider").isJsonNull()) && !jsonObj.get("scoreProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scoreProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scoreProvider").toString()));
      }
      // validate the optional field `scorechainFilters`
      if (jsonObj.get("scorechainFilters") != null && !jsonObj.get("scorechainFilters").isJsonNull()) {
        ScoreFilterScorechainFilters.validateJsonElement(jsonObj.get("scorechainFilters"));
      }
      // validate the optional field `coinfirmFilters`
      if (jsonObj.get("coinfirmFilters") != null && !jsonObj.get("coinfirmFilters").isJsonNull()) {
        ScoreFilterCoinfirmFilters.validateJsonElement(jsonObj.get("coinfirmFilters"));
      }
      // validate the optional field `chainalysisFilters`
      if (jsonObj.get("chainalysisFilters") != null && !jsonObj.get("chainalysisFilters").isJsonNull()) {
        ScoreFilterChainalysisFilters.validateJsonElement(jsonObj.get("chainalysisFilters"));
      }
      // validate the optional field `ellipticFilters`
      if (jsonObj.get("ellipticFilters") != null && !jsonObj.get("ellipticFilters").isJsonNull()) {
        ScoreFilterEllipticFilters.validateJsonElement(jsonObj.get("ellipticFilters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordScoreFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordScoreFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordScoreFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordScoreFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordScoreFilter>() {
           @Override
           public void write(JsonWriter out, TgvalidatordScoreFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordScoreFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordScoreFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordScoreFilter
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordScoreFilter
   */
  public static TgvalidatordScoreFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordScoreFilter.class);
  }

  /**
   * Convert an instance of TgvalidatordScoreFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

