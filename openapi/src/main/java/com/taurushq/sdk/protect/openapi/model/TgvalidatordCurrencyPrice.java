/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordCurrency;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordCurrencyPriceSignature;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordCurrencyPrice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordCurrencyPrice {
  public static final String SERIALIZED_NAME_BLOCKCHAIN = "blockchain";
  @SerializedName(SERIALIZED_NAME_BLOCKCHAIN)
  private String blockchain;

  public static final String SERIALIZED_NAME_CURRENCY_FROM = "currencyFrom";
  @SerializedName(SERIALIZED_NAME_CURRENCY_FROM)
  private String currencyFrom;

  public static final String SERIALIZED_NAME_CURRENCY_TO = "currencyTo";
  @SerializedName(SERIALIZED_NAME_CURRENCY_TO)
  private String currencyTo;

  public static final String SERIALIZED_NAME_DECIMALS = "decimals";
  @SerializedName(SERIALIZED_NAME_DECIMALS)
  private String decimals;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private String rate;

  public static final String SERIALIZED_NAME_SIGNATURES = "signatures";
  @SerializedName(SERIALIZED_NAME_SIGNATURES)
  private List<TgvalidatordCurrencyPriceSignature> signatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANGE_PERCENT24_HOUR = "changePercent24Hour";
  @SerializedName(SERIALIZED_NAME_CHANGE_PERCENT24_HOUR)
  private String changePercent24Hour;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_UPDATE_DATE = "updateDate";
  @SerializedName(SERIALIZED_NAME_UPDATE_DATE)
  private OffsetDateTime updateDate;

  public static final String SERIALIZED_NAME_CURRENCY_FROM_INFO = "currencyFromInfo";
  @SerializedName(SERIALIZED_NAME_CURRENCY_FROM_INFO)
  private TgvalidatordCurrency currencyFromInfo;

  public static final String SERIALIZED_NAME_CURRENCY_TO_INFO = "currencyToInfo";
  @SerializedName(SERIALIZED_NAME_CURRENCY_TO_INFO)
  private TgvalidatordCurrency currencyToInfo;

  public TgvalidatordCurrencyPrice() {
  }

  public TgvalidatordCurrencyPrice blockchain(String blockchain) {
    this.blockchain = blockchain;
    return this;
  }

  /**
   * Get blockchain
   * @return blockchain
   */
  @javax.annotation.Nullable
  public String getBlockchain() {
    return blockchain;
  }

  public void setBlockchain(String blockchain) {
    this.blockchain = blockchain;
  }


  public TgvalidatordCurrencyPrice currencyFrom(String currencyFrom) {
    this.currencyFrom = currencyFrom;
    return this;
  }

  /**
   * Get currencyFrom
   * @return currencyFrom
   */
  @javax.annotation.Nullable
  public String getCurrencyFrom() {
    return currencyFrom;
  }

  public void setCurrencyFrom(String currencyFrom) {
    this.currencyFrom = currencyFrom;
  }


  public TgvalidatordCurrencyPrice currencyTo(String currencyTo) {
    this.currencyTo = currencyTo;
    return this;
  }

  /**
   * Get currencyTo
   * @return currencyTo
   */
  @javax.annotation.Nullable
  public String getCurrencyTo() {
    return currencyTo;
  }

  public void setCurrencyTo(String currencyTo) {
    this.currencyTo = currencyTo;
  }


  public TgvalidatordCurrencyPrice decimals(String decimals) {
    this.decimals = decimals;
    return this;
  }

  /**
   * Get decimals
   * @return decimals
   */
  @javax.annotation.Nullable
  public String getDecimals() {
    return decimals;
  }

  public void setDecimals(String decimals) {
    this.decimals = decimals;
  }


  public TgvalidatordCurrencyPrice rate(String rate) {
    this.rate = rate;
    return this;
  }

  /**
   * Get rate
   * @return rate
   */
  @javax.annotation.Nullable
  public String getRate() {
    return rate;
  }

  public void setRate(String rate) {
    this.rate = rate;
  }


  public TgvalidatordCurrencyPrice signatures(List<TgvalidatordCurrencyPriceSignature> signatures) {
    this.signatures = signatures;
    return this;
  }

  public TgvalidatordCurrencyPrice addSignaturesItem(TgvalidatordCurrencyPriceSignature signaturesItem) {
    if (this.signatures == null) {
      this.signatures = new ArrayList<>();
    }
    this.signatures.add(signaturesItem);
    return this;
  }

  /**
   * Get signatures
   * @return signatures
   */
  @javax.annotation.Nullable
  public List<TgvalidatordCurrencyPriceSignature> getSignatures() {
    return signatures;
  }

  public void setSignatures(List<TgvalidatordCurrencyPriceSignature> signatures) {
    this.signatures = signatures;
  }


  public TgvalidatordCurrencyPrice changePercent24Hour(String changePercent24Hour) {
    this.changePercent24Hour = changePercent24Hour;
    return this;
  }

  /**
   * Get changePercent24Hour
   * @return changePercent24Hour
   */
  @javax.annotation.Nullable
  public String getChangePercent24Hour() {
    return changePercent24Hour;
  }

  public void setChangePercent24Hour(String changePercent24Hour) {
    this.changePercent24Hour = changePercent24Hour;
  }


  public TgvalidatordCurrencyPrice source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public TgvalidatordCurrencyPrice creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public TgvalidatordCurrencyPrice updateDate(OffsetDateTime updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  /**
   * Get updateDate
   * @return updateDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdateDate() {
    return updateDate;
  }

  public void setUpdateDate(OffsetDateTime updateDate) {
    this.updateDate = updateDate;
  }


  public TgvalidatordCurrencyPrice currencyFromInfo(TgvalidatordCurrency currencyFromInfo) {
    this.currencyFromInfo = currencyFromInfo;
    return this;
  }

  /**
   * Get currencyFromInfo
   * @return currencyFromInfo
   */
  @javax.annotation.Nullable
  public TgvalidatordCurrency getCurrencyFromInfo() {
    return currencyFromInfo;
  }

  public void setCurrencyFromInfo(TgvalidatordCurrency currencyFromInfo) {
    this.currencyFromInfo = currencyFromInfo;
  }


  public TgvalidatordCurrencyPrice currencyToInfo(TgvalidatordCurrency currencyToInfo) {
    this.currencyToInfo = currencyToInfo;
    return this;
  }

  /**
   * Get currencyToInfo
   * @return currencyToInfo
   */
  @javax.annotation.Nullable
  public TgvalidatordCurrency getCurrencyToInfo() {
    return currencyToInfo;
  }

  public void setCurrencyToInfo(TgvalidatordCurrency currencyToInfo) {
    this.currencyToInfo = currencyToInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordCurrencyPrice tgvalidatordCurrencyPrice = (TgvalidatordCurrencyPrice) o;
    return Objects.equals(this.blockchain, tgvalidatordCurrencyPrice.blockchain) &&
        Objects.equals(this.currencyFrom, tgvalidatordCurrencyPrice.currencyFrom) &&
        Objects.equals(this.currencyTo, tgvalidatordCurrencyPrice.currencyTo) &&
        Objects.equals(this.decimals, tgvalidatordCurrencyPrice.decimals) &&
        Objects.equals(this.rate, tgvalidatordCurrencyPrice.rate) &&
        Objects.equals(this.signatures, tgvalidatordCurrencyPrice.signatures) &&
        Objects.equals(this.changePercent24Hour, tgvalidatordCurrencyPrice.changePercent24Hour) &&
        Objects.equals(this.source, tgvalidatordCurrencyPrice.source) &&
        Objects.equals(this.creationDate, tgvalidatordCurrencyPrice.creationDate) &&
        Objects.equals(this.updateDate, tgvalidatordCurrencyPrice.updateDate) &&
        Objects.equals(this.currencyFromInfo, tgvalidatordCurrencyPrice.currencyFromInfo) &&
        Objects.equals(this.currencyToInfo, tgvalidatordCurrencyPrice.currencyToInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockchain, currencyFrom, currencyTo, decimals, rate, signatures, changePercent24Hour, source, creationDate, updateDate, currencyFromInfo, currencyToInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordCurrencyPrice {\n");
    sb.append("    blockchain: ").append(toIndentedString(blockchain)).append("\n");
    sb.append("    currencyFrom: ").append(toIndentedString(currencyFrom)).append("\n");
    sb.append("    currencyTo: ").append(toIndentedString(currencyTo)).append("\n");
    sb.append("    decimals: ").append(toIndentedString(decimals)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    signatures: ").append(toIndentedString(signatures)).append("\n");
    sb.append("    changePercent24Hour: ").append(toIndentedString(changePercent24Hour)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    updateDate: ").append(toIndentedString(updateDate)).append("\n");
    sb.append("    currencyFromInfo: ").append(toIndentedString(currencyFromInfo)).append("\n");
    sb.append("    currencyToInfo: ").append(toIndentedString(currencyToInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blockchain");
    openapiFields.add("currencyFrom");
    openapiFields.add("currencyTo");
    openapiFields.add("decimals");
    openapiFields.add("rate");
    openapiFields.add("signatures");
    openapiFields.add("changePercent24Hour");
    openapiFields.add("source");
    openapiFields.add("creationDate");
    openapiFields.add("updateDate");
    openapiFields.add("currencyFromInfo");
    openapiFields.add("currencyToInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordCurrencyPrice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordCurrencyPrice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordCurrencyPrice is not found in the empty JSON string", TgvalidatordCurrencyPrice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordCurrencyPrice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordCurrencyPrice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blockchain") != null && !jsonObj.get("blockchain").isJsonNull()) && !jsonObj.get("blockchain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockchain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockchain").toString()));
      }
      if ((jsonObj.get("currencyFrom") != null && !jsonObj.get("currencyFrom").isJsonNull()) && !jsonObj.get("currencyFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyFrom").toString()));
      }
      if ((jsonObj.get("currencyTo") != null && !jsonObj.get("currencyTo").isJsonNull()) && !jsonObj.get("currencyTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyTo").toString()));
      }
      if ((jsonObj.get("decimals") != null && !jsonObj.get("decimals").isJsonNull()) && !jsonObj.get("decimals").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decimals` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decimals").toString()));
      }
      if ((jsonObj.get("rate") != null && !jsonObj.get("rate").isJsonNull()) && !jsonObj.get("rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rate").toString()));
      }
      if (jsonObj.get("signatures") != null && !jsonObj.get("signatures").isJsonNull()) {
        JsonArray jsonArraysignatures = jsonObj.getAsJsonArray("signatures");
        if (jsonArraysignatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("signatures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `signatures` to be an array in the JSON string but got `%s`", jsonObj.get("signatures").toString()));
          }

          // validate the optional field `signatures` (array)
          for (int i = 0; i < jsonArraysignatures.size(); i++) {
            TgvalidatordCurrencyPriceSignature.validateJsonElement(jsonArraysignatures.get(i));
          };
        }
      }
      if ((jsonObj.get("changePercent24Hour") != null && !jsonObj.get("changePercent24Hour").isJsonNull()) && !jsonObj.get("changePercent24Hour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changePercent24Hour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changePercent24Hour").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // validate the optional field `currencyFromInfo`
      if (jsonObj.get("currencyFromInfo") != null && !jsonObj.get("currencyFromInfo").isJsonNull()) {
        TgvalidatordCurrency.validateJsonElement(jsonObj.get("currencyFromInfo"));
      }
      // validate the optional field `currencyToInfo`
      if (jsonObj.get("currencyToInfo") != null && !jsonObj.get("currencyToInfo").isJsonNull()) {
        TgvalidatordCurrency.validateJsonElement(jsonObj.get("currencyToInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordCurrencyPrice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordCurrencyPrice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordCurrencyPrice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordCurrencyPrice.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordCurrencyPrice>() {
           @Override
           public void write(JsonWriter out, TgvalidatordCurrencyPrice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordCurrencyPrice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordCurrencyPrice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordCurrencyPrice
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordCurrencyPrice
   */
  public static TgvalidatordCurrencyPrice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordCurrencyPrice.class);
  }

  /**
   * Convert an instance of TgvalidatordCurrencyPrice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

