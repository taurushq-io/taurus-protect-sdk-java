/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordGetNEARValidatorInfoReply
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordGetNEARValidatorInfoReply {
  public static final String SERIALIZED_NAME_VALIDATOR_ADDRESS = "validatorAddress";
  @SerializedName(SERIALIZED_NAME_VALIDATOR_ADDRESS)
  private String validatorAddress;

  public static final String SERIALIZED_NAME_OWNER_ID = "ownerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private String ownerId;

  public static final String SERIALIZED_NAME_TOTAL_STAKED_BALANCE = "totalStakedBalance";
  @SerializedName(SERIALIZED_NAME_TOTAL_STAKED_BALANCE)
  private String totalStakedBalance;

  public static final String SERIALIZED_NAME_REWARD_FEE_FRACTION = "rewardFeeFraction";
  @SerializedName(SERIALIZED_NAME_REWARD_FEE_FRACTION)
  private Float rewardFeeFraction;

  public static final String SERIALIZED_NAME_STAKING_KEY = "stakingKey";
  @SerializedName(SERIALIZED_NAME_STAKING_KEY)
  private String stakingKey;

  public static final String SERIALIZED_NAME_IS_STAKING_PAUSED = "isStakingPaused";
  @SerializedName(SERIALIZED_NAME_IS_STAKING_PAUSED)
  private Boolean isStakingPaused;

  public TgvalidatordGetNEARValidatorInfoReply() {
  }

  public TgvalidatordGetNEARValidatorInfoReply validatorAddress(String validatorAddress) {
    this.validatorAddress = validatorAddress;
    return this;
  }

  /**
   * Get validatorAddress
   * @return validatorAddress
   */
  @javax.annotation.Nullable
  public String getValidatorAddress() {
    return validatorAddress;
  }

  public void setValidatorAddress(String validatorAddress) {
    this.validatorAddress = validatorAddress;
  }


  public TgvalidatordGetNEARValidatorInfoReply ownerId(String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  /**
   * Get ownerId
   * @return ownerId
   */
  @javax.annotation.Nullable
  public String getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public TgvalidatordGetNEARValidatorInfoReply totalStakedBalance(String totalStakedBalance) {
    this.totalStakedBalance = totalStakedBalance;
    return this;
  }

  /**
   * Get totalStakedBalance
   * @return totalStakedBalance
   */
  @javax.annotation.Nullable
  public String getTotalStakedBalance() {
    return totalStakedBalance;
  }

  public void setTotalStakedBalance(String totalStakedBalance) {
    this.totalStakedBalance = totalStakedBalance;
  }


  public TgvalidatordGetNEARValidatorInfoReply rewardFeeFraction(Float rewardFeeFraction) {
    this.rewardFeeFraction = rewardFeeFraction;
    return this;
  }

  /**
   * Get rewardFeeFraction
   * @return rewardFeeFraction
   */
  @javax.annotation.Nullable
  public Float getRewardFeeFraction() {
    return rewardFeeFraction;
  }

  public void setRewardFeeFraction(Float rewardFeeFraction) {
    this.rewardFeeFraction = rewardFeeFraction;
  }


  public TgvalidatordGetNEARValidatorInfoReply stakingKey(String stakingKey) {
    this.stakingKey = stakingKey;
    return this;
  }

  /**
   * Get stakingKey
   * @return stakingKey
   */
  @javax.annotation.Nullable
  public String getStakingKey() {
    return stakingKey;
  }

  public void setStakingKey(String stakingKey) {
    this.stakingKey = stakingKey;
  }


  public TgvalidatordGetNEARValidatorInfoReply isStakingPaused(Boolean isStakingPaused) {
    this.isStakingPaused = isStakingPaused;
    return this;
  }

  /**
   * Get isStakingPaused
   * @return isStakingPaused
   */
  @javax.annotation.Nullable
  public Boolean getIsStakingPaused() {
    return isStakingPaused;
  }

  public void setIsStakingPaused(Boolean isStakingPaused) {
    this.isStakingPaused = isStakingPaused;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordGetNEARValidatorInfoReply tgvalidatordGetNEARValidatorInfoReply = (TgvalidatordGetNEARValidatorInfoReply) o;
    return Objects.equals(this.validatorAddress, tgvalidatordGetNEARValidatorInfoReply.validatorAddress) &&
        Objects.equals(this.ownerId, tgvalidatordGetNEARValidatorInfoReply.ownerId) &&
        Objects.equals(this.totalStakedBalance, tgvalidatordGetNEARValidatorInfoReply.totalStakedBalance) &&
        Objects.equals(this.rewardFeeFraction, tgvalidatordGetNEARValidatorInfoReply.rewardFeeFraction) &&
        Objects.equals(this.stakingKey, tgvalidatordGetNEARValidatorInfoReply.stakingKey) &&
        Objects.equals(this.isStakingPaused, tgvalidatordGetNEARValidatorInfoReply.isStakingPaused);
  }

  @Override
  public int hashCode() {
    return Objects.hash(validatorAddress, ownerId, totalStakedBalance, rewardFeeFraction, stakingKey, isStakingPaused);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordGetNEARValidatorInfoReply {\n");
    sb.append("    validatorAddress: ").append(toIndentedString(validatorAddress)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    totalStakedBalance: ").append(toIndentedString(totalStakedBalance)).append("\n");
    sb.append("    rewardFeeFraction: ").append(toIndentedString(rewardFeeFraction)).append("\n");
    sb.append("    stakingKey: ").append(toIndentedString(stakingKey)).append("\n");
    sb.append("    isStakingPaused: ").append(toIndentedString(isStakingPaused)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("validatorAddress");
    openapiFields.add("ownerId");
    openapiFields.add("totalStakedBalance");
    openapiFields.add("rewardFeeFraction");
    openapiFields.add("stakingKey");
    openapiFields.add("isStakingPaused");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordGetNEARValidatorInfoReply
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordGetNEARValidatorInfoReply.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordGetNEARValidatorInfoReply is not found in the empty JSON string", TgvalidatordGetNEARValidatorInfoReply.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordGetNEARValidatorInfoReply.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordGetNEARValidatorInfoReply` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("validatorAddress") != null && !jsonObj.get("validatorAddress").isJsonNull()) && !jsonObj.get("validatorAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validatorAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validatorAddress").toString()));
      }
      if ((jsonObj.get("ownerId") != null && !jsonObj.get("ownerId").isJsonNull()) && !jsonObj.get("ownerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerId").toString()));
      }
      if ((jsonObj.get("totalStakedBalance") != null && !jsonObj.get("totalStakedBalance").isJsonNull()) && !jsonObj.get("totalStakedBalance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalStakedBalance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalStakedBalance").toString()));
      }
      if ((jsonObj.get("stakingKey") != null && !jsonObj.get("stakingKey").isJsonNull()) && !jsonObj.get("stakingKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stakingKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stakingKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordGetNEARValidatorInfoReply.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordGetNEARValidatorInfoReply' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordGetNEARValidatorInfoReply> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordGetNEARValidatorInfoReply.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordGetNEARValidatorInfoReply>() {
           @Override
           public void write(JsonWriter out, TgvalidatordGetNEARValidatorInfoReply value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordGetNEARValidatorInfoReply read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordGetNEARValidatorInfoReply given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordGetNEARValidatorInfoReply
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordGetNEARValidatorInfoReply
   */
  public static TgvalidatordGetNEARValidatorInfoReply fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordGetNEARValidatorInfoReply.class);
  }

  /**
   * Convert an instance of TgvalidatordGetNEARValidatorInfoReply to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

