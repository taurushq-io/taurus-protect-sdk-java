/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordRevealUserApiKeyReply
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordRevealUserApiKeyReply {
  public static final String SERIALIZED_NAME_API_KEY_ID = "apiKeyId";
  @SerializedName(SERIALIZED_NAME_API_KEY_ID)
  private String apiKeyId;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_REVEAL_DATE = "revealDate";
  @SerializedName(SERIALIZED_NAME_REVEAL_DATE)
  private OffsetDateTime revealDate;

  public static final String SERIALIZED_NAME_REVEALABLE = "revealable";
  @SerializedName(SERIALIZED_NAME_REVEALABLE)
  private Boolean revealable;

  public TgvalidatordRevealUserApiKeyReply() {
  }

  public TgvalidatordRevealUserApiKeyReply apiKeyId(String apiKeyId) {
    this.apiKeyId = apiKeyId;
    return this;
  }

  /**
   * Get apiKeyId
   * @return apiKeyId
   */
  @javax.annotation.Nullable
  public String getApiKeyId() {
    return apiKeyId;
  }

  public void setApiKeyId(String apiKeyId) {
    this.apiKeyId = apiKeyId;
  }


  public TgvalidatordRevealUserApiKeyReply secret(String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * Get secret
   * @return secret
   */
  @javax.annotation.Nullable
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }


  public TgvalidatordRevealUserApiKeyReply creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public TgvalidatordRevealUserApiKeyReply revealDate(OffsetDateTime revealDate) {
    this.revealDate = revealDate;
    return this;
  }

  /**
   * Get revealDate
   * @return revealDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRevealDate() {
    return revealDate;
  }

  public void setRevealDate(OffsetDateTime revealDate) {
    this.revealDate = revealDate;
  }


  public TgvalidatordRevealUserApiKeyReply revealable(Boolean revealable) {
    this.revealable = revealable;
    return this;
  }

  /**
   * Get revealable
   * @return revealable
   */
  @javax.annotation.Nullable
  public Boolean getRevealable() {
    return revealable;
  }

  public void setRevealable(Boolean revealable) {
    this.revealable = revealable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordRevealUserApiKeyReply tgvalidatordRevealUserApiKeyReply = (TgvalidatordRevealUserApiKeyReply) o;
    return Objects.equals(this.apiKeyId, tgvalidatordRevealUserApiKeyReply.apiKeyId) &&
        Objects.equals(this.secret, tgvalidatordRevealUserApiKeyReply.secret) &&
        Objects.equals(this.creationDate, tgvalidatordRevealUserApiKeyReply.creationDate) &&
        Objects.equals(this.revealDate, tgvalidatordRevealUserApiKeyReply.revealDate) &&
        Objects.equals(this.revealable, tgvalidatordRevealUserApiKeyReply.revealable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKeyId, secret, creationDate, revealDate, revealable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordRevealUserApiKeyReply {\n");
    sb.append("    apiKeyId: ").append(toIndentedString(apiKeyId)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    revealDate: ").append(toIndentedString(revealDate)).append("\n");
    sb.append("    revealable: ").append(toIndentedString(revealable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiKeyId");
    openapiFields.add("secret");
    openapiFields.add("creationDate");
    openapiFields.add("revealDate");
    openapiFields.add("revealable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordRevealUserApiKeyReply
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordRevealUserApiKeyReply.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordRevealUserApiKeyReply is not found in the empty JSON string", TgvalidatordRevealUserApiKeyReply.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordRevealUserApiKeyReply.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordRevealUserApiKeyReply` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiKeyId") != null && !jsonObj.get("apiKeyId").isJsonNull()) && !jsonObj.get("apiKeyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiKeyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiKeyId").toString()));
      }
      if ((jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) && !jsonObj.get("secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordRevealUserApiKeyReply.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordRevealUserApiKeyReply' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordRevealUserApiKeyReply> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordRevealUserApiKeyReply.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordRevealUserApiKeyReply>() {
           @Override
           public void write(JsonWriter out, TgvalidatordRevealUserApiKeyReply value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordRevealUserApiKeyReply read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordRevealUserApiKeyReply given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordRevealUserApiKeyReply
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordRevealUserApiKeyReply
   */
  public static TgvalidatordRevealUserApiKeyReply fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordRevealUserApiKeyReply.class);
  }

  /**
   * Convert an instance of TgvalidatordRevealUserApiKeyReply to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

