/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.taurushq.sdk.protect.openapi.model.GetICPNeuronInfoReplyNeuronState;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordICPKnownNeuronData;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordGetICPNeuronInfoReply
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordGetICPNeuronInfoReply {
  public static final String SERIALIZED_NAME_NEURON_ID = "neuronId";
  @SerializedName(SERIALIZED_NAME_NEURON_ID)
  private String neuronId;

  public static final String SERIALIZED_NAME_RETRIEVE_AT_TIMESTAMP_SECONDS = "retrieveAtTimestampSeconds";
  @SerializedName(SERIALIZED_NAME_RETRIEVE_AT_TIMESTAMP_SECONDS)
  private String retrieveAtTimestampSeconds;

  public static final String SERIALIZED_NAME_NEURON_STATE = "neuronState";
  @SerializedName(SERIALIZED_NAME_NEURON_STATE)
  private GetICPNeuronInfoReplyNeuronState neuronState;

  public static final String SERIALIZED_NAME_AGE_SECONDS = "ageSeconds";
  @SerializedName(SERIALIZED_NAME_AGE_SECONDS)
  private String ageSeconds;

  public static final String SERIALIZED_NAME_DISSOLVE_DELAY_SECONDS = "dissolveDelaySeconds";
  @SerializedName(SERIALIZED_NAME_DISSOLVE_DELAY_SECONDS)
  private String dissolveDelaySeconds;

  public static final String SERIALIZED_NAME_VOTING_POWER = "votingPower";
  @SerializedName(SERIALIZED_NAME_VOTING_POWER)
  private String votingPower;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP_SECONDS = "createdTimestampSeconds";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP_SECONDS)
  private String createdTimestampSeconds;

  public static final String SERIALIZED_NAME_STAKE_E8_S = "stakeE8S";
  @SerializedName(SERIALIZED_NAME_STAKE_E8_S)
  private String stakeE8S;

  public static final String SERIALIZED_NAME_JOINED_COMMUNITY_FUND_TIMESTAMP_SECONDS = "joinedCommunityFundTimestampSeconds";
  @SerializedName(SERIALIZED_NAME_JOINED_COMMUNITY_FUND_TIMESTAMP_SECONDS)
  private String joinedCommunityFundTimestampSeconds;

  public static final String SERIALIZED_NAME_KNOWN_NEURON_DATA = "knownNeuronData";
  @SerializedName(SERIALIZED_NAME_KNOWN_NEURON_DATA)
  private TgvalidatordICPKnownNeuronData knownNeuronData;

  public TgvalidatordGetICPNeuronInfoReply() {
  }

  public TgvalidatordGetICPNeuronInfoReply neuronId(String neuronId) {
    this.neuronId = neuronId;
    return this;
  }

  /**
   * Get neuronId
   * @return neuronId
   */
  @javax.annotation.Nullable
  public String getNeuronId() {
    return neuronId;
  }

  public void setNeuronId(String neuronId) {
    this.neuronId = neuronId;
  }


  public TgvalidatordGetICPNeuronInfoReply retrieveAtTimestampSeconds(String retrieveAtTimestampSeconds) {
    this.retrieveAtTimestampSeconds = retrieveAtTimestampSeconds;
    return this;
  }

  /**
   * Get retrieveAtTimestampSeconds
   * @return retrieveAtTimestampSeconds
   */
  @javax.annotation.Nullable
  public String getRetrieveAtTimestampSeconds() {
    return retrieveAtTimestampSeconds;
  }

  public void setRetrieveAtTimestampSeconds(String retrieveAtTimestampSeconds) {
    this.retrieveAtTimestampSeconds = retrieveAtTimestampSeconds;
  }


  public TgvalidatordGetICPNeuronInfoReply neuronState(GetICPNeuronInfoReplyNeuronState neuronState) {
    this.neuronState = neuronState;
    return this;
  }

  /**
   * Get neuronState
   * @return neuronState
   */
  @javax.annotation.Nullable
  public GetICPNeuronInfoReplyNeuronState getNeuronState() {
    return neuronState;
  }

  public void setNeuronState(GetICPNeuronInfoReplyNeuronState neuronState) {
    this.neuronState = neuronState;
  }


  public TgvalidatordGetICPNeuronInfoReply ageSeconds(String ageSeconds) {
    this.ageSeconds = ageSeconds;
    return this;
  }

  /**
   * Get ageSeconds
   * @return ageSeconds
   */
  @javax.annotation.Nullable
  public String getAgeSeconds() {
    return ageSeconds;
  }

  public void setAgeSeconds(String ageSeconds) {
    this.ageSeconds = ageSeconds;
  }


  public TgvalidatordGetICPNeuronInfoReply dissolveDelaySeconds(String dissolveDelaySeconds) {
    this.dissolveDelaySeconds = dissolveDelaySeconds;
    return this;
  }

  /**
   * Get dissolveDelaySeconds
   * @return dissolveDelaySeconds
   */
  @javax.annotation.Nullable
  public String getDissolveDelaySeconds() {
    return dissolveDelaySeconds;
  }

  public void setDissolveDelaySeconds(String dissolveDelaySeconds) {
    this.dissolveDelaySeconds = dissolveDelaySeconds;
  }


  public TgvalidatordGetICPNeuronInfoReply votingPower(String votingPower) {
    this.votingPower = votingPower;
    return this;
  }

  /**
   * Get votingPower
   * @return votingPower
   */
  @javax.annotation.Nullable
  public String getVotingPower() {
    return votingPower;
  }

  public void setVotingPower(String votingPower) {
    this.votingPower = votingPower;
  }


  public TgvalidatordGetICPNeuronInfoReply createdTimestampSeconds(String createdTimestampSeconds) {
    this.createdTimestampSeconds = createdTimestampSeconds;
    return this;
  }

  /**
   * Get createdTimestampSeconds
   * @return createdTimestampSeconds
   */
  @javax.annotation.Nullable
  public String getCreatedTimestampSeconds() {
    return createdTimestampSeconds;
  }

  public void setCreatedTimestampSeconds(String createdTimestampSeconds) {
    this.createdTimestampSeconds = createdTimestampSeconds;
  }


  public TgvalidatordGetICPNeuronInfoReply stakeE8S(String stakeE8S) {
    this.stakeE8S = stakeE8S;
    return this;
  }

  /**
   * Get stakeE8S
   * @return stakeE8S
   */
  @javax.annotation.Nullable
  public String getStakeE8S() {
    return stakeE8S;
  }

  public void setStakeE8S(String stakeE8S) {
    this.stakeE8S = stakeE8S;
  }


  public TgvalidatordGetICPNeuronInfoReply joinedCommunityFundTimestampSeconds(String joinedCommunityFundTimestampSeconds) {
    this.joinedCommunityFundTimestampSeconds = joinedCommunityFundTimestampSeconds;
    return this;
  }

  /**
   * Get joinedCommunityFundTimestampSeconds
   * @return joinedCommunityFundTimestampSeconds
   */
  @javax.annotation.Nullable
  public String getJoinedCommunityFundTimestampSeconds() {
    return joinedCommunityFundTimestampSeconds;
  }

  public void setJoinedCommunityFundTimestampSeconds(String joinedCommunityFundTimestampSeconds) {
    this.joinedCommunityFundTimestampSeconds = joinedCommunityFundTimestampSeconds;
  }


  public TgvalidatordGetICPNeuronInfoReply knownNeuronData(TgvalidatordICPKnownNeuronData knownNeuronData) {
    this.knownNeuronData = knownNeuronData;
    return this;
  }

  /**
   * Get knownNeuronData
   * @return knownNeuronData
   */
  @javax.annotation.Nullable
  public TgvalidatordICPKnownNeuronData getKnownNeuronData() {
    return knownNeuronData;
  }

  public void setKnownNeuronData(TgvalidatordICPKnownNeuronData knownNeuronData) {
    this.knownNeuronData = knownNeuronData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordGetICPNeuronInfoReply tgvalidatordGetICPNeuronInfoReply = (TgvalidatordGetICPNeuronInfoReply) o;
    return Objects.equals(this.neuronId, tgvalidatordGetICPNeuronInfoReply.neuronId) &&
        Objects.equals(this.retrieveAtTimestampSeconds, tgvalidatordGetICPNeuronInfoReply.retrieveAtTimestampSeconds) &&
        Objects.equals(this.neuronState, tgvalidatordGetICPNeuronInfoReply.neuronState) &&
        Objects.equals(this.ageSeconds, tgvalidatordGetICPNeuronInfoReply.ageSeconds) &&
        Objects.equals(this.dissolveDelaySeconds, tgvalidatordGetICPNeuronInfoReply.dissolveDelaySeconds) &&
        Objects.equals(this.votingPower, tgvalidatordGetICPNeuronInfoReply.votingPower) &&
        Objects.equals(this.createdTimestampSeconds, tgvalidatordGetICPNeuronInfoReply.createdTimestampSeconds) &&
        Objects.equals(this.stakeE8S, tgvalidatordGetICPNeuronInfoReply.stakeE8S) &&
        Objects.equals(this.joinedCommunityFundTimestampSeconds, tgvalidatordGetICPNeuronInfoReply.joinedCommunityFundTimestampSeconds) &&
        Objects.equals(this.knownNeuronData, tgvalidatordGetICPNeuronInfoReply.knownNeuronData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(neuronId, retrieveAtTimestampSeconds, neuronState, ageSeconds, dissolveDelaySeconds, votingPower, createdTimestampSeconds, stakeE8S, joinedCommunityFundTimestampSeconds, knownNeuronData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordGetICPNeuronInfoReply {\n");
    sb.append("    neuronId: ").append(toIndentedString(neuronId)).append("\n");
    sb.append("    retrieveAtTimestampSeconds: ").append(toIndentedString(retrieveAtTimestampSeconds)).append("\n");
    sb.append("    neuronState: ").append(toIndentedString(neuronState)).append("\n");
    sb.append("    ageSeconds: ").append(toIndentedString(ageSeconds)).append("\n");
    sb.append("    dissolveDelaySeconds: ").append(toIndentedString(dissolveDelaySeconds)).append("\n");
    sb.append("    votingPower: ").append(toIndentedString(votingPower)).append("\n");
    sb.append("    createdTimestampSeconds: ").append(toIndentedString(createdTimestampSeconds)).append("\n");
    sb.append("    stakeE8S: ").append(toIndentedString(stakeE8S)).append("\n");
    sb.append("    joinedCommunityFundTimestampSeconds: ").append(toIndentedString(joinedCommunityFundTimestampSeconds)).append("\n");
    sb.append("    knownNeuronData: ").append(toIndentedString(knownNeuronData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("neuronId");
    openapiFields.add("retrieveAtTimestampSeconds");
    openapiFields.add("neuronState");
    openapiFields.add("ageSeconds");
    openapiFields.add("dissolveDelaySeconds");
    openapiFields.add("votingPower");
    openapiFields.add("createdTimestampSeconds");
    openapiFields.add("stakeE8S");
    openapiFields.add("joinedCommunityFundTimestampSeconds");
    openapiFields.add("knownNeuronData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordGetICPNeuronInfoReply
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordGetICPNeuronInfoReply.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordGetICPNeuronInfoReply is not found in the empty JSON string", TgvalidatordGetICPNeuronInfoReply.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordGetICPNeuronInfoReply.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordGetICPNeuronInfoReply` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("neuronId") != null && !jsonObj.get("neuronId").isJsonNull()) && !jsonObj.get("neuronId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `neuronId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("neuronId").toString()));
      }
      if ((jsonObj.get("retrieveAtTimestampSeconds") != null && !jsonObj.get("retrieveAtTimestampSeconds").isJsonNull()) && !jsonObj.get("retrieveAtTimestampSeconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retrieveAtTimestampSeconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retrieveAtTimestampSeconds").toString()));
      }
      // validate the optional field `neuronState`
      if (jsonObj.get("neuronState") != null && !jsonObj.get("neuronState").isJsonNull()) {
        GetICPNeuronInfoReplyNeuronState.validateJsonElement(jsonObj.get("neuronState"));
      }
      if ((jsonObj.get("ageSeconds") != null && !jsonObj.get("ageSeconds").isJsonNull()) && !jsonObj.get("ageSeconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ageSeconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ageSeconds").toString()));
      }
      if ((jsonObj.get("dissolveDelaySeconds") != null && !jsonObj.get("dissolveDelaySeconds").isJsonNull()) && !jsonObj.get("dissolveDelaySeconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dissolveDelaySeconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dissolveDelaySeconds").toString()));
      }
      if ((jsonObj.get("votingPower") != null && !jsonObj.get("votingPower").isJsonNull()) && !jsonObj.get("votingPower").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `votingPower` to be a primitive type in the JSON string but got `%s`", jsonObj.get("votingPower").toString()));
      }
      if ((jsonObj.get("createdTimestampSeconds") != null && !jsonObj.get("createdTimestampSeconds").isJsonNull()) && !jsonObj.get("createdTimestampSeconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdTimestampSeconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdTimestampSeconds").toString()));
      }
      if ((jsonObj.get("stakeE8S") != null && !jsonObj.get("stakeE8S").isJsonNull()) && !jsonObj.get("stakeE8S").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stakeE8S` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stakeE8S").toString()));
      }
      if ((jsonObj.get("joinedCommunityFundTimestampSeconds") != null && !jsonObj.get("joinedCommunityFundTimestampSeconds").isJsonNull()) && !jsonObj.get("joinedCommunityFundTimestampSeconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `joinedCommunityFundTimestampSeconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("joinedCommunityFundTimestampSeconds").toString()));
      }
      // validate the optional field `knownNeuronData`
      if (jsonObj.get("knownNeuronData") != null && !jsonObj.get("knownNeuronData").isJsonNull()) {
        TgvalidatordICPKnownNeuronData.validateJsonElement(jsonObj.get("knownNeuronData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordGetICPNeuronInfoReply.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordGetICPNeuronInfoReply' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordGetICPNeuronInfoReply> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordGetICPNeuronInfoReply.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordGetICPNeuronInfoReply>() {
           @Override
           public void write(JsonWriter out, TgvalidatordGetICPNeuronInfoReply value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordGetICPNeuronInfoReply read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordGetICPNeuronInfoReply given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordGetICPNeuronInfoReply
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordGetICPNeuronInfoReply
   */
  public static TgvalidatordGetICPNeuronInfoReply fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordGetICPNeuronInfoReply.class);
  }

  /**
   * Convert an instance of TgvalidatordGetICPNeuronInfoReply to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

