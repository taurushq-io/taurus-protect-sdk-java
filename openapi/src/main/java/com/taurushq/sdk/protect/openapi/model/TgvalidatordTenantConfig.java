/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.taurushq.sdk.protect.openapi.model.TenantConfigNFTMinting;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordTenantConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordTenantConfig {
  public static final String SERIALIZED_NAME_SUPER_ADMIN_MINIMUM_SIGNATURES = "superAdminMinimumSignatures";
  @SerializedName(SERIALIZED_NAME_SUPER_ADMIN_MINIMUM_SIGNATURES)
  private String superAdminMinimumSignatures;

  public static final String SERIALIZED_NAME_BASE_CURRENCY = "baseCurrency";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY)
  private String baseCurrency;

  public static final String SERIALIZED_NAME_IS_M_F_A_MANDATORY = "isMFAMandatory";
  @SerializedName(SERIALIZED_NAME_IS_M_F_A_MANDATORY)
  private Boolean isMFAMandatory;

  public static final String SERIALIZED_NAME_EXCLUDE_CONTAINER = "excludeContainer";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_CONTAINER)
  private Boolean excludeContainer;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_FEE_LIMIT_FACTOR = "feeLimitFactor";
  @SerializedName(SERIALIZED_NAME_FEE_LIMIT_FACTOR)
  private Float feeLimitFactor;

  public static final String SERIALIZED_NAME_PROTECT_ENGINE_VERSION = "protectEngineVersion";
  @SerializedName(SERIALIZED_NAME_PROTECT_ENGINE_VERSION)
  private String protectEngineVersion;

  public static final String SERIALIZED_NAME_RESTRICT_SOURCES_FOR_WHITELISTED_ADDRESSES = "restrictSourcesForWhitelistedAddresses";
  @SerializedName(SERIALIZED_NAME_RESTRICT_SOURCES_FOR_WHITELISTED_ADDRESSES)
  private Boolean restrictSourcesForWhitelistedAddresses;

  public static final String SERIALIZED_NAME_NFT_MINTING = "nftMinting";
  @SerializedName(SERIALIZED_NAME_NFT_MINTING)
  private TenantConfigNFTMinting nftMinting;

  public static final String SERIALIZED_NAME_IS_PROTECT_ENGINE_COLD = "isProtectEngineCold";
  @SerializedName(SERIALIZED_NAME_IS_PROTECT_ENGINE_COLD)
  private Boolean isProtectEngineCold;

  public static final String SERIALIZED_NAME_IS_COLD_PROTECT_ENGINE_OFFLINE = "isColdProtectEngineOffline";
  @SerializedName(SERIALIZED_NAME_IS_COLD_PROTECT_ENGINE_OFFLINE)
  private Boolean isColdProtectEngineOffline;

  public TgvalidatordTenantConfig() {
  }

  public TgvalidatordTenantConfig superAdminMinimumSignatures(String superAdminMinimumSignatures) {
    this.superAdminMinimumSignatures = superAdminMinimumSignatures;
    return this;
  }

  /**
   * Get superAdminMinimumSignatures
   * @return superAdminMinimumSignatures
   */
  @javax.annotation.Nullable
  public String getSuperAdminMinimumSignatures() {
    return superAdminMinimumSignatures;
  }

  public void setSuperAdminMinimumSignatures(String superAdminMinimumSignatures) {
    this.superAdminMinimumSignatures = superAdminMinimumSignatures;
  }


  public TgvalidatordTenantConfig baseCurrency(String baseCurrency) {
    this.baseCurrency = baseCurrency;
    return this;
  }

  /**
   * Get baseCurrency
   * @return baseCurrency
   */
  @javax.annotation.Nullable
  public String getBaseCurrency() {
    return baseCurrency;
  }

  public void setBaseCurrency(String baseCurrency) {
    this.baseCurrency = baseCurrency;
  }


  public TgvalidatordTenantConfig isMFAMandatory(Boolean isMFAMandatory) {
    this.isMFAMandatory = isMFAMandatory;
    return this;
  }

  /**
   * Get isMFAMandatory
   * @return isMFAMandatory
   */
  @javax.annotation.Nullable
  public Boolean getIsMFAMandatory() {
    return isMFAMandatory;
  }

  public void setIsMFAMandatory(Boolean isMFAMandatory) {
    this.isMFAMandatory = isMFAMandatory;
  }


  public TgvalidatordTenantConfig excludeContainer(Boolean excludeContainer) {
    this.excludeContainer = excludeContainer;
    return this;
  }

  /**
   * Get excludeContainer
   * @return excludeContainer
   */
  @javax.annotation.Nullable
  public Boolean getExcludeContainer() {
    return excludeContainer;
  }

  public void setExcludeContainer(Boolean excludeContainer) {
    this.excludeContainer = excludeContainer;
  }


  public TgvalidatordTenantConfig tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public TgvalidatordTenantConfig feeLimitFactor(Float feeLimitFactor) {
    this.feeLimitFactor = feeLimitFactor;
    return this;
  }

  /**
   * Get feeLimitFactor
   * @return feeLimitFactor
   */
  @javax.annotation.Nullable
  public Float getFeeLimitFactor() {
    return feeLimitFactor;
  }

  public void setFeeLimitFactor(Float feeLimitFactor) {
    this.feeLimitFactor = feeLimitFactor;
  }


  public TgvalidatordTenantConfig protectEngineVersion(String protectEngineVersion) {
    this.protectEngineVersion = protectEngineVersion;
    return this;
  }

  /**
   * Get protectEngineVersion
   * @return protectEngineVersion
   */
  @javax.annotation.Nullable
  public String getProtectEngineVersion() {
    return protectEngineVersion;
  }

  public void setProtectEngineVersion(String protectEngineVersion) {
    this.protectEngineVersion = protectEngineVersion;
  }


  public TgvalidatordTenantConfig restrictSourcesForWhitelistedAddresses(Boolean restrictSourcesForWhitelistedAddresses) {
    this.restrictSourcesForWhitelistedAddresses = restrictSourcesForWhitelistedAddresses;
    return this;
  }

  /**
   * Get restrictSourcesForWhitelistedAddresses
   * @return restrictSourcesForWhitelistedAddresses
   */
  @javax.annotation.Nullable
  public Boolean getRestrictSourcesForWhitelistedAddresses() {
    return restrictSourcesForWhitelistedAddresses;
  }

  public void setRestrictSourcesForWhitelistedAddresses(Boolean restrictSourcesForWhitelistedAddresses) {
    this.restrictSourcesForWhitelistedAddresses = restrictSourcesForWhitelistedAddresses;
  }


  public TgvalidatordTenantConfig nftMinting(TenantConfigNFTMinting nftMinting) {
    this.nftMinting = nftMinting;
    return this;
  }

  /**
   * Get nftMinting
   * @return nftMinting
   */
  @javax.annotation.Nullable
  public TenantConfigNFTMinting getNftMinting() {
    return nftMinting;
  }

  public void setNftMinting(TenantConfigNFTMinting nftMinting) {
    this.nftMinting = nftMinting;
  }


  public TgvalidatordTenantConfig isProtectEngineCold(Boolean isProtectEngineCold) {
    this.isProtectEngineCold = isProtectEngineCold;
    return this;
  }

  /**
   * Get isProtectEngineCold
   * @return isProtectEngineCold
   */
  @javax.annotation.Nullable
  public Boolean getIsProtectEngineCold() {
    return isProtectEngineCold;
  }

  public void setIsProtectEngineCold(Boolean isProtectEngineCold) {
    this.isProtectEngineCold = isProtectEngineCold;
  }


  public TgvalidatordTenantConfig isColdProtectEngineOffline(Boolean isColdProtectEngineOffline) {
    this.isColdProtectEngineOffline = isColdProtectEngineOffline;
    return this;
  }

  /**
   * Get isColdProtectEngineOffline
   * @return isColdProtectEngineOffline
   */
  @javax.annotation.Nullable
  public Boolean getIsColdProtectEngineOffline() {
    return isColdProtectEngineOffline;
  }

  public void setIsColdProtectEngineOffline(Boolean isColdProtectEngineOffline) {
    this.isColdProtectEngineOffline = isColdProtectEngineOffline;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordTenantConfig tgvalidatordTenantConfig = (TgvalidatordTenantConfig) o;
    return Objects.equals(this.superAdminMinimumSignatures, tgvalidatordTenantConfig.superAdminMinimumSignatures) &&
        Objects.equals(this.baseCurrency, tgvalidatordTenantConfig.baseCurrency) &&
        Objects.equals(this.isMFAMandatory, tgvalidatordTenantConfig.isMFAMandatory) &&
        Objects.equals(this.excludeContainer, tgvalidatordTenantConfig.excludeContainer) &&
        Objects.equals(this.tenantId, tgvalidatordTenantConfig.tenantId) &&
        Objects.equals(this.feeLimitFactor, tgvalidatordTenantConfig.feeLimitFactor) &&
        Objects.equals(this.protectEngineVersion, tgvalidatordTenantConfig.protectEngineVersion) &&
        Objects.equals(this.restrictSourcesForWhitelistedAddresses, tgvalidatordTenantConfig.restrictSourcesForWhitelistedAddresses) &&
        Objects.equals(this.nftMinting, tgvalidatordTenantConfig.nftMinting) &&
        Objects.equals(this.isProtectEngineCold, tgvalidatordTenantConfig.isProtectEngineCold) &&
        Objects.equals(this.isColdProtectEngineOffline, tgvalidatordTenantConfig.isColdProtectEngineOffline);
  }

  @Override
  public int hashCode() {
    return Objects.hash(superAdminMinimumSignatures, baseCurrency, isMFAMandatory, excludeContainer, tenantId, feeLimitFactor, protectEngineVersion, restrictSourcesForWhitelistedAddresses, nftMinting, isProtectEngineCold, isColdProtectEngineOffline);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordTenantConfig {\n");
    sb.append("    superAdminMinimumSignatures: ").append(toIndentedString(superAdminMinimumSignatures)).append("\n");
    sb.append("    baseCurrency: ").append(toIndentedString(baseCurrency)).append("\n");
    sb.append("    isMFAMandatory: ").append(toIndentedString(isMFAMandatory)).append("\n");
    sb.append("    excludeContainer: ").append(toIndentedString(excludeContainer)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    feeLimitFactor: ").append(toIndentedString(feeLimitFactor)).append("\n");
    sb.append("    protectEngineVersion: ").append(toIndentedString(protectEngineVersion)).append("\n");
    sb.append("    restrictSourcesForWhitelistedAddresses: ").append(toIndentedString(restrictSourcesForWhitelistedAddresses)).append("\n");
    sb.append("    nftMinting: ").append(toIndentedString(nftMinting)).append("\n");
    sb.append("    isProtectEngineCold: ").append(toIndentedString(isProtectEngineCold)).append("\n");
    sb.append("    isColdProtectEngineOffline: ").append(toIndentedString(isColdProtectEngineOffline)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("superAdminMinimumSignatures");
    openapiFields.add("baseCurrency");
    openapiFields.add("isMFAMandatory");
    openapiFields.add("excludeContainer");
    openapiFields.add("tenantId");
    openapiFields.add("feeLimitFactor");
    openapiFields.add("protectEngineVersion");
    openapiFields.add("restrictSourcesForWhitelistedAddresses");
    openapiFields.add("nftMinting");
    openapiFields.add("isProtectEngineCold");
    openapiFields.add("isColdProtectEngineOffline");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordTenantConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordTenantConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordTenantConfig is not found in the empty JSON string", TgvalidatordTenantConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordTenantConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordTenantConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("superAdminMinimumSignatures") != null && !jsonObj.get("superAdminMinimumSignatures").isJsonNull()) && !jsonObj.get("superAdminMinimumSignatures").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `superAdminMinimumSignatures` to be a primitive type in the JSON string but got `%s`", jsonObj.get("superAdminMinimumSignatures").toString()));
      }
      if ((jsonObj.get("baseCurrency") != null && !jsonObj.get("baseCurrency").isJsonNull()) && !jsonObj.get("baseCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseCurrency").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("protectEngineVersion") != null && !jsonObj.get("protectEngineVersion").isJsonNull()) && !jsonObj.get("protectEngineVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protectEngineVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protectEngineVersion").toString()));
      }
      // validate the optional field `nftMinting`
      if (jsonObj.get("nftMinting") != null && !jsonObj.get("nftMinting").isJsonNull()) {
        TenantConfigNFTMinting.validateJsonElement(jsonObj.get("nftMinting"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordTenantConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordTenantConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordTenantConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordTenantConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordTenantConfig>() {
           @Override
           public void write(JsonWriter out, TgvalidatordTenantConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordTenantConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordTenantConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordTenantConfig
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordTenantConfig
   */
  public static TgvalidatordTenantConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordTenantConfig.class);
  }

  /**
   * Convert an instance of TgvalidatordTenantConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

