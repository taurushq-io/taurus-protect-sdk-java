/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordGetADAStakePoolInfoReply
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordGetADAStakePoolInfoReply {
  public static final String SERIALIZED_NAME_PLEDGE = "pledge";
  @SerializedName(SERIALIZED_NAME_PLEDGE)
  private String pledge;

  public static final String SERIALIZED_NAME_MARGIN = "margin";
  @SerializedName(SERIALIZED_NAME_MARGIN)
  private Float margin;

  public static final String SERIALIZED_NAME_FIXED_COST = "fixedCost";
  @SerializedName(SERIALIZED_NAME_FIXED_COST)
  private String fixedCost;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_ACTIVE_STAKE = "activeStake";
  @SerializedName(SERIALIZED_NAME_ACTIVE_STAKE)
  private String activeStake;

  public static final String SERIALIZED_NAME_EPOCH = "epoch";
  @SerializedName(SERIALIZED_NAME_EPOCH)
  private String epoch;

  public TgvalidatordGetADAStakePoolInfoReply() {
  }

  public TgvalidatordGetADAStakePoolInfoReply pledge(String pledge) {
    this.pledge = pledge;
    return this;
  }

  /**
   * Get pledge
   * @return pledge
   */
  @javax.annotation.Nullable
  public String getPledge() {
    return pledge;
  }

  public void setPledge(String pledge) {
    this.pledge = pledge;
  }


  public TgvalidatordGetADAStakePoolInfoReply margin(Float margin) {
    this.margin = margin;
    return this;
  }

  /**
   * Get margin
   * @return margin
   */
  @javax.annotation.Nullable
  public Float getMargin() {
    return margin;
  }

  public void setMargin(Float margin) {
    this.margin = margin;
  }


  public TgvalidatordGetADAStakePoolInfoReply fixedCost(String fixedCost) {
    this.fixedCost = fixedCost;
    return this;
  }

  /**
   * Get fixedCost
   * @return fixedCost
   */
  @javax.annotation.Nullable
  public String getFixedCost() {
    return fixedCost;
  }

  public void setFixedCost(String fixedCost) {
    this.fixedCost = fixedCost;
  }


  public TgvalidatordGetADAStakePoolInfoReply url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public TgvalidatordGetADAStakePoolInfoReply activeStake(String activeStake) {
    this.activeStake = activeStake;
    return this;
  }

  /**
   * Get activeStake
   * @return activeStake
   */
  @javax.annotation.Nullable
  public String getActiveStake() {
    return activeStake;
  }

  public void setActiveStake(String activeStake) {
    this.activeStake = activeStake;
  }


  public TgvalidatordGetADAStakePoolInfoReply epoch(String epoch) {
    this.epoch = epoch;
    return this;
  }

  /**
   * Get epoch
   * @return epoch
   */
  @javax.annotation.Nullable
  public String getEpoch() {
    return epoch;
  }

  public void setEpoch(String epoch) {
    this.epoch = epoch;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordGetADAStakePoolInfoReply tgvalidatordGetADAStakePoolInfoReply = (TgvalidatordGetADAStakePoolInfoReply) o;
    return Objects.equals(this.pledge, tgvalidatordGetADAStakePoolInfoReply.pledge) &&
        Objects.equals(this.margin, tgvalidatordGetADAStakePoolInfoReply.margin) &&
        Objects.equals(this.fixedCost, tgvalidatordGetADAStakePoolInfoReply.fixedCost) &&
        Objects.equals(this.url, tgvalidatordGetADAStakePoolInfoReply.url) &&
        Objects.equals(this.activeStake, tgvalidatordGetADAStakePoolInfoReply.activeStake) &&
        Objects.equals(this.epoch, tgvalidatordGetADAStakePoolInfoReply.epoch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pledge, margin, fixedCost, url, activeStake, epoch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordGetADAStakePoolInfoReply {\n");
    sb.append("    pledge: ").append(toIndentedString(pledge)).append("\n");
    sb.append("    margin: ").append(toIndentedString(margin)).append("\n");
    sb.append("    fixedCost: ").append(toIndentedString(fixedCost)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    activeStake: ").append(toIndentedString(activeStake)).append("\n");
    sb.append("    epoch: ").append(toIndentedString(epoch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pledge");
    openapiFields.add("margin");
    openapiFields.add("fixedCost");
    openapiFields.add("url");
    openapiFields.add("activeStake");
    openapiFields.add("epoch");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordGetADAStakePoolInfoReply
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordGetADAStakePoolInfoReply.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordGetADAStakePoolInfoReply is not found in the empty JSON string", TgvalidatordGetADAStakePoolInfoReply.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordGetADAStakePoolInfoReply.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordGetADAStakePoolInfoReply` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pledge") != null && !jsonObj.get("pledge").isJsonNull()) && !jsonObj.get("pledge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pledge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pledge").toString()));
      }
      if ((jsonObj.get("fixedCost") != null && !jsonObj.get("fixedCost").isJsonNull()) && !jsonObj.get("fixedCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixedCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixedCost").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("activeStake") != null && !jsonObj.get("activeStake").isJsonNull()) && !jsonObj.get("activeStake").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeStake` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeStake").toString()));
      }
      if ((jsonObj.get("epoch") != null && !jsonObj.get("epoch").isJsonNull()) && !jsonObj.get("epoch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `epoch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("epoch").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordGetADAStakePoolInfoReply.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordGetADAStakePoolInfoReply' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordGetADAStakePoolInfoReply> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordGetADAStakePoolInfoReply.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordGetADAStakePoolInfoReply>() {
           @Override
           public void write(JsonWriter out, TgvalidatordGetADAStakePoolInfoReply value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordGetADAStakePoolInfoReply read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordGetADAStakePoolInfoReply given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordGetADAStakePoolInfoReply
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordGetADAStakePoolInfoReply
   */
  public static TgvalidatordGetADAStakePoolInfoReply fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordGetADAStakePoolInfoReply.class);
  }

  /**
   * Convert an instance of TgvalidatordGetADAStakePoolInfoReply to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

