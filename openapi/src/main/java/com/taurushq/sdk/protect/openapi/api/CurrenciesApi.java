/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.api;

import com.taurushq.sdk.protect.openapi.ApiCallback;
import com.taurushq.sdk.protect.openapi.ApiClient;
import com.taurushq.sdk.protect.openapi.ApiException;
import com.taurushq.sdk.protect.openapi.ApiResponse;
import com.taurushq.sdk.protect.openapi.Configuration;
import com.taurushq.sdk.protect.openapi.Pair;
import com.taurushq.sdk.protect.openapi.ProgressRequestBody;
import com.taurushq.sdk.protect.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.taurushq.sdk.protect.openapi.model.GooglerpcStatus;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetBaseCurrencyReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetCurrenciesReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetCurrencyReply;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CurrenciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CurrenciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CurrenciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for walletServiceGetBaseCurrency
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetBaseCurrencyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/currencies/base";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceGetBaseCurrencyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return walletServiceGetBaseCurrencyCall(_callback);

    }

    /**
     * Get base currency
     * This endpoint returns the configured base currency (CHF, EUR or USD...)
     * @return TgvalidatordGetBaseCurrencyReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordGetBaseCurrencyReply walletServiceGetBaseCurrency() throws ApiException {
        ApiResponse<TgvalidatordGetBaseCurrencyReply> localVarResp = walletServiceGetBaseCurrencyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get base currency
     * This endpoint returns the configured base currency (CHF, EUR or USD...)
     * @return ApiResponse&lt;TgvalidatordGetBaseCurrencyReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordGetBaseCurrencyReply> walletServiceGetBaseCurrencyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = walletServiceGetBaseCurrencyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetBaseCurrencyReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get base currency (asynchronously)
     * This endpoint returns the configured base currency (CHF, EUR or USD...)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetBaseCurrencyAsync(final ApiCallback<TgvalidatordGetBaseCurrencyReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceGetBaseCurrencyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetBaseCurrencyReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceGetCurrencies
     * @param showDisabled Set this parameter to true to get all currencies, including currencies disabled by business rules. (optional)
     * @param includeLogo Currency logos are omitted by default. Set this to true to include them when applicable. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetCurrenciesCall(Boolean showDisabled, Boolean includeLogo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (showDisabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showDisabled", showDisabled));
        }

        if (includeLogo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLogo", includeLogo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceGetCurrenciesValidateBeforeCall(Boolean showDisabled, Boolean includeLogo, final ApiCallback _callback) throws ApiException {
        return walletServiceGetCurrenciesCall(showDisabled, includeLogo, _callback);

    }

    /**
     * List currencies
     * This endpoint returns a list of currencies
     * @param showDisabled Set this parameter to true to get all currencies, including currencies disabled by business rules. (optional)
     * @param includeLogo Currency logos are omitted by default. Set this to true to include them when applicable. (optional)
     * @return TgvalidatordGetCurrenciesReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordGetCurrenciesReply walletServiceGetCurrencies(Boolean showDisabled, Boolean includeLogo) throws ApiException {
        ApiResponse<TgvalidatordGetCurrenciesReply> localVarResp = walletServiceGetCurrenciesWithHttpInfo(showDisabled, includeLogo);
        return localVarResp.getData();
    }

    /**
     * List currencies
     * This endpoint returns a list of currencies
     * @param showDisabled Set this parameter to true to get all currencies, including currencies disabled by business rules. (optional)
     * @param includeLogo Currency logos are omitted by default. Set this to true to include them when applicable. (optional)
     * @return ApiResponse&lt;TgvalidatordGetCurrenciesReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordGetCurrenciesReply> walletServiceGetCurrenciesWithHttpInfo(Boolean showDisabled, Boolean includeLogo) throws ApiException {
        okhttp3.Call localVarCall = walletServiceGetCurrenciesValidateBeforeCall(showDisabled, includeLogo, null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetCurrenciesReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List currencies (asynchronously)
     * This endpoint returns a list of currencies
     * @param showDisabled Set this parameter to true to get all currencies, including currencies disabled by business rules. (optional)
     * @param includeLogo Currency logos are omitted by default. Set this to true to include them when applicable. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetCurrenciesAsync(Boolean showDisabled, Boolean includeLogo, final ApiCallback<TgvalidatordGetCurrenciesReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceGetCurrenciesValidateBeforeCall(showDisabled, includeLogo, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetCurrenciesReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceGetCurrency
     * @param uniqueCurrencyFilterBlockchain  (required)
     * @param uniqueCurrencyFilterNetwork  (required)
     * @param showDisabled Set this parameter to true to get a currency even if it is disabled by business rules. (optional)
     * @param uniqueCurrencyFilterTokenContractAddress If this parameter is set, the currency returned will be a token with the specified contract address. If not set, the currency returned will be the native currency of the blockchain. (optional)
     * @param uniqueCurrencyFilterTokenID For some blockchains (ex. ALGO, XTZ) a tokenContractAddress might contain multiple assets. The tokenID is used to differentiate between those assets. If not set, the currency returned won&#39;t have any tokenID defined. (optional)
     * @param currencyID  (optional)
     * @param includeLogo Currency logos are omitted by default. Set this to true to include them when applicable. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetCurrencyCall(String uniqueCurrencyFilterBlockchain, String uniqueCurrencyFilterNetwork, Boolean showDisabled, String uniqueCurrencyFilterTokenContractAddress, String uniqueCurrencyFilterTokenID, String currencyID, Boolean includeLogo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/currency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (showDisabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showDisabled", showDisabled));
        }

        if (uniqueCurrencyFilterBlockchain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uniqueCurrencyFilter.blockchain", uniqueCurrencyFilterBlockchain));
        }

        if (uniqueCurrencyFilterNetwork != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uniqueCurrencyFilter.network", uniqueCurrencyFilterNetwork));
        }

        if (uniqueCurrencyFilterTokenContractAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uniqueCurrencyFilter.tokenContractAddress", uniqueCurrencyFilterTokenContractAddress));
        }

        if (uniqueCurrencyFilterTokenID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uniqueCurrencyFilter.tokenID", uniqueCurrencyFilterTokenID));
        }

        if (currencyID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencyID", currencyID));
        }

        if (includeLogo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLogo", includeLogo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceGetCurrencyValidateBeforeCall(String uniqueCurrencyFilterBlockchain, String uniqueCurrencyFilterNetwork, Boolean showDisabled, String uniqueCurrencyFilterTokenContractAddress, String uniqueCurrencyFilterTokenID, String currencyID, Boolean includeLogo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uniqueCurrencyFilterBlockchain' is set
        if (uniqueCurrencyFilterBlockchain == null) {
            throw new ApiException("Missing the required parameter 'uniqueCurrencyFilterBlockchain' when calling walletServiceGetCurrency(Async)");
        }

        // verify the required parameter 'uniqueCurrencyFilterNetwork' is set
        if (uniqueCurrencyFilterNetwork == null) {
            throw new ApiException("Missing the required parameter 'uniqueCurrencyFilterNetwork' when calling walletServiceGetCurrency(Async)");
        }

        return walletServiceGetCurrencyCall(uniqueCurrencyFilterBlockchain, uniqueCurrencyFilterNetwork, showDisabled, uniqueCurrencyFilterTokenContractAddress, uniqueCurrencyFilterTokenID, currencyID, includeLogo, _callback);

    }

    /**
     * Get currency
     * This endpoint returns a currency. The parameters need to point to a unique currency.
     * @param uniqueCurrencyFilterBlockchain  (required)
     * @param uniqueCurrencyFilterNetwork  (required)
     * @param showDisabled Set this parameter to true to get a currency even if it is disabled by business rules. (optional)
     * @param uniqueCurrencyFilterTokenContractAddress If this parameter is set, the currency returned will be a token with the specified contract address. If not set, the currency returned will be the native currency of the blockchain. (optional)
     * @param uniqueCurrencyFilterTokenID For some blockchains (ex. ALGO, XTZ) a tokenContractAddress might contain multiple assets. The tokenID is used to differentiate between those assets. If not set, the currency returned won&#39;t have any tokenID defined. (optional)
     * @param currencyID  (optional)
     * @param includeLogo Currency logos are omitted by default. Set this to true to include them when applicable. (optional)
     * @return TgvalidatordGetCurrencyReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordGetCurrencyReply walletServiceGetCurrency(String uniqueCurrencyFilterBlockchain, String uniqueCurrencyFilterNetwork, Boolean showDisabled, String uniqueCurrencyFilterTokenContractAddress, String uniqueCurrencyFilterTokenID, String currencyID, Boolean includeLogo) throws ApiException {
        ApiResponse<TgvalidatordGetCurrencyReply> localVarResp = walletServiceGetCurrencyWithHttpInfo(uniqueCurrencyFilterBlockchain, uniqueCurrencyFilterNetwork, showDisabled, uniqueCurrencyFilterTokenContractAddress, uniqueCurrencyFilterTokenID, currencyID, includeLogo);
        return localVarResp.getData();
    }

    /**
     * Get currency
     * This endpoint returns a currency. The parameters need to point to a unique currency.
     * @param uniqueCurrencyFilterBlockchain  (required)
     * @param uniqueCurrencyFilterNetwork  (required)
     * @param showDisabled Set this parameter to true to get a currency even if it is disabled by business rules. (optional)
     * @param uniqueCurrencyFilterTokenContractAddress If this parameter is set, the currency returned will be a token with the specified contract address. If not set, the currency returned will be the native currency of the blockchain. (optional)
     * @param uniqueCurrencyFilterTokenID For some blockchains (ex. ALGO, XTZ) a tokenContractAddress might contain multiple assets. The tokenID is used to differentiate between those assets. If not set, the currency returned won&#39;t have any tokenID defined. (optional)
     * @param currencyID  (optional)
     * @param includeLogo Currency logos are omitted by default. Set this to true to include them when applicable. (optional)
     * @return ApiResponse&lt;TgvalidatordGetCurrencyReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordGetCurrencyReply> walletServiceGetCurrencyWithHttpInfo(String uniqueCurrencyFilterBlockchain, String uniqueCurrencyFilterNetwork, Boolean showDisabled, String uniqueCurrencyFilterTokenContractAddress, String uniqueCurrencyFilterTokenID, String currencyID, Boolean includeLogo) throws ApiException {
        okhttp3.Call localVarCall = walletServiceGetCurrencyValidateBeforeCall(uniqueCurrencyFilterBlockchain, uniqueCurrencyFilterNetwork, showDisabled, uniqueCurrencyFilterTokenContractAddress, uniqueCurrencyFilterTokenID, currencyID, includeLogo, null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetCurrencyReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get currency (asynchronously)
     * This endpoint returns a currency. The parameters need to point to a unique currency.
     * @param uniqueCurrencyFilterBlockchain  (required)
     * @param uniqueCurrencyFilterNetwork  (required)
     * @param showDisabled Set this parameter to true to get a currency even if it is disabled by business rules. (optional)
     * @param uniqueCurrencyFilterTokenContractAddress If this parameter is set, the currency returned will be a token with the specified contract address. If not set, the currency returned will be the native currency of the blockchain. (optional)
     * @param uniqueCurrencyFilterTokenID For some blockchains (ex. ALGO, XTZ) a tokenContractAddress might contain multiple assets. The tokenID is used to differentiate between those assets. If not set, the currency returned won&#39;t have any tokenID defined. (optional)
     * @param currencyID  (optional)
     * @param includeLogo Currency logos are omitted by default. Set this to true to include them when applicable. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetCurrencyAsync(String uniqueCurrencyFilterBlockchain, String uniqueCurrencyFilterNetwork, Boolean showDisabled, String uniqueCurrencyFilterTokenContractAddress, String uniqueCurrencyFilterTokenID, String currencyID, Boolean includeLogo, final ApiCallback<TgvalidatordGetCurrencyReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceGetCurrencyValidateBeforeCall(uniqueCurrencyFilterBlockchain, uniqueCurrencyFilterNetwork, showDisabled, uniqueCurrencyFilterTokenContractAddress, uniqueCurrencyFilterTokenID, currencyID, includeLogo, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetCurrencyReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
