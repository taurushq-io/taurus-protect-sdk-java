/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordBlockchainOpts;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordExtendedAmount;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordCreateOutgoingRequestRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordCreateOutgoingRequestRequest {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_FEE_LIMIT = "feeLimit";
  @SerializedName(SERIALIZED_NAME_FEE_LIMIT)
  private String feeLimit;

  public static final String SERIALIZED_NAME_FROM_WALLET_ID = "fromWalletId";
  @SerializedName(SERIALIZED_NAME_FROM_WALLET_ID)
  private String fromWalletId;

  public static final String SERIALIZED_NAME_FROM_ADDRESS_ID = "fromAddressId";
  @SerializedName(SERIALIZED_NAME_FROM_ADDRESS_ID)
  private String fromAddressId;

  public static final String SERIALIZED_NAME_TO_ADDRESS_ID = "toAddressId";
  @SerializedName(SERIALIZED_NAME_TO_ADDRESS_ID)
  private String toAddressId;

  public static final String SERIALIZED_NAME_TO_WHITELISTED_ADDRESS_ID = "toWhitelistedAddressId";
  @SerializedName(SERIALIZED_NAME_TO_WHITELISTED_ADDRESS_ID)
  private String toWhitelistedAddressId;

  public static final String SERIALIZED_NAME_GAS_LIMIT = "gasLimit";
  @SerializedName(SERIALIZED_NAME_GAS_LIMIT)
  private String gasLimit;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_USE_UNCONFIRMED_FUNDS = "useUnconfirmedFunds";
  @SerializedName(SERIALIZED_NAME_USE_UNCONFIRMED_FUNDS)
  private Boolean useUnconfirmedFunds;

  public static final String SERIALIZED_NAME_FEE_PAID_BY_RECEIVER = "feePaidByReceiver";
  @SerializedName(SERIALIZED_NAME_FEE_PAID_BY_RECEIVER)
  private Boolean feePaidByReceiver;

  public static final String SERIALIZED_NAME_TRANSACTION_COMMENT = "transactionComment";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_COMMENT)
  private String transactionComment;

  public static final String SERIALIZED_NAME_USE_ALL_FUNDS = "useAllFunds";
  @SerializedName(SERIALIZED_NAME_USE_ALL_FUNDS)
  private Boolean useAllFunds;

  public static final String SERIALIZED_NAME_FEE_PAYER_ID = "feePayerId";
  @SerializedName(SERIALIZED_NAME_FEE_PAYER_ID)
  private String feePayerId;

  public static final String SERIALIZED_NAME_EXTENDED_AMOUNT = "extendedAmount";
  @SerializedName(SERIALIZED_NAME_EXTENDED_AMOUNT)
  private TgvalidatordExtendedAmount extendedAmount;

  public static final String SERIALIZED_NAME_TRANSACTION_REFERENCE = "transactionReference";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_REFERENCE)
  private String transactionReference;

  public static final String SERIALIZED_NAME_EXTERNAL_REQUEST_ID = "externalRequestId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REQUEST_ID)
  private String externalRequestId;

  public static final String SERIALIZED_NAME_DESTINATION_ADDRESS_MEMO = "destinationAddressMemo";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ADDRESS_MEMO)
  private String destinationAddressMemo;

  public static final String SERIALIZED_NAME_OPTS = "opts";
  @SerializedName(SERIALIZED_NAME_OPTS)
  private TgvalidatordBlockchainOpts opts;

  public TgvalidatordCreateOutgoingRequestRequest() {
  }

  public TgvalidatordCreateOutgoingRequestRequest amount(String amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Amount in the smallest currency unit, based on the currency decimals. Example: 1500000000000000000 WEI (smallest ETH unit) corresponds to 1.5 ETH (ETH has 18 decimals places)
   * @return amount
   */
  @javax.annotation.Nonnull
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }


  public TgvalidatordCreateOutgoingRequestRequest feeLimit(String feeLimit) {
    this.feeLimit = feeLimit;
    return this;
  }

  /**
   * Get feeLimit
   * @return feeLimit
   */
  @javax.annotation.Nullable
  public String getFeeLimit() {
    return feeLimit;
  }

  public void setFeeLimit(String feeLimit) {
    this.feeLimit = feeLimit;
  }


  public TgvalidatordCreateOutgoingRequestRequest fromWalletId(String fromWalletId) {
    this.fromWalletId = fromWalletId;
    return this;
  }

  /**
   * A source should be specified. Either fromAddressId or fromWalletId. fromWalletId should be used to specify an omnibus wallet only.
   * @return fromWalletId
   */
  @javax.annotation.Nullable
  public String getFromWalletId() {
    return fromWalletId;
  }

  public void setFromWalletId(String fromWalletId) {
    this.fromWalletId = fromWalletId;
  }


  public TgvalidatordCreateOutgoingRequestRequest fromAddressId(String fromAddressId) {
    this.fromAddressId = fromAddressId;
    return this;
  }

  /**
   * A source should be specified. Either fromAddressId or fromWalletId. fromAddressId should be used for using an address as source.
   * @return fromAddressId
   */
  @javax.annotation.Nullable
  public String getFromAddressId() {
    return fromAddressId;
  }

  public void setFromAddressId(String fromAddressId) {
    this.fromAddressId = fromAddressId;
  }


  public TgvalidatordCreateOutgoingRequestRequest toAddressId(String toAddressId) {
    this.toAddressId = toAddressId;
    return this;
  }

  /**
   * A destination should be specified. Either toAddressId or toWhitelistedAddressId.
   * @return toAddressId
   */
  @javax.annotation.Nullable
  public String getToAddressId() {
    return toAddressId;
  }

  public void setToAddressId(String toAddressId) {
    this.toAddressId = toAddressId;
  }


  public TgvalidatordCreateOutgoingRequestRequest toWhitelistedAddressId(String toWhitelistedAddressId) {
    this.toWhitelistedAddressId = toWhitelistedAddressId;
    return this;
  }

  /**
   * A destination should be specified. Either toAddressId or toWhitelistedAddressId.
   * @return toWhitelistedAddressId
   */
  @javax.annotation.Nullable
  public String getToWhitelistedAddressId() {
    return toWhitelistedAddressId;
  }

  public void setToWhitelistedAddressId(String toWhitelistedAddressId) {
    this.toWhitelistedAddressId = toWhitelistedAddressId;
  }


  public TgvalidatordCreateOutgoingRequestRequest gasLimit(String gasLimit) {
    this.gasLimit = gasLimit;
    return this;
  }

  /**
   * Get gasLimit
   * @return gasLimit
   */
  @javax.annotation.Nullable
  public String getGasLimit() {
    return gasLimit;
  }

  public void setGasLimit(String gasLimit) {
    this.gasLimit = gasLimit;
  }


  public TgvalidatordCreateOutgoingRequestRequest comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * A reconciliation notes can be given when initiating a request and this will be included in transaction history.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public TgvalidatordCreateOutgoingRequestRequest useUnconfirmedFunds(Boolean useUnconfirmedFunds) {
    this.useUnconfirmedFunds = useUnconfirmedFunds;
    return this;
  }

  /**
   * Get useUnconfirmedFunds
   * @return useUnconfirmedFunds
   */
  @javax.annotation.Nullable
  public Boolean getUseUnconfirmedFunds() {
    return useUnconfirmedFunds;
  }

  public void setUseUnconfirmedFunds(Boolean useUnconfirmedFunds) {
    this.useUnconfirmedFunds = useUnconfirmedFunds;
  }


  public TgvalidatordCreateOutgoingRequestRequest feePaidByReceiver(Boolean feePaidByReceiver) {
    this.feePaidByReceiver = feePaidByReceiver;
    return this;
  }

  /**
   * Get feePaidByReceiver
   * @return feePaidByReceiver
   */
  @javax.annotation.Nullable
  public Boolean getFeePaidByReceiver() {
    return feePaidByReceiver;
  }

  public void setFeePaidByReceiver(Boolean feePaidByReceiver) {
    this.feePaidByReceiver = feePaidByReceiver;
  }


  public TgvalidatordCreateOutgoingRequestRequest transactionComment(String transactionComment) {
    this.transactionComment = transactionComment;
    return this;
  }

  /**
   * Get transactionComment
   * @return transactionComment
   */
  @javax.annotation.Nullable
  public String getTransactionComment() {
    return transactionComment;
  }

  public void setTransactionComment(String transactionComment) {
    this.transactionComment = transactionComment;
  }


  public TgvalidatordCreateOutgoingRequestRequest useAllFunds(Boolean useAllFunds) {
    this.useAllFunds = useAllFunds;
    return this;
  }

  /**
   * If set to true, it will send all the funds from an address or from all the addresses of a wallet. If an address in a wallet can&#39;t pay the fees, it is skipped.
   * @return useAllFunds
   */
  @javax.annotation.Nullable
  public Boolean getUseAllFunds() {
    return useAllFunds;
  }

  public void setUseAllFunds(Boolean useAllFunds) {
    this.useAllFunds = useAllFunds;
  }


  public TgvalidatordCreateOutgoingRequestRequest feePayerId(String feePayerId) {
    this.feePayerId = feePayerId;
    return this;
  }

  /**
   * Get feePayerId
   * @return feePayerId
   */
  @javax.annotation.Nullable
  public String getFeePayerId() {
    return feePayerId;
  }

  public void setFeePayerId(String feePayerId) {
    this.feePayerId = feePayerId;
  }


  public TgvalidatordCreateOutgoingRequestRequest extendedAmount(TgvalidatordExtendedAmount extendedAmount) {
    this.extendedAmount = extendedAmount;
    return this;
  }

  /**
   * Get extendedAmount
   * @return extendedAmount
   */
  @javax.annotation.Nullable
  public TgvalidatordExtendedAmount getExtendedAmount() {
    return extendedAmount;
  }

  public void setExtendedAmount(TgvalidatordExtendedAmount extendedAmount) {
    this.extendedAmount = extendedAmount;
  }


  public TgvalidatordCreateOutgoingRequestRequest transactionReference(String transactionReference) {
    this.transactionReference = transactionReference;
    return this;
  }

  /**
   * DEPRECATED - use externalRequestId instead
   * @return transactionReference
   */
  @javax.annotation.Nullable
  public String getTransactionReference() {
    return transactionReference;
  }

  public void setTransactionReference(String transactionReference) {
    this.transactionReference = transactionReference;
  }


  public TgvalidatordCreateOutgoingRequestRequest externalRequestId(String externalRequestId) {
    this.externalRequestId = externalRequestId;
    return this;
  }

  /**
   * Identifier for the request in the user&#39;s system. This must be unique. Attempting to create a request with an existing externalRequestId will do nothing and return the originally created request
   * @return externalRequestId
   */
  @javax.annotation.Nullable
  public String getExternalRequestId() {
    return externalRequestId;
  }

  public void setExternalRequestId(String externalRequestId) {
    this.externalRequestId = externalRequestId;
  }


  public TgvalidatordCreateOutgoingRequestRequest destinationAddressMemo(String destinationAddressMemo) {
    this.destinationAddressMemo = destinationAddressMemo;
    return this;
  }

  /**
   * A memo can be specified if the destination is a whitelisted address on a blockchain supporting memos.
   * @return destinationAddressMemo
   */
  @javax.annotation.Nullable
  public String getDestinationAddressMemo() {
    return destinationAddressMemo;
  }

  public void setDestinationAddressMemo(String destinationAddressMemo) {
    this.destinationAddressMemo = destinationAddressMemo;
  }


  public TgvalidatordCreateOutgoingRequestRequest opts(TgvalidatordBlockchainOpts opts) {
    this.opts = opts;
    return this;
  }

  /**
   * Get opts
   * @return opts
   */
  @javax.annotation.Nullable
  public TgvalidatordBlockchainOpts getOpts() {
    return opts;
  }

  public void setOpts(TgvalidatordBlockchainOpts opts) {
    this.opts = opts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordCreateOutgoingRequestRequest tgvalidatordCreateOutgoingRequestRequest = (TgvalidatordCreateOutgoingRequestRequest) o;
    return Objects.equals(this.amount, tgvalidatordCreateOutgoingRequestRequest.amount) &&
        Objects.equals(this.feeLimit, tgvalidatordCreateOutgoingRequestRequest.feeLimit) &&
        Objects.equals(this.fromWalletId, tgvalidatordCreateOutgoingRequestRequest.fromWalletId) &&
        Objects.equals(this.fromAddressId, tgvalidatordCreateOutgoingRequestRequest.fromAddressId) &&
        Objects.equals(this.toAddressId, tgvalidatordCreateOutgoingRequestRequest.toAddressId) &&
        Objects.equals(this.toWhitelistedAddressId, tgvalidatordCreateOutgoingRequestRequest.toWhitelistedAddressId) &&
        Objects.equals(this.gasLimit, tgvalidatordCreateOutgoingRequestRequest.gasLimit) &&
        Objects.equals(this.comment, tgvalidatordCreateOutgoingRequestRequest.comment) &&
        Objects.equals(this.useUnconfirmedFunds, tgvalidatordCreateOutgoingRequestRequest.useUnconfirmedFunds) &&
        Objects.equals(this.feePaidByReceiver, tgvalidatordCreateOutgoingRequestRequest.feePaidByReceiver) &&
        Objects.equals(this.transactionComment, tgvalidatordCreateOutgoingRequestRequest.transactionComment) &&
        Objects.equals(this.useAllFunds, tgvalidatordCreateOutgoingRequestRequest.useAllFunds) &&
        Objects.equals(this.feePayerId, tgvalidatordCreateOutgoingRequestRequest.feePayerId) &&
        Objects.equals(this.extendedAmount, tgvalidatordCreateOutgoingRequestRequest.extendedAmount) &&
        Objects.equals(this.transactionReference, tgvalidatordCreateOutgoingRequestRequest.transactionReference) &&
        Objects.equals(this.externalRequestId, tgvalidatordCreateOutgoingRequestRequest.externalRequestId) &&
        Objects.equals(this.destinationAddressMemo, tgvalidatordCreateOutgoingRequestRequest.destinationAddressMemo) &&
        Objects.equals(this.opts, tgvalidatordCreateOutgoingRequestRequest.opts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, feeLimit, fromWalletId, fromAddressId, toAddressId, toWhitelistedAddressId, gasLimit, comment, useUnconfirmedFunds, feePaidByReceiver, transactionComment, useAllFunds, feePayerId, extendedAmount, transactionReference, externalRequestId, destinationAddressMemo, opts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordCreateOutgoingRequestRequest {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    feeLimit: ").append(toIndentedString(feeLimit)).append("\n");
    sb.append("    fromWalletId: ").append(toIndentedString(fromWalletId)).append("\n");
    sb.append("    fromAddressId: ").append(toIndentedString(fromAddressId)).append("\n");
    sb.append("    toAddressId: ").append(toIndentedString(toAddressId)).append("\n");
    sb.append("    toWhitelistedAddressId: ").append(toIndentedString(toWhitelistedAddressId)).append("\n");
    sb.append("    gasLimit: ").append(toIndentedString(gasLimit)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    useUnconfirmedFunds: ").append(toIndentedString(useUnconfirmedFunds)).append("\n");
    sb.append("    feePaidByReceiver: ").append(toIndentedString(feePaidByReceiver)).append("\n");
    sb.append("    transactionComment: ").append(toIndentedString(transactionComment)).append("\n");
    sb.append("    useAllFunds: ").append(toIndentedString(useAllFunds)).append("\n");
    sb.append("    feePayerId: ").append(toIndentedString(feePayerId)).append("\n");
    sb.append("    extendedAmount: ").append(toIndentedString(extendedAmount)).append("\n");
    sb.append("    transactionReference: ").append(toIndentedString(transactionReference)).append("\n");
    sb.append("    externalRequestId: ").append(toIndentedString(externalRequestId)).append("\n");
    sb.append("    destinationAddressMemo: ").append(toIndentedString(destinationAddressMemo)).append("\n");
    sb.append("    opts: ").append(toIndentedString(opts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("feeLimit");
    openapiFields.add("fromWalletId");
    openapiFields.add("fromAddressId");
    openapiFields.add("toAddressId");
    openapiFields.add("toWhitelistedAddressId");
    openapiFields.add("gasLimit");
    openapiFields.add("comment");
    openapiFields.add("useUnconfirmedFunds");
    openapiFields.add("feePaidByReceiver");
    openapiFields.add("transactionComment");
    openapiFields.add("useAllFunds");
    openapiFields.add("feePayerId");
    openapiFields.add("extendedAmount");
    openapiFields.add("transactionReference");
    openapiFields.add("externalRequestId");
    openapiFields.add("destinationAddressMemo");
    openapiFields.add("opts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordCreateOutgoingRequestRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordCreateOutgoingRequestRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordCreateOutgoingRequestRequest is not found in the empty JSON string", TgvalidatordCreateOutgoingRequestRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordCreateOutgoingRequestRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordCreateOutgoingRequestRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TgvalidatordCreateOutgoingRequestRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("feeLimit") != null && !jsonObj.get("feeLimit").isJsonNull()) && !jsonObj.get("feeLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feeLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feeLimit").toString()));
      }
      if ((jsonObj.get("fromWalletId") != null && !jsonObj.get("fromWalletId").isJsonNull()) && !jsonObj.get("fromWalletId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromWalletId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromWalletId").toString()));
      }
      if ((jsonObj.get("fromAddressId") != null && !jsonObj.get("fromAddressId").isJsonNull()) && !jsonObj.get("fromAddressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromAddressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromAddressId").toString()));
      }
      if ((jsonObj.get("toAddressId") != null && !jsonObj.get("toAddressId").isJsonNull()) && !jsonObj.get("toAddressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toAddressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toAddressId").toString()));
      }
      if ((jsonObj.get("toWhitelistedAddressId") != null && !jsonObj.get("toWhitelistedAddressId").isJsonNull()) && !jsonObj.get("toWhitelistedAddressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toWhitelistedAddressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toWhitelistedAddressId").toString()));
      }
      if ((jsonObj.get("gasLimit") != null && !jsonObj.get("gasLimit").isJsonNull()) && !jsonObj.get("gasLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gasLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gasLimit").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("transactionComment") != null && !jsonObj.get("transactionComment").isJsonNull()) && !jsonObj.get("transactionComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionComment").toString()));
      }
      if ((jsonObj.get("feePayerId") != null && !jsonObj.get("feePayerId").isJsonNull()) && !jsonObj.get("feePayerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feePayerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feePayerId").toString()));
      }
      // validate the optional field `extendedAmount`
      if (jsonObj.get("extendedAmount") != null && !jsonObj.get("extendedAmount").isJsonNull()) {
        TgvalidatordExtendedAmount.validateJsonElement(jsonObj.get("extendedAmount"));
      }
      if ((jsonObj.get("transactionReference") != null && !jsonObj.get("transactionReference").isJsonNull()) && !jsonObj.get("transactionReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionReference").toString()));
      }
      if ((jsonObj.get("externalRequestId") != null && !jsonObj.get("externalRequestId").isJsonNull()) && !jsonObj.get("externalRequestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalRequestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalRequestId").toString()));
      }
      if ((jsonObj.get("destinationAddressMemo") != null && !jsonObj.get("destinationAddressMemo").isJsonNull()) && !jsonObj.get("destinationAddressMemo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationAddressMemo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationAddressMemo").toString()));
      }
      // validate the optional field `opts`
      if (jsonObj.get("opts") != null && !jsonObj.get("opts").isJsonNull()) {
        TgvalidatordBlockchainOpts.validateJsonElement(jsonObj.get("opts"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordCreateOutgoingRequestRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordCreateOutgoingRequestRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordCreateOutgoingRequestRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordCreateOutgoingRequestRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordCreateOutgoingRequestRequest>() {
           @Override
           public void write(JsonWriter out, TgvalidatordCreateOutgoingRequestRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordCreateOutgoingRequestRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordCreateOutgoingRequestRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordCreateOutgoingRequestRequest
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordCreateOutgoingRequestRequest
   */
  public static TgvalidatordCreateOutgoingRequestRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordCreateOutgoingRequestRequest.class);
  }

  /**
   * Convert an instance of TgvalidatordCreateOutgoingRequestRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

