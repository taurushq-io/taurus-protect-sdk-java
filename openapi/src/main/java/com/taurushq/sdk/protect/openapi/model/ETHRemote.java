/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * ETHRemote
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class ETHRemote {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PRIVATE_KEY = "privateKey";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY)
  private String privateKey;

  public static final String SERIALIZED_NAME_FROM_ADDRESS_ID = "fromAddressId";
  @SerializedName(SERIALIZED_NAME_FROM_ADDRESS_ID)
  private String fromAddressId;

  public static final String SERIALIZED_NAME_FORWARDER_ADDRESS = "forwarderAddress";
  @SerializedName(SERIALIZED_NAME_FORWARDER_ADDRESS)
  private String forwarderAddress;

  public static final String SERIALIZED_NAME_FORWARDER_ADDRESS_ID = "forwarderAddressId";
  @SerializedName(SERIALIZED_NAME_FORWARDER_ADDRESS_ID)
  private String forwarderAddressId;

  public static final String SERIALIZED_NAME_CREATOR_ADDRESS = "creatorAddress";
  @SerializedName(SERIALIZED_NAME_CREATOR_ADDRESS)
  private String creatorAddress;

  public static final String SERIALIZED_NAME_CREATOR_ADDRESS_ID = "creatorAddressId";
  @SerializedName(SERIALIZED_NAME_CREATOR_ADDRESS_ID)
  private String creatorAddressId;

  public ETHRemote() {
  }

  public ETHRemote url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public ETHRemote username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public ETHRemote password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public ETHRemote privateKey(String privateKey) {
    this.privateKey = privateKey;
    return this;
  }

  /**
   * Get privateKey
   * @return privateKey
   */
  @javax.annotation.Nullable
  public String getPrivateKey() {
    return privateKey;
  }

  public void setPrivateKey(String privateKey) {
    this.privateKey = privateKey;
  }


  public ETHRemote fromAddressId(String fromAddressId) {
    this.fromAddressId = fromAddressId;
    return this;
  }

  /**
   * Get fromAddressId
   * @return fromAddressId
   */
  @javax.annotation.Nullable
  public String getFromAddressId() {
    return fromAddressId;
  }

  public void setFromAddressId(String fromAddressId) {
    this.fromAddressId = fromAddressId;
  }


  public ETHRemote forwarderAddress(String forwarderAddress) {
    this.forwarderAddress = forwarderAddress;
    return this;
  }

  /**
   * Get forwarderAddress
   * @return forwarderAddress
   */
  @javax.annotation.Nullable
  public String getForwarderAddress() {
    return forwarderAddress;
  }

  public void setForwarderAddress(String forwarderAddress) {
    this.forwarderAddress = forwarderAddress;
  }


  public ETHRemote forwarderAddressId(String forwarderAddressId) {
    this.forwarderAddressId = forwarderAddressId;
    return this;
  }

  /**
   * Get forwarderAddressId
   * @return forwarderAddressId
   */
  @javax.annotation.Nullable
  public String getForwarderAddressId() {
    return forwarderAddressId;
  }

  public void setForwarderAddressId(String forwarderAddressId) {
    this.forwarderAddressId = forwarderAddressId;
  }


  public ETHRemote creatorAddress(String creatorAddress) {
    this.creatorAddress = creatorAddress;
    return this;
  }

  /**
   * Get creatorAddress
   * @return creatorAddress
   */
  @javax.annotation.Nullable
  public String getCreatorAddress() {
    return creatorAddress;
  }

  public void setCreatorAddress(String creatorAddress) {
    this.creatorAddress = creatorAddress;
  }


  public ETHRemote creatorAddressId(String creatorAddressId) {
    this.creatorAddressId = creatorAddressId;
    return this;
  }

  /**
   * Get creatorAddressId
   * @return creatorAddressId
   */
  @javax.annotation.Nullable
  public String getCreatorAddressId() {
    return creatorAddressId;
  }

  public void setCreatorAddressId(String creatorAddressId) {
    this.creatorAddressId = creatorAddressId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ETHRemote eTHRemote = (ETHRemote) o;
    return Objects.equals(this.url, eTHRemote.url) &&
        Objects.equals(this.username, eTHRemote.username) &&
        Objects.equals(this.password, eTHRemote.password) &&
        Objects.equals(this.privateKey, eTHRemote.privateKey) &&
        Objects.equals(this.fromAddressId, eTHRemote.fromAddressId) &&
        Objects.equals(this.forwarderAddress, eTHRemote.forwarderAddress) &&
        Objects.equals(this.forwarderAddressId, eTHRemote.forwarderAddressId) &&
        Objects.equals(this.creatorAddress, eTHRemote.creatorAddress) &&
        Objects.equals(this.creatorAddressId, eTHRemote.creatorAddressId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, username, password, privateKey, fromAddressId, forwarderAddress, forwarderAddressId, creatorAddress, creatorAddressId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ETHRemote {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    privateKey: ").append(toIndentedString(privateKey)).append("\n");
    sb.append("    fromAddressId: ").append(toIndentedString(fromAddressId)).append("\n");
    sb.append("    forwarderAddress: ").append(toIndentedString(forwarderAddress)).append("\n");
    sb.append("    forwarderAddressId: ").append(toIndentedString(forwarderAddressId)).append("\n");
    sb.append("    creatorAddress: ").append(toIndentedString(creatorAddress)).append("\n");
    sb.append("    creatorAddressId: ").append(toIndentedString(creatorAddressId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("url");
    openapiFields.add("username");
    openapiFields.add("password");
    openapiFields.add("privateKey");
    openapiFields.add("fromAddressId");
    openapiFields.add("forwarderAddress");
    openapiFields.add("forwarderAddressId");
    openapiFields.add("creatorAddress");
    openapiFields.add("creatorAddressId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ETHRemote
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ETHRemote.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ETHRemote is not found in the empty JSON string", ETHRemote.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ETHRemote.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ETHRemote` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("privateKey") != null && !jsonObj.get("privateKey").isJsonNull()) && !jsonObj.get("privateKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateKey").toString()));
      }
      if ((jsonObj.get("fromAddressId") != null && !jsonObj.get("fromAddressId").isJsonNull()) && !jsonObj.get("fromAddressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromAddressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromAddressId").toString()));
      }
      if ((jsonObj.get("forwarderAddress") != null && !jsonObj.get("forwarderAddress").isJsonNull()) && !jsonObj.get("forwarderAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forwarderAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forwarderAddress").toString()));
      }
      if ((jsonObj.get("forwarderAddressId") != null && !jsonObj.get("forwarderAddressId").isJsonNull()) && !jsonObj.get("forwarderAddressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forwarderAddressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forwarderAddressId").toString()));
      }
      if ((jsonObj.get("creatorAddress") != null && !jsonObj.get("creatorAddress").isJsonNull()) && !jsonObj.get("creatorAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorAddress").toString()));
      }
      if ((jsonObj.get("creatorAddressId") != null && !jsonObj.get("creatorAddressId").isJsonNull()) && !jsonObj.get("creatorAddressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorAddressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorAddressId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ETHRemote.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ETHRemote' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ETHRemote> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ETHRemote.class));

       return (TypeAdapter<T>) new TypeAdapter<ETHRemote>() {
           @Override
           public void write(JsonWriter out, ETHRemote value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ETHRemote read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ETHRemote given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ETHRemote
   * @throws IOException if the JSON string is invalid with respect to ETHRemote
   */
  public static ETHRemote fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ETHRemote.class);
  }

  /**
   * Convert an instance of ETHRemote to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

