/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordApprovers;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordMetadata;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordSignedWhitelistedContractAddress;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordTrail;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordWhitelistedContractAddressAttribute;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordSignedWhitelistedContractAddressEnvelope
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordSignedWhitelistedContractAddressEnvelope {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_SIGNED_CONTRACT_ADDRESS = "signedContractAddress";
  @SerializedName(SERIALIZED_NAME_SIGNED_CONTRACT_ADDRESS)
  private TgvalidatordSignedWhitelistedContractAddress signedContractAddress;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private TgvalidatordMetadata metadata;

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_TRAILS = "trails";
  @SerializedName(SERIALIZED_NAME_TRAILS)
  private List<TgvalidatordTrail> trails = new ArrayList<>();

  public static final String SERIALIZED_NAME_RULES_CONTAINER = "rulesContainer";
  @SerializedName(SERIALIZED_NAME_RULES_CONTAINER)
  private String rulesContainer;

  public static final String SERIALIZED_NAME_RULE = "rule";
  @SerializedName(SERIALIZED_NAME_RULE)
  private String rule;

  public static final String SERIALIZED_NAME_APPROVERS = "approvers";
  @SerializedName(SERIALIZED_NAME_APPROVERS)
  private TgvalidatordApprovers approvers;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<TgvalidatordWhitelistedContractAddressAttribute> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_BLOCKCHAIN = "blockchain";
  @SerializedName(SERIALIZED_NAME_BLOCKCHAIN)
  private String blockchain;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public TgvalidatordSignedWhitelistedContractAddressEnvelope() {
  }

  public TgvalidatordSignedWhitelistedContractAddressEnvelope id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TgvalidatordSignedWhitelistedContractAddressEnvelope tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public TgvalidatordSignedWhitelistedContractAddressEnvelope signedContractAddress(TgvalidatordSignedWhitelistedContractAddress signedContractAddress) {
    this.signedContractAddress = signedContractAddress;
    return this;
  }

  /**
   * Get signedContractAddress
   * @return signedContractAddress
   */
  @javax.annotation.Nullable
  public TgvalidatordSignedWhitelistedContractAddress getSignedContractAddress() {
    return signedContractAddress;
  }

  public void setSignedContractAddress(TgvalidatordSignedWhitelistedContractAddress signedContractAddress) {
    this.signedContractAddress = signedContractAddress;
  }


  public TgvalidatordSignedWhitelistedContractAddressEnvelope metadata(TgvalidatordMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public TgvalidatordMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(TgvalidatordMetadata metadata) {
    this.metadata = metadata;
  }


  public TgvalidatordSignedWhitelistedContractAddressEnvelope action(String action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public TgvalidatordSignedWhitelistedContractAddressEnvelope trails(List<TgvalidatordTrail> trails) {
    this.trails = trails;
    return this;
  }

  public TgvalidatordSignedWhitelistedContractAddressEnvelope addTrailsItem(TgvalidatordTrail trailsItem) {
    if (this.trails == null) {
      this.trails = new ArrayList<>();
    }
    this.trails.add(trailsItem);
    return this;
  }

  /**
   * Get trails
   * @return trails
   */
  @javax.annotation.Nullable
  public List<TgvalidatordTrail> getTrails() {
    return trails;
  }

  public void setTrails(List<TgvalidatordTrail> trails) {
    this.trails = trails;
  }


  public TgvalidatordSignedWhitelistedContractAddressEnvelope rulesContainer(String rulesContainer) {
    this.rulesContainer = rulesContainer;
    return this;
  }

  /**
   * Get rulesContainer
   * @return rulesContainer
   */
  @javax.annotation.Nullable
  public String getRulesContainer() {
    return rulesContainer;
  }

  public void setRulesContainer(String rulesContainer) {
    this.rulesContainer = rulesContainer;
  }


  public TgvalidatordSignedWhitelistedContractAddressEnvelope rule(String rule) {
    this.rule = rule;
    return this;
  }

  /**
   * Get rule
   * @return rule
   */
  @javax.annotation.Nullable
  public String getRule() {
    return rule;
  }

  public void setRule(String rule) {
    this.rule = rule;
  }


  public TgvalidatordSignedWhitelistedContractAddressEnvelope approvers(TgvalidatordApprovers approvers) {
    this.approvers = approvers;
    return this;
  }

  /**
   * Get approvers
   * @return approvers
   */
  @javax.annotation.Nullable
  public TgvalidatordApprovers getApprovers() {
    return approvers;
  }

  public void setApprovers(TgvalidatordApprovers approvers) {
    this.approvers = approvers;
  }


  public TgvalidatordSignedWhitelistedContractAddressEnvelope attributes(List<TgvalidatordWhitelistedContractAddressAttribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public TgvalidatordSignedWhitelistedContractAddressEnvelope addAttributesItem(TgvalidatordWhitelistedContractAddressAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public List<TgvalidatordWhitelistedContractAddressAttribute> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<TgvalidatordWhitelistedContractAddressAttribute> attributes) {
    this.attributes = attributes;
  }


  public TgvalidatordSignedWhitelistedContractAddressEnvelope status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public TgvalidatordSignedWhitelistedContractAddressEnvelope blockchain(String blockchain) {
    this.blockchain = blockchain;
    return this;
  }

  /**
   * Get blockchain
   * @return blockchain
   */
  @javax.annotation.Nullable
  public String getBlockchain() {
    return blockchain;
  }

  public void setBlockchain(String blockchain) {
    this.blockchain = blockchain;
  }


  public TgvalidatordSignedWhitelistedContractAddressEnvelope network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Get network
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordSignedWhitelistedContractAddressEnvelope tgvalidatordSignedWhitelistedContractAddressEnvelope = (TgvalidatordSignedWhitelistedContractAddressEnvelope) o;
    return Objects.equals(this.id, tgvalidatordSignedWhitelistedContractAddressEnvelope.id) &&
        Objects.equals(this.tenantId, tgvalidatordSignedWhitelistedContractAddressEnvelope.tenantId) &&
        Objects.equals(this.signedContractAddress, tgvalidatordSignedWhitelistedContractAddressEnvelope.signedContractAddress) &&
        Objects.equals(this.metadata, tgvalidatordSignedWhitelistedContractAddressEnvelope.metadata) &&
        Objects.equals(this.action, tgvalidatordSignedWhitelistedContractAddressEnvelope.action) &&
        Objects.equals(this.trails, tgvalidatordSignedWhitelistedContractAddressEnvelope.trails) &&
        Objects.equals(this.rulesContainer, tgvalidatordSignedWhitelistedContractAddressEnvelope.rulesContainer) &&
        Objects.equals(this.rule, tgvalidatordSignedWhitelistedContractAddressEnvelope.rule) &&
        Objects.equals(this.approvers, tgvalidatordSignedWhitelistedContractAddressEnvelope.approvers) &&
        Objects.equals(this.attributes, tgvalidatordSignedWhitelistedContractAddressEnvelope.attributes) &&
        Objects.equals(this.status, tgvalidatordSignedWhitelistedContractAddressEnvelope.status) &&
        Objects.equals(this.blockchain, tgvalidatordSignedWhitelistedContractAddressEnvelope.blockchain) &&
        Objects.equals(this.network, tgvalidatordSignedWhitelistedContractAddressEnvelope.network);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, tenantId, signedContractAddress, metadata, action, trails, rulesContainer, rule, approvers, attributes, status, blockchain, network);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordSignedWhitelistedContractAddressEnvelope {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    signedContractAddress: ").append(toIndentedString(signedContractAddress)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    trails: ").append(toIndentedString(trails)).append("\n");
    sb.append("    rulesContainer: ").append(toIndentedString(rulesContainer)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    approvers: ").append(toIndentedString(approvers)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    blockchain: ").append(toIndentedString(blockchain)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("tenantId");
    openapiFields.add("signedContractAddress");
    openapiFields.add("metadata");
    openapiFields.add("action");
    openapiFields.add("trails");
    openapiFields.add("rulesContainer");
    openapiFields.add("rule");
    openapiFields.add("approvers");
    openapiFields.add("attributes");
    openapiFields.add("status");
    openapiFields.add("blockchain");
    openapiFields.add("network");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordSignedWhitelistedContractAddressEnvelope
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordSignedWhitelistedContractAddressEnvelope.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordSignedWhitelistedContractAddressEnvelope is not found in the empty JSON string", TgvalidatordSignedWhitelistedContractAddressEnvelope.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordSignedWhitelistedContractAddressEnvelope.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordSignedWhitelistedContractAddressEnvelope` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      // validate the optional field `signedContractAddress`
      if (jsonObj.get("signedContractAddress") != null && !jsonObj.get("signedContractAddress").isJsonNull()) {
        TgvalidatordSignedWhitelistedContractAddress.validateJsonElement(jsonObj.get("signedContractAddress"));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        TgvalidatordMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if (jsonObj.get("trails") != null && !jsonObj.get("trails").isJsonNull()) {
        JsonArray jsonArraytrails = jsonObj.getAsJsonArray("trails");
        if (jsonArraytrails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("trails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `trails` to be an array in the JSON string but got `%s`", jsonObj.get("trails").toString()));
          }

          // validate the optional field `trails` (array)
          for (int i = 0; i < jsonArraytrails.size(); i++) {
            TgvalidatordTrail.validateJsonElement(jsonArraytrails.get(i));
          };
        }
      }
      if ((jsonObj.get("rulesContainer") != null && !jsonObj.get("rulesContainer").isJsonNull()) && !jsonObj.get("rulesContainer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rulesContainer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rulesContainer").toString()));
      }
      if ((jsonObj.get("rule") != null && !jsonObj.get("rule").isJsonNull()) && !jsonObj.get("rule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rule").toString()));
      }
      // validate the optional field `approvers`
      if (jsonObj.get("approvers") != null && !jsonObj.get("approvers").isJsonNull()) {
        TgvalidatordApprovers.validateJsonElement(jsonObj.get("approvers"));
      }
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
          }

          // validate the optional field `attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            TgvalidatordWhitelistedContractAddressAttribute.validateJsonElement(jsonArrayattributes.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("blockchain") != null && !jsonObj.get("blockchain").isJsonNull()) && !jsonObj.get("blockchain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockchain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockchain").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordSignedWhitelistedContractAddressEnvelope.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordSignedWhitelistedContractAddressEnvelope' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordSignedWhitelistedContractAddressEnvelope> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordSignedWhitelistedContractAddressEnvelope.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordSignedWhitelistedContractAddressEnvelope>() {
           @Override
           public void write(JsonWriter out, TgvalidatordSignedWhitelistedContractAddressEnvelope value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordSignedWhitelistedContractAddressEnvelope read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordSignedWhitelistedContractAddressEnvelope given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordSignedWhitelistedContractAddressEnvelope
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordSignedWhitelistedContractAddressEnvelope
   */
  public static TgvalidatordSignedWhitelistedContractAddressEnvelope fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordSignedWhitelistedContractAddressEnvelope.class);
  }

  /**
   * Convert an instance of TgvalidatordSignedWhitelistedContractAddressEnvelope to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

