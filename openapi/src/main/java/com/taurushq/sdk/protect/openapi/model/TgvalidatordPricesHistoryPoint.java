/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordCurrency;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordPricesHistoryPoint
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordPricesHistoryPoint {
  public static final String SERIALIZED_NAME_PERIOD_START_DATE = "periodStartDate";
  @SerializedName(SERIALIZED_NAME_PERIOD_START_DATE)
  private OffsetDateTime periodStartDate;

  public static final String SERIALIZED_NAME_BLOCKCHAIN = "blockchain";
  @SerializedName(SERIALIZED_NAME_BLOCKCHAIN)
  private String blockchain;

  public static final String SERIALIZED_NAME_CURRENCY_FROM = "currencyFrom";
  @SerializedName(SERIALIZED_NAME_CURRENCY_FROM)
  private String currencyFrom;

  public static final String SERIALIZED_NAME_CURRENCY_TO = "currencyTo";
  @SerializedName(SERIALIZED_NAME_CURRENCY_TO)
  private String currencyTo;

  public static final String SERIALIZED_NAME_HIGH = "high";
  @SerializedName(SERIALIZED_NAME_HIGH)
  private String high;

  public static final String SERIALIZED_NAME_LOW = "low";
  @SerializedName(SERIALIZED_NAME_LOW)
  private String low;

  public static final String SERIALIZED_NAME_OPEN = "open";
  @SerializedName(SERIALIZED_NAME_OPEN)
  private String open;

  public static final String SERIALIZED_NAME_CLOSE = "close";
  @SerializedName(SERIALIZED_NAME_CLOSE)
  private String close;

  public static final String SERIALIZED_NAME_VOLUME_FROM = "volumeFrom";
  @SerializedName(SERIALIZED_NAME_VOLUME_FROM)
  private String volumeFrom;

  public static final String SERIALIZED_NAME_VOLUME_TO = "volumeTo";
  @SerializedName(SERIALIZED_NAME_VOLUME_TO)
  private String volumeTo;

  public static final String SERIALIZED_NAME_CHANGE_PERCENT = "changePercent";
  @SerializedName(SERIALIZED_NAME_CHANGE_PERCENT)
  private String changePercent;

  public static final String SERIALIZED_NAME_CURRENCY_FROM_INFO = "currencyFromInfo";
  @SerializedName(SERIALIZED_NAME_CURRENCY_FROM_INFO)
  private TgvalidatordCurrency currencyFromInfo;

  public static final String SERIALIZED_NAME_CURRENCY_TO_INFO = "currencyToInfo";
  @SerializedName(SERIALIZED_NAME_CURRENCY_TO_INFO)
  private TgvalidatordCurrency currencyToInfo;

  public TgvalidatordPricesHistoryPoint() {
  }

  public TgvalidatordPricesHistoryPoint periodStartDate(OffsetDateTime periodStartDate) {
    this.periodStartDate = periodStartDate;
    return this;
  }

  /**
   * Get periodStartDate
   * @return periodStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPeriodStartDate() {
    return periodStartDate;
  }

  public void setPeriodStartDate(OffsetDateTime periodStartDate) {
    this.periodStartDate = periodStartDate;
  }


  public TgvalidatordPricesHistoryPoint blockchain(String blockchain) {
    this.blockchain = blockchain;
    return this;
  }

  /**
   * Get blockchain
   * @return blockchain
   */
  @javax.annotation.Nullable
  public String getBlockchain() {
    return blockchain;
  }

  public void setBlockchain(String blockchain) {
    this.blockchain = blockchain;
  }


  public TgvalidatordPricesHistoryPoint currencyFrom(String currencyFrom) {
    this.currencyFrom = currencyFrom;
    return this;
  }

  /**
   * Get currencyFrom
   * @return currencyFrom
   */
  @javax.annotation.Nullable
  public String getCurrencyFrom() {
    return currencyFrom;
  }

  public void setCurrencyFrom(String currencyFrom) {
    this.currencyFrom = currencyFrom;
  }


  public TgvalidatordPricesHistoryPoint currencyTo(String currencyTo) {
    this.currencyTo = currencyTo;
    return this;
  }

  /**
   * Get currencyTo
   * @return currencyTo
   */
  @javax.annotation.Nullable
  public String getCurrencyTo() {
    return currencyTo;
  }

  public void setCurrencyTo(String currencyTo) {
    this.currencyTo = currencyTo;
  }


  public TgvalidatordPricesHistoryPoint high(String high) {
    this.high = high;
    return this;
  }

  /**
   * Get high
   * @return high
   */
  @javax.annotation.Nullable
  public String getHigh() {
    return high;
  }

  public void setHigh(String high) {
    this.high = high;
  }


  public TgvalidatordPricesHistoryPoint low(String low) {
    this.low = low;
    return this;
  }

  /**
   * Get low
   * @return low
   */
  @javax.annotation.Nullable
  public String getLow() {
    return low;
  }

  public void setLow(String low) {
    this.low = low;
  }


  public TgvalidatordPricesHistoryPoint open(String open) {
    this.open = open;
    return this;
  }

  /**
   * Get open
   * @return open
   */
  @javax.annotation.Nullable
  public String getOpen() {
    return open;
  }

  public void setOpen(String open) {
    this.open = open;
  }


  public TgvalidatordPricesHistoryPoint close(String close) {
    this.close = close;
    return this;
  }

  /**
   * Get close
   * @return close
   */
  @javax.annotation.Nullable
  public String getClose() {
    return close;
  }

  public void setClose(String close) {
    this.close = close;
  }


  public TgvalidatordPricesHistoryPoint volumeFrom(String volumeFrom) {
    this.volumeFrom = volumeFrom;
    return this;
  }

  /**
   * Get volumeFrom
   * @return volumeFrom
   */
  @javax.annotation.Nullable
  public String getVolumeFrom() {
    return volumeFrom;
  }

  public void setVolumeFrom(String volumeFrom) {
    this.volumeFrom = volumeFrom;
  }


  public TgvalidatordPricesHistoryPoint volumeTo(String volumeTo) {
    this.volumeTo = volumeTo;
    return this;
  }

  /**
   * Get volumeTo
   * @return volumeTo
   */
  @javax.annotation.Nullable
  public String getVolumeTo() {
    return volumeTo;
  }

  public void setVolumeTo(String volumeTo) {
    this.volumeTo = volumeTo;
  }


  public TgvalidatordPricesHistoryPoint changePercent(String changePercent) {
    this.changePercent = changePercent;
    return this;
  }

  /**
   * Get changePercent
   * @return changePercent
   */
  @javax.annotation.Nullable
  public String getChangePercent() {
    return changePercent;
  }

  public void setChangePercent(String changePercent) {
    this.changePercent = changePercent;
  }


  public TgvalidatordPricesHistoryPoint currencyFromInfo(TgvalidatordCurrency currencyFromInfo) {
    this.currencyFromInfo = currencyFromInfo;
    return this;
  }

  /**
   * Get currencyFromInfo
   * @return currencyFromInfo
   */
  @javax.annotation.Nullable
  public TgvalidatordCurrency getCurrencyFromInfo() {
    return currencyFromInfo;
  }

  public void setCurrencyFromInfo(TgvalidatordCurrency currencyFromInfo) {
    this.currencyFromInfo = currencyFromInfo;
  }


  public TgvalidatordPricesHistoryPoint currencyToInfo(TgvalidatordCurrency currencyToInfo) {
    this.currencyToInfo = currencyToInfo;
    return this;
  }

  /**
   * Get currencyToInfo
   * @return currencyToInfo
   */
  @javax.annotation.Nullable
  public TgvalidatordCurrency getCurrencyToInfo() {
    return currencyToInfo;
  }

  public void setCurrencyToInfo(TgvalidatordCurrency currencyToInfo) {
    this.currencyToInfo = currencyToInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordPricesHistoryPoint tgvalidatordPricesHistoryPoint = (TgvalidatordPricesHistoryPoint) o;
    return Objects.equals(this.periodStartDate, tgvalidatordPricesHistoryPoint.periodStartDate) &&
        Objects.equals(this.blockchain, tgvalidatordPricesHistoryPoint.blockchain) &&
        Objects.equals(this.currencyFrom, tgvalidatordPricesHistoryPoint.currencyFrom) &&
        Objects.equals(this.currencyTo, tgvalidatordPricesHistoryPoint.currencyTo) &&
        Objects.equals(this.high, tgvalidatordPricesHistoryPoint.high) &&
        Objects.equals(this.low, tgvalidatordPricesHistoryPoint.low) &&
        Objects.equals(this.open, tgvalidatordPricesHistoryPoint.open) &&
        Objects.equals(this.close, tgvalidatordPricesHistoryPoint.close) &&
        Objects.equals(this.volumeFrom, tgvalidatordPricesHistoryPoint.volumeFrom) &&
        Objects.equals(this.volumeTo, tgvalidatordPricesHistoryPoint.volumeTo) &&
        Objects.equals(this.changePercent, tgvalidatordPricesHistoryPoint.changePercent) &&
        Objects.equals(this.currencyFromInfo, tgvalidatordPricesHistoryPoint.currencyFromInfo) &&
        Objects.equals(this.currencyToInfo, tgvalidatordPricesHistoryPoint.currencyToInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(periodStartDate, blockchain, currencyFrom, currencyTo, high, low, open, close, volumeFrom, volumeTo, changePercent, currencyFromInfo, currencyToInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordPricesHistoryPoint {\n");
    sb.append("    periodStartDate: ").append(toIndentedString(periodStartDate)).append("\n");
    sb.append("    blockchain: ").append(toIndentedString(blockchain)).append("\n");
    sb.append("    currencyFrom: ").append(toIndentedString(currencyFrom)).append("\n");
    sb.append("    currencyTo: ").append(toIndentedString(currencyTo)).append("\n");
    sb.append("    high: ").append(toIndentedString(high)).append("\n");
    sb.append("    low: ").append(toIndentedString(low)).append("\n");
    sb.append("    open: ").append(toIndentedString(open)).append("\n");
    sb.append("    close: ").append(toIndentedString(close)).append("\n");
    sb.append("    volumeFrom: ").append(toIndentedString(volumeFrom)).append("\n");
    sb.append("    volumeTo: ").append(toIndentedString(volumeTo)).append("\n");
    sb.append("    changePercent: ").append(toIndentedString(changePercent)).append("\n");
    sb.append("    currencyFromInfo: ").append(toIndentedString(currencyFromInfo)).append("\n");
    sb.append("    currencyToInfo: ").append(toIndentedString(currencyToInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("periodStartDate");
    openapiFields.add("blockchain");
    openapiFields.add("currencyFrom");
    openapiFields.add("currencyTo");
    openapiFields.add("high");
    openapiFields.add("low");
    openapiFields.add("open");
    openapiFields.add("close");
    openapiFields.add("volumeFrom");
    openapiFields.add("volumeTo");
    openapiFields.add("changePercent");
    openapiFields.add("currencyFromInfo");
    openapiFields.add("currencyToInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordPricesHistoryPoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordPricesHistoryPoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordPricesHistoryPoint is not found in the empty JSON string", TgvalidatordPricesHistoryPoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordPricesHistoryPoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordPricesHistoryPoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blockchain") != null && !jsonObj.get("blockchain").isJsonNull()) && !jsonObj.get("blockchain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockchain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockchain").toString()));
      }
      if ((jsonObj.get("currencyFrom") != null && !jsonObj.get("currencyFrom").isJsonNull()) && !jsonObj.get("currencyFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyFrom").toString()));
      }
      if ((jsonObj.get("currencyTo") != null && !jsonObj.get("currencyTo").isJsonNull()) && !jsonObj.get("currencyTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyTo").toString()));
      }
      if ((jsonObj.get("high") != null && !jsonObj.get("high").isJsonNull()) && !jsonObj.get("high").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `high` to be a primitive type in the JSON string but got `%s`", jsonObj.get("high").toString()));
      }
      if ((jsonObj.get("low") != null && !jsonObj.get("low").isJsonNull()) && !jsonObj.get("low").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `low` to be a primitive type in the JSON string but got `%s`", jsonObj.get("low").toString()));
      }
      if ((jsonObj.get("open") != null && !jsonObj.get("open").isJsonNull()) && !jsonObj.get("open").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `open` to be a primitive type in the JSON string but got `%s`", jsonObj.get("open").toString()));
      }
      if ((jsonObj.get("close") != null && !jsonObj.get("close").isJsonNull()) && !jsonObj.get("close").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `close` to be a primitive type in the JSON string but got `%s`", jsonObj.get("close").toString()));
      }
      if ((jsonObj.get("volumeFrom") != null && !jsonObj.get("volumeFrom").isJsonNull()) && !jsonObj.get("volumeFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeFrom").toString()));
      }
      if ((jsonObj.get("volumeTo") != null && !jsonObj.get("volumeTo").isJsonNull()) && !jsonObj.get("volumeTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeTo").toString()));
      }
      if ((jsonObj.get("changePercent") != null && !jsonObj.get("changePercent").isJsonNull()) && !jsonObj.get("changePercent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changePercent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changePercent").toString()));
      }
      // validate the optional field `currencyFromInfo`
      if (jsonObj.get("currencyFromInfo") != null && !jsonObj.get("currencyFromInfo").isJsonNull()) {
        TgvalidatordCurrency.validateJsonElement(jsonObj.get("currencyFromInfo"));
      }
      // validate the optional field `currencyToInfo`
      if (jsonObj.get("currencyToInfo") != null && !jsonObj.get("currencyToInfo").isJsonNull()) {
        TgvalidatordCurrency.validateJsonElement(jsonObj.get("currencyToInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordPricesHistoryPoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordPricesHistoryPoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordPricesHistoryPoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordPricesHistoryPoint.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordPricesHistoryPoint>() {
           @Override
           public void write(JsonWriter out, TgvalidatordPricesHistoryPoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordPricesHistoryPoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordPricesHistoryPoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordPricesHistoryPoint
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordPricesHistoryPoint
   */
  public static TgvalidatordPricesHistoryPoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordPricesHistoryPoint.class);
  }

  /**
   * Convert an instance of TgvalidatordPricesHistoryPoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

