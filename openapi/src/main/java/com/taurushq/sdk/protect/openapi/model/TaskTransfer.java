/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordActionAmount;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordActionDestination;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordActionSource;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TaskTransfer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TaskTransfer {
  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private TgvalidatordActionSource from;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private TgvalidatordActionDestination to;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private TgvalidatordActionAmount amount;

  public static final String SERIALIZED_NAME_TOP_UP = "topUp";
  @SerializedName(SERIALIZED_NAME_TOP_UP)
  private Boolean topUp;

  public static final String SERIALIZED_NAME_USE_ALL_FUNDS = "useAllFunds";
  @SerializedName(SERIALIZED_NAME_USE_ALL_FUNDS)
  private Boolean useAllFunds;

  public TaskTransfer() {
  }

  public TaskTransfer from(TgvalidatordActionSource from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nullable
  public TgvalidatordActionSource getFrom() {
    return from;
  }

  public void setFrom(TgvalidatordActionSource from) {
    this.from = from;
  }


  public TaskTransfer to(TgvalidatordActionDestination to) {
    this.to = to;
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nullable
  public TgvalidatordActionDestination getTo() {
    return to;
  }

  public void setTo(TgvalidatordActionDestination to) {
    this.to = to;
  }


  public TaskTransfer amount(TgvalidatordActionAmount amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public TgvalidatordActionAmount getAmount() {
    return amount;
  }

  public void setAmount(TgvalidatordActionAmount amount) {
    this.amount = amount;
  }


  public TaskTransfer topUp(Boolean topUp) {
    this.topUp = topUp;
    return this;
  }

  /**
   * Get topUp
   * @return topUp
   */
  @javax.annotation.Nullable
  public Boolean getTopUp() {
    return topUp;
  }

  public void setTopUp(Boolean topUp) {
    this.topUp = topUp;
  }


  public TaskTransfer useAllFunds(Boolean useAllFunds) {
    this.useAllFunds = useAllFunds;
    return this;
  }

  /**
   * Get useAllFunds
   * @return useAllFunds
   */
  @javax.annotation.Nullable
  public Boolean getUseAllFunds() {
    return useAllFunds;
  }

  public void setUseAllFunds(Boolean useAllFunds) {
    this.useAllFunds = useAllFunds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskTransfer taskTransfer = (TaskTransfer) o;
    return Objects.equals(this.from, taskTransfer.from) &&
        Objects.equals(this.to, taskTransfer.to) &&
        Objects.equals(this.amount, taskTransfer.amount) &&
        Objects.equals(this.topUp, taskTransfer.topUp) &&
        Objects.equals(this.useAllFunds, taskTransfer.useAllFunds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, to, amount, topUp, useAllFunds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskTransfer {\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    topUp: ").append(toIndentedString(topUp)).append("\n");
    sb.append("    useAllFunds: ").append(toIndentedString(useAllFunds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("from");
    openapiFields.add("to");
    openapiFields.add("amount");
    openapiFields.add("topUp");
    openapiFields.add("useAllFunds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskTransfer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskTransfer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskTransfer is not found in the empty JSON string", TaskTransfer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskTransfer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskTransfer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `from`
      if (jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) {
        TgvalidatordActionSource.validateJsonElement(jsonObj.get("from"));
      }
      // validate the optional field `to`
      if (jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) {
        TgvalidatordActionDestination.validateJsonElement(jsonObj.get("to"));
      }
      // validate the optional field `amount`
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) {
        TgvalidatordActionAmount.validateJsonElement(jsonObj.get("amount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskTransfer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskTransfer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskTransfer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskTransfer.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskTransfer>() {
           @Override
           public void write(JsonWriter out, TaskTransfer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskTransfer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskTransfer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskTransfer
   * @throws IOException if the JSON string is invalid with respect to TaskTransfer
   */
  public static TaskTransfer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskTransfer.class);
  }

  /**
   * Convert an instance of TaskTransfer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

