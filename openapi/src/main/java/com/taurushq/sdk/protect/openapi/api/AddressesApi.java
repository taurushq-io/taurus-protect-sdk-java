/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.api;

import com.taurushq.sdk.protect.openapi.ApiCallback;
import com.taurushq.sdk.protect.openapi.ApiClient;
import com.taurushq.sdk.protect.openapi.ApiException;
import com.taurushq.sdk.protect.openapi.ApiResponse;
import com.taurushq.sdk.protect.openapi.Configuration;
import com.taurushq.sdk.protect.openapi.Pair;
import com.taurushq.sdk.protect.openapi.ProgressRequestBody;
import com.taurushq.sdk.protect.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.taurushq.sdk.protect.openapi.model.ApiHttpBody;
import com.taurushq.sdk.protect.openapi.model.GooglerpcStatus;
import java.time.OffsetDateTime;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordBTCSignMessageReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordComputeAddressesSignatureReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordComputeAddressesSignatureRequest;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordCreateAddressAttributesReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordCreateAddressReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordCreateAddressRequest;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordCreateAddressesReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordCreateAddressesRequest;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordETHSignMessageReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordExportAddressBalanceHistoryReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordExportAddressesReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetAddressBalanceHistoryReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetAddressProofOfReserveReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetAddressReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetAddressTokensReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetAddressUTXOsReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetAddressesProofOfReserveReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetAddressesReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetAddressesStatusReply;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordGetLightAddressesReply;
import com.taurushq.sdk.protect.openapi.model.WalletServiceCreateAddressAttributesBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddressesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AddressesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AddressesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for reportServiceSwiftMT535BalanceReport
     * @param blockchain  (optional)
     * @param blockchainaddress  (optional)
     * @param forDate  (optional)
     * @param network  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportServiceSwiftMT535BalanceReportCall(String blockchain, String blockchainaddress, OffsetDateTime forDate, String network, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/reports/mt535";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (blockchain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blockchain", blockchain));
        }

        if (blockchainaddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blockchainaddress", blockchainaddress));
        }

        if (forDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forDate", forDate));
        }

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportServiceSwiftMT535BalanceReportValidateBeforeCall(String blockchain, String blockchainaddress, OffsetDateTime forDate, String network, final ApiCallback _callback) throws ApiException {
        return reportServiceSwiftMT535BalanceReportCall(blockchain, blockchainaddress, forDate, network, _callback);

    }

    /**
     * Get the balance of the address
     * Returns the MT535 statement of holdings for the address. By default, the response is a JSON, with the swift content formatted in base64. To get the plain swift as a response, use the request header **&#39;Accept: text/plain&#39;**. A date can be passed to get the balance at a particular date. If no date is given, the last closing date is used.
     * @param blockchain  (optional)
     * @param blockchainaddress  (optional)
     * @param forDate  (optional)
     * @param network  (optional)
     * @return ApiHttpBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiHttpBody reportServiceSwiftMT535BalanceReport(String blockchain, String blockchainaddress, OffsetDateTime forDate, String network) throws ApiException {
        ApiResponse<ApiHttpBody> localVarResp = reportServiceSwiftMT535BalanceReportWithHttpInfo(blockchain, blockchainaddress, forDate, network);
        return localVarResp.getData();
    }

    /**
     * Get the balance of the address
     * Returns the MT535 statement of holdings for the address. By default, the response is a JSON, with the swift content formatted in base64. To get the plain swift as a response, use the request header **&#39;Accept: text/plain&#39;**. A date can be passed to get the balance at a particular date. If no date is given, the last closing date is used.
     * @param blockchain  (optional)
     * @param blockchainaddress  (optional)
     * @param forDate  (optional)
     * @param network  (optional)
     * @return ApiResponse&lt;ApiHttpBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiHttpBody> reportServiceSwiftMT535BalanceReportWithHttpInfo(String blockchain, String blockchainaddress, OffsetDateTime forDate, String network) throws ApiException {
        okhttp3.Call localVarCall = reportServiceSwiftMT535BalanceReportValidateBeforeCall(blockchain, blockchainaddress, forDate, network, null);
        Type localVarReturnType = new TypeToken<ApiHttpBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the balance of the address (asynchronously)
     * Returns the MT535 statement of holdings for the address. By default, the response is a JSON, with the swift content formatted in base64. To get the plain swift as a response, use the request header **&#39;Accept: text/plain&#39;**. A date can be passed to get the balance at a particular date. If no date is given, the last closing date is used.
     * @param blockchain  (optional)
     * @param blockchainaddress  (optional)
     * @param forDate  (optional)
     * @param network  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportServiceSwiftMT535BalanceReportAsync(String blockchain, String blockchainaddress, OffsetDateTime forDate, String network, final ApiCallback<ApiHttpBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportServiceSwiftMT535BalanceReportValidateBeforeCall(blockchain, blockchainaddress, forDate, network, _callback);
        Type localVarReturnType = new TypeToken<ApiHttpBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportServiceSwiftMT536TransactionsReport
     * @param blockchain  (optional)
     * @param blockchainaddress  (optional)
     * @param forDate  (optional)
     * @param network  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportServiceSwiftMT536TransactionsReportCall(String blockchain, String blockchainaddress, OffsetDateTime forDate, String network, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/reports/mt536";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (blockchain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blockchain", blockchain));
        }

        if (blockchainaddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blockchainaddress", blockchainaddress));
        }

        if (forDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forDate", forDate));
        }

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportServiceSwiftMT536TransactionsReportValidateBeforeCall(String blockchain, String blockchainaddress, OffsetDateTime forDate, String network, final ApiCallback _callback) throws ApiException {
        return reportServiceSwiftMT536TransactionsReportCall(blockchain, blockchainaddress, forDate, network, _callback);

    }

    /**
     * Get the daily transactions of the address
     * Returns the MT536 statement of transactions for the address. By default, the response is a JSON, with the swift content formatted in base64. To get the plain swift as a response, use the request header **&#39;Accept: text/plain&#39;**. A date can be passed to get the transactions of a particular day. If no date is given, the last day is used.
     * @param blockchain  (optional)
     * @param blockchainaddress  (optional)
     * @param forDate  (optional)
     * @param network  (optional)
     * @return ApiHttpBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiHttpBody reportServiceSwiftMT536TransactionsReport(String blockchain, String blockchainaddress, OffsetDateTime forDate, String network) throws ApiException {
        ApiResponse<ApiHttpBody> localVarResp = reportServiceSwiftMT536TransactionsReportWithHttpInfo(blockchain, blockchainaddress, forDate, network);
        return localVarResp.getData();
    }

    /**
     * Get the daily transactions of the address
     * Returns the MT536 statement of transactions for the address. By default, the response is a JSON, with the swift content formatted in base64. To get the plain swift as a response, use the request header **&#39;Accept: text/plain&#39;**. A date can be passed to get the transactions of a particular day. If no date is given, the last day is used.
     * @param blockchain  (optional)
     * @param blockchainaddress  (optional)
     * @param forDate  (optional)
     * @param network  (optional)
     * @return ApiResponse&lt;ApiHttpBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiHttpBody> reportServiceSwiftMT536TransactionsReportWithHttpInfo(String blockchain, String blockchainaddress, OffsetDateTime forDate, String network) throws ApiException {
        okhttp3.Call localVarCall = reportServiceSwiftMT536TransactionsReportValidateBeforeCall(blockchain, blockchainaddress, forDate, network, null);
        Type localVarReturnType = new TypeToken<ApiHttpBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the daily transactions of the address (asynchronously)
     * Returns the MT536 statement of transactions for the address. By default, the response is a JSON, with the swift content formatted in base64. To get the plain swift as a response, use the request header **&#39;Accept: text/plain&#39;**. A date can be passed to get the transactions of a particular day. If no date is given, the last day is used.
     * @param blockchain  (optional)
     * @param blockchainaddress  (optional)
     * @param forDate  (optional)
     * @param network  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportServiceSwiftMT536TransactionsReportAsync(String blockchain, String blockchainaddress, OffsetDateTime forDate, String network, final ApiCallback<ApiHttpBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportServiceSwiftMT536TransactionsReportValidateBeforeCall(blockchain, blockchainaddress, forDate, network, _callback);
        Type localVarReturnType = new TypeToken<ApiHttpBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceBTCSignMessage
     * @param addressId  (required)
     * @param message  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceBTCSignMessageCall(String addressId, String message, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/addresses/{addressId}/btc_sign"
            .replace("{" + "addressId" + "}", localVarApiClient.escapeString(addressId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (message != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("message", message));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceBTCSignMessageValidateBeforeCall(String addressId, String message, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addressId' is set
        if (addressId == null) {
            throw new ApiException("Missing the required parameter 'addressId' when calling walletServiceBTCSignMessage(Async)");
        }

        return walletServiceBTCSignMessageCall(addressId, message, _callback);

    }

    /**
     * Calculate a BTC specific signature of a message
     * This endpoint returns a BTC specific signature from a given message and address as input.
     * @param addressId  (required)
     * @param message  (optional)
     * @return TgvalidatordBTCSignMessageReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordBTCSignMessageReply walletServiceBTCSignMessage(String addressId, String message) throws ApiException {
        ApiResponse<TgvalidatordBTCSignMessageReply> localVarResp = walletServiceBTCSignMessageWithHttpInfo(addressId, message);
        return localVarResp.getData();
    }

    /**
     * Calculate a BTC specific signature of a message
     * This endpoint returns a BTC specific signature from a given message and address as input.
     * @param addressId  (required)
     * @param message  (optional)
     * @return ApiResponse&lt;TgvalidatordBTCSignMessageReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordBTCSignMessageReply> walletServiceBTCSignMessageWithHttpInfo(String addressId, String message) throws ApiException {
        okhttp3.Call localVarCall = walletServiceBTCSignMessageValidateBeforeCall(addressId, message, null);
        Type localVarReturnType = new TypeToken<TgvalidatordBTCSignMessageReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculate a BTC specific signature of a message (asynchronously)
     * This endpoint returns a BTC specific signature from a given message and address as input.
     * @param addressId  (required)
     * @param message  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceBTCSignMessageAsync(String addressId, String message, final ApiCallback<TgvalidatordBTCSignMessageReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceBTCSignMessageValidateBeforeCall(addressId, message, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordBTCSignMessageReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceComputeAddressesSignature
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceComputeAddressesSignatureCall(TgvalidatordComputeAddressesSignatureRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/rest/v1/addresses/signature/compute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceComputeAddressesSignatureValidateBeforeCall(TgvalidatordComputeAddressesSignatureRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling walletServiceComputeAddressesSignature(Async)");
        }

        return walletServiceComputeAddressesSignatureCall(body, _callback);

    }

    /**
     * Recompute addresses signatures
     * This endpoint forces a recompute of all addresses signatures.  Required role: **Admin**.
     * @param body  (required)
     * @return TgvalidatordComputeAddressesSignatureReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordComputeAddressesSignatureReply walletServiceComputeAddressesSignature(TgvalidatordComputeAddressesSignatureRequest body) throws ApiException {
        ApiResponse<TgvalidatordComputeAddressesSignatureReply> localVarResp = walletServiceComputeAddressesSignatureWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Recompute addresses signatures
     * This endpoint forces a recompute of all addresses signatures.  Required role: **Admin**.
     * @param body  (required)
     * @return ApiResponse&lt;TgvalidatordComputeAddressesSignatureReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordComputeAddressesSignatureReply> walletServiceComputeAddressesSignatureWithHttpInfo(TgvalidatordComputeAddressesSignatureRequest body) throws ApiException {
        okhttp3.Call localVarCall = walletServiceComputeAddressesSignatureValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TgvalidatordComputeAddressesSignatureReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recompute addresses signatures (asynchronously)
     * This endpoint forces a recompute of all addresses signatures.  Required role: **Admin**.
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceComputeAddressesSignatureAsync(TgvalidatordComputeAddressesSignatureRequest body, final ApiCallback<TgvalidatordComputeAddressesSignatureReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceComputeAddressesSignatureValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordComputeAddressesSignatureReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceCreateAddress
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceCreateAddressCall(TgvalidatordCreateAddressRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/rest/v1/addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceCreateAddressValidateBeforeCall(TgvalidatordCreateAddressRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling walletServiceCreateAddress(Async)");
        }

        return walletServiceCreateAddressCall(body, _callback);

    }

    /**
     * Create an address
     * Required role: **AccountCreator**.   This endpoint creates a new address.   Address creation requires HSM signature, which makes it synchronuous. Therefore, address creation can be slow and failure could happen if HSM is either unavailable or takes too long to process. If it happens, the API can be called again safely. 
     * @param body  (required)
     * @return TgvalidatordCreateAddressReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordCreateAddressReply walletServiceCreateAddress(TgvalidatordCreateAddressRequest body) throws ApiException {
        ApiResponse<TgvalidatordCreateAddressReply> localVarResp = walletServiceCreateAddressWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create an address
     * Required role: **AccountCreator**.   This endpoint creates a new address.   Address creation requires HSM signature, which makes it synchronuous. Therefore, address creation can be slow and failure could happen if HSM is either unavailable or takes too long to process. If it happens, the API can be called again safely. 
     * @param body  (required)
     * @return ApiResponse&lt;TgvalidatordCreateAddressReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordCreateAddressReply> walletServiceCreateAddressWithHttpInfo(TgvalidatordCreateAddressRequest body) throws ApiException {
        okhttp3.Call localVarCall = walletServiceCreateAddressValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TgvalidatordCreateAddressReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an address (asynchronously)
     * Required role: **AccountCreator**.   This endpoint creates a new address.   Address creation requires HSM signature, which makes it synchronuous. Therefore, address creation can be slow and failure could happen if HSM is either unavailable or takes too long to process. If it happens, the API can be called again safely. 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceCreateAddressAsync(TgvalidatordCreateAddressRequest body, final ApiCallback<TgvalidatordCreateAddressReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceCreateAddressValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordCreateAddressReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceCreateAddressAttributes
     * @param addressId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceCreateAddressAttributesCall(String addressId, WalletServiceCreateAddressAttributesBody body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/rest/v1/addresses/{addressId}/attributes"
            .replace("{" + "addressId" + "}", localVarApiClient.escapeString(addressId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceCreateAddressAttributesValidateBeforeCall(String addressId, WalletServiceCreateAddressAttributesBody body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addressId' is set
        if (addressId == null) {
            throw new ApiException("Missing the required parameter 'addressId' when calling walletServiceCreateAddressAttributes(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling walletServiceCreateAddressAttributes(Async)");
        }

        return walletServiceCreateAddressAttributesCall(addressId, body, _callback);

    }

    /**
     * Create attributes
     * This endpoint creates attributes for a given address.   Required role: **AccountCreator**.
     * @param addressId  (required)
     * @param body  (required)
     * @return TgvalidatordCreateAddressAttributesReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordCreateAddressAttributesReply walletServiceCreateAddressAttributes(String addressId, WalletServiceCreateAddressAttributesBody body) throws ApiException {
        ApiResponse<TgvalidatordCreateAddressAttributesReply> localVarResp = walletServiceCreateAddressAttributesWithHttpInfo(addressId, body);
        return localVarResp.getData();
    }

    /**
     * Create attributes
     * This endpoint creates attributes for a given address.   Required role: **AccountCreator**.
     * @param addressId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;TgvalidatordCreateAddressAttributesReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordCreateAddressAttributesReply> walletServiceCreateAddressAttributesWithHttpInfo(String addressId, WalletServiceCreateAddressAttributesBody body) throws ApiException {
        okhttp3.Call localVarCall = walletServiceCreateAddressAttributesValidateBeforeCall(addressId, body, null);
        Type localVarReturnType = new TypeToken<TgvalidatordCreateAddressAttributesReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create attributes (asynchronously)
     * This endpoint creates attributes for a given address.   Required role: **AccountCreator**.
     * @param addressId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceCreateAddressAttributesAsync(String addressId, WalletServiceCreateAddressAttributesBody body, final ApiCallback<TgvalidatordCreateAddressAttributesReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceCreateAddressAttributesValidateBeforeCall(addressId, body, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordCreateAddressAttributesReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceCreateAddressesBatch
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceCreateAddressesBatchCall(TgvalidatordCreateAddressesRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/rest/v1/addresses/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceCreateAddressesBatchValidateBeforeCall(TgvalidatordCreateAddressesRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling walletServiceCreateAddressesBatch(Async)");
        }

        return walletServiceCreateAddressesBatchCall(body, _callback);

    }

    /**
     * Create a batch of addresses
     * Required role: **AccountCreator**.   This endpoint creates a batch of addresses.   Address created from this endpoint will start with a **created** and will not be ready to use until the HSM process them. 
     * @param body  (required)
     * @return TgvalidatordCreateAddressesReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordCreateAddressesReply walletServiceCreateAddressesBatch(TgvalidatordCreateAddressesRequest body) throws ApiException {
        ApiResponse<TgvalidatordCreateAddressesReply> localVarResp = walletServiceCreateAddressesBatchWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create a batch of addresses
     * Required role: **AccountCreator**.   This endpoint creates a batch of addresses.   Address created from this endpoint will start with a **created** and will not be ready to use until the HSM process them. 
     * @param body  (required)
     * @return ApiResponse&lt;TgvalidatordCreateAddressesReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordCreateAddressesReply> walletServiceCreateAddressesBatchWithHttpInfo(TgvalidatordCreateAddressesRequest body) throws ApiException {
        okhttp3.Call localVarCall = walletServiceCreateAddressesBatchValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TgvalidatordCreateAddressesReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a batch of addresses (asynchronously)
     * Required role: **AccountCreator**.   This endpoint creates a batch of addresses.   Address created from this endpoint will start with a **created** and will not be ready to use until the HSM process them. 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceCreateAddressesBatchAsync(TgvalidatordCreateAddressesRequest body, final ApiCallback<TgvalidatordCreateAddressesReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceCreateAddressesBatchValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordCreateAddressesReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceDeleteAddressAttribute
     * @param addressId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceDeleteAddressAttributeCall(String addressId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/addresses/{addressId}/attributes/{id}"
            .replace("{" + "addressId" + "}", localVarApiClient.escapeString(addressId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceDeleteAddressAttributeValidateBeforeCall(String addressId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addressId' is set
        if (addressId == null) {
            throw new ApiException("Missing the required parameter 'addressId' when calling walletServiceDeleteAddressAttribute(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling walletServiceDeleteAddressAttribute(Async)");
        }

        return walletServiceDeleteAddressAttributeCall(addressId, id, _callback);

    }

    /**
     * Delete an attribute
     * This endpoint deletes an attribute of a given address.   Required role: **AccountCreator**.
     * @param addressId  (required)
     * @param id  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object walletServiceDeleteAddressAttribute(String addressId, String id) throws ApiException {
        ApiResponse<Object> localVarResp = walletServiceDeleteAddressAttributeWithHttpInfo(addressId, id);
        return localVarResp.getData();
    }

    /**
     * Delete an attribute
     * This endpoint deletes an attribute of a given address.   Required role: **AccountCreator**.
     * @param addressId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> walletServiceDeleteAddressAttributeWithHttpInfo(String addressId, String id) throws ApiException {
        okhttp3.Call localVarCall = walletServiceDeleteAddressAttributeValidateBeforeCall(addressId, id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an attribute (asynchronously)
     * This endpoint deletes an attribute of a given address.   Required role: **AccountCreator**.
     * @param addressId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceDeleteAddressAttributeAsync(String addressId, String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceDeleteAddressAttributeValidateBeforeCall(addressId, id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceETHSignMessage
     * @param addressId  (required)
     * @param message  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceETHSignMessageCall(String addressId, String message, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/addresses/{addressId}/eth_sign"
            .replace("{" + "addressId" + "}", localVarApiClient.escapeString(addressId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (message != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("message", message));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceETHSignMessageValidateBeforeCall(String addressId, String message, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addressId' is set
        if (addressId == null) {
            throw new ApiException("Missing the required parameter 'addressId' when calling walletServiceETHSignMessage(Async)");
        }

        return walletServiceETHSignMessageCall(addressId, message, _callback);

    }

    /**
     * Calculate an ETH specific signature of a message
     * This endpoint returns an ETH specific signature from a given message and address as input.
     * @param addressId  (required)
     * @param message  (optional)
     * @return TgvalidatordETHSignMessageReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordETHSignMessageReply walletServiceETHSignMessage(String addressId, String message) throws ApiException {
        ApiResponse<TgvalidatordETHSignMessageReply> localVarResp = walletServiceETHSignMessageWithHttpInfo(addressId, message);
        return localVarResp.getData();
    }

    /**
     * Calculate an ETH specific signature of a message
     * This endpoint returns an ETH specific signature from a given message and address as input.
     * @param addressId  (required)
     * @param message  (optional)
     * @return ApiResponse&lt;TgvalidatordETHSignMessageReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordETHSignMessageReply> walletServiceETHSignMessageWithHttpInfo(String addressId, String message) throws ApiException {
        okhttp3.Call localVarCall = walletServiceETHSignMessageValidateBeforeCall(addressId, message, null);
        Type localVarReturnType = new TypeToken<TgvalidatordETHSignMessageReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculate an ETH specific signature of a message (asynchronously)
     * This endpoint returns an ETH specific signature from a given message and address as input.
     * @param addressId  (required)
     * @param message  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceETHSignMessageAsync(String addressId, String message, final ApiCallback<TgvalidatordETHSignMessageReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceETHSignMessageValidateBeforeCall(addressId, message, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordETHSignMessageReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceExportAddressBalanceHistory
     * @param id Desired address ID (required)
     * @param intervalHours  (optional)
     * @param format Desired file format, can be csv or json. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceExportAddressBalanceHistoryCall(String id, String intervalHours, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/addresses/{id}/balances/history/export"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (intervalHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("intervalHours", intervalHours));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceExportAddressBalanceHistoryValidateBeforeCall(String id, String intervalHours, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling walletServiceExportAddressBalanceHistory(Async)");
        }

        return walletServiceExportAddressBalanceHistoryCall(id, intervalHours, format, _callback);

    }

    /**
     * Export address&#39; balances history
     * This endpoint exports a list of address&#39; balances history
     * @param id Desired address ID (required)
     * @param intervalHours  (optional)
     * @param format Desired file format, can be csv or json. (optional)
     * @return TgvalidatordExportAddressBalanceHistoryReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordExportAddressBalanceHistoryReply walletServiceExportAddressBalanceHistory(String id, String intervalHours, String format) throws ApiException {
        ApiResponse<TgvalidatordExportAddressBalanceHistoryReply> localVarResp = walletServiceExportAddressBalanceHistoryWithHttpInfo(id, intervalHours, format);
        return localVarResp.getData();
    }

    /**
     * Export address&#39; balances history
     * This endpoint exports a list of address&#39; balances history
     * @param id Desired address ID (required)
     * @param intervalHours  (optional)
     * @param format Desired file format, can be csv or json. (optional)
     * @return ApiResponse&lt;TgvalidatordExportAddressBalanceHistoryReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordExportAddressBalanceHistoryReply> walletServiceExportAddressBalanceHistoryWithHttpInfo(String id, String intervalHours, String format) throws ApiException {
        okhttp3.Call localVarCall = walletServiceExportAddressBalanceHistoryValidateBeforeCall(id, intervalHours, format, null);
        Type localVarReturnType = new TypeToken<TgvalidatordExportAddressBalanceHistoryReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export address&#39; balances history (asynchronously)
     * This endpoint exports a list of address&#39; balances history
     * @param id Desired address ID (required)
     * @param intervalHours  (optional)
     * @param format Desired file format, can be csv or json. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceExportAddressBalanceHistoryAsync(String id, String intervalHours, String format, final ApiCallback<TgvalidatordExportAddressBalanceHistoryReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceExportAddressBalanceHistoryValidateBeforeCall(id, intervalHours, format, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordExportAddressBalanceHistoryReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceExportAddresses
     * @param walletId  (optional)
     * @param currency Filter on ID or symbol of the currency (optional)
     * @param format Desired file format, can be csv or json. (optional)
     * @param query  (optional)
     * @param scoreProvider Deprecated. Use scoreFilter instead. (optional)
     * @param scoreInBelow Deprecated. Use scoreFilter instead. (optional)
     * @param scoreOutBelow Deprecated. Use scoreFilter instead. (optional)
     * @param scoreExclusive Deprecated. Use scoreFilter instead. (optional)
     * @param customerId  (optional)
     * @param coinfirmScoreGreater Deprecated. Use scoreFilter instead. (optional)
     * @param chainalysisScoreGreater Deprecated. Use scoreFilter instead. (optional)
     * @param scoreFilterScoreProvider Specify the score provider to filter on, or empty.Each provider has associated filter parameters that can be set.Supported values: &#39;scorechain&#39;, &#39;coinfirm&#39;, &#39;chainalysis&#39;, &#39;elliptic&#39; (optional)
     * @param scoreFilterScorechainFiltersScoreInBelow Filter addresses under a Scorechain incoming score threshold. (optional)
     * @param scoreFilterScorechainFiltersScoreOutBelow Filter addresses under a Scorechain outgoing score threshold. (optional)
     * @param scoreFilterScorechainFiltersScoreExclusive By default when both Scorechain scores scoreInBelow and scoreOutBelow are provided, it returns the addresses matching (scoreInBelow AND scoreOutBelow). When scoreExclusive is set to true, it will return the addresses matching (scoreInBelow OR scoreOutBelow). (optional)
     * @param scoreFilterCoinfirmFiltersScoreGreater Filter addresses with a Coinfirm C-score above threshold. (optional)
     * @param scoreFilterChainalysisFiltersScoreGreater Filter addresses with a Chainalysis risk score above threshold. (optional)
     * @param scoreFilterEllipticFiltersScoreGreater Filter addresses with an Elliptic risk score above threshold. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceExportAddressesCall(String walletId, String currency, String format, String query, String scoreProvider, String scoreInBelow, String scoreOutBelow, Boolean scoreExclusive, String customerId, String coinfirmScoreGreater, String chainalysisScoreGreater, String scoreFilterScoreProvider, String scoreFilterScorechainFiltersScoreInBelow, String scoreFilterScorechainFiltersScoreOutBelow, Boolean scoreFilterScorechainFiltersScoreExclusive, String scoreFilterCoinfirmFiltersScoreGreater, String scoreFilterChainalysisFiltersScoreGreater, String scoreFilterEllipticFiltersScoreGreater, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/addresses/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletId", walletId));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (scoreProvider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreProvider", scoreProvider));
        }

        if (scoreInBelow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreInBelow", scoreInBelow));
        }

        if (scoreOutBelow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreOutBelow", scoreOutBelow));
        }

        if (scoreExclusive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreExclusive", scoreExclusive));
        }

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerId", customerId));
        }

        if (coinfirmScoreGreater != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coinfirmScoreGreater", coinfirmScoreGreater));
        }

        if (chainalysisScoreGreater != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chainalysisScoreGreater", chainalysisScoreGreater));
        }

        if (scoreFilterScoreProvider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreFilter.scoreProvider", scoreFilterScoreProvider));
        }

        if (scoreFilterScorechainFiltersScoreInBelow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreFilter.scorechainFilters.scoreInBelow", scoreFilterScorechainFiltersScoreInBelow));
        }

        if (scoreFilterScorechainFiltersScoreOutBelow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreFilter.scorechainFilters.scoreOutBelow", scoreFilterScorechainFiltersScoreOutBelow));
        }

        if (scoreFilterScorechainFiltersScoreExclusive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreFilter.scorechainFilters.scoreExclusive", scoreFilterScorechainFiltersScoreExclusive));
        }

        if (scoreFilterCoinfirmFiltersScoreGreater != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreFilter.coinfirmFilters.scoreGreater", scoreFilterCoinfirmFiltersScoreGreater));
        }

        if (scoreFilterChainalysisFiltersScoreGreater != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreFilter.chainalysisFilters.scoreGreater", scoreFilterChainalysisFiltersScoreGreater));
        }

        if (scoreFilterEllipticFiltersScoreGreater != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreFilter.ellipticFilters.scoreGreater", scoreFilterEllipticFiltersScoreGreater));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceExportAddressesValidateBeforeCall(String walletId, String currency, String format, String query, String scoreProvider, String scoreInBelow, String scoreOutBelow, Boolean scoreExclusive, String customerId, String coinfirmScoreGreater, String chainalysisScoreGreater, String scoreFilterScoreProvider, String scoreFilterScorechainFiltersScoreInBelow, String scoreFilterScorechainFiltersScoreOutBelow, Boolean scoreFilterScorechainFiltersScoreExclusive, String scoreFilterCoinfirmFiltersScoreGreater, String scoreFilterChainalysisFiltersScoreGreater, String scoreFilterEllipticFiltersScoreGreater, final ApiCallback _callback) throws ApiException {
        return walletServiceExportAddressesCall(walletId, currency, format, query, scoreProvider, scoreInBelow, scoreOutBelow, scoreExclusive, customerId, coinfirmScoreGreater, chainalysisScoreGreater, scoreFilterScoreProvider, scoreFilterScorechainFiltersScoreInBelow, scoreFilterScorechainFiltersScoreOutBelow, scoreFilterScorechainFiltersScoreExclusive, scoreFilterCoinfirmFiltersScoreGreater, scoreFilterChainalysisFiltersScoreGreater, scoreFilterEllipticFiltersScoreGreater, _callback);

    }

    /**
     * Export addresses
     * This endpoint exports a list of addresses
     * @param walletId  (optional)
     * @param currency Filter on ID or symbol of the currency (optional)
     * @param format Desired file format, can be csv or json. (optional)
     * @param query  (optional)
     * @param scoreProvider Deprecated. Use scoreFilter instead. (optional)
     * @param scoreInBelow Deprecated. Use scoreFilter instead. (optional)
     * @param scoreOutBelow Deprecated. Use scoreFilter instead. (optional)
     * @param scoreExclusive Deprecated. Use scoreFilter instead. (optional)
     * @param customerId  (optional)
     * @param coinfirmScoreGreater Deprecated. Use scoreFilter instead. (optional)
     * @param chainalysisScoreGreater Deprecated. Use scoreFilter instead. (optional)
     * @param scoreFilterScoreProvider Specify the score provider to filter on, or empty.Each provider has associated filter parameters that can be set.Supported values: &#39;scorechain&#39;, &#39;coinfirm&#39;, &#39;chainalysis&#39;, &#39;elliptic&#39; (optional)
     * @param scoreFilterScorechainFiltersScoreInBelow Filter addresses under a Scorechain incoming score threshold. (optional)
     * @param scoreFilterScorechainFiltersScoreOutBelow Filter addresses under a Scorechain outgoing score threshold. (optional)
     * @param scoreFilterScorechainFiltersScoreExclusive By default when both Scorechain scores scoreInBelow and scoreOutBelow are provided, it returns the addresses matching (scoreInBelow AND scoreOutBelow). When scoreExclusive is set to true, it will return the addresses matching (scoreInBelow OR scoreOutBelow). (optional)
     * @param scoreFilterCoinfirmFiltersScoreGreater Filter addresses with a Coinfirm C-score above threshold. (optional)
     * @param scoreFilterChainalysisFiltersScoreGreater Filter addresses with a Chainalysis risk score above threshold. (optional)
     * @param scoreFilterEllipticFiltersScoreGreater Filter addresses with an Elliptic risk score above threshold. (optional)
     * @return TgvalidatordExportAddressesReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordExportAddressesReply walletServiceExportAddresses(String walletId, String currency, String format, String query, String scoreProvider, String scoreInBelow, String scoreOutBelow, Boolean scoreExclusive, String customerId, String coinfirmScoreGreater, String chainalysisScoreGreater, String scoreFilterScoreProvider, String scoreFilterScorechainFiltersScoreInBelow, String scoreFilterScorechainFiltersScoreOutBelow, Boolean scoreFilterScorechainFiltersScoreExclusive, String scoreFilterCoinfirmFiltersScoreGreater, String scoreFilterChainalysisFiltersScoreGreater, String scoreFilterEllipticFiltersScoreGreater) throws ApiException {
        ApiResponse<TgvalidatordExportAddressesReply> localVarResp = walletServiceExportAddressesWithHttpInfo(walletId, currency, format, query, scoreProvider, scoreInBelow, scoreOutBelow, scoreExclusive, customerId, coinfirmScoreGreater, chainalysisScoreGreater, scoreFilterScoreProvider, scoreFilterScorechainFiltersScoreInBelow, scoreFilterScorechainFiltersScoreOutBelow, scoreFilterScorechainFiltersScoreExclusive, scoreFilterCoinfirmFiltersScoreGreater, scoreFilterChainalysisFiltersScoreGreater, scoreFilterEllipticFiltersScoreGreater);
        return localVarResp.getData();
    }

    /**
     * Export addresses
     * This endpoint exports a list of addresses
     * @param walletId  (optional)
     * @param currency Filter on ID or symbol of the currency (optional)
     * @param format Desired file format, can be csv or json. (optional)
     * @param query  (optional)
     * @param scoreProvider Deprecated. Use scoreFilter instead. (optional)
     * @param scoreInBelow Deprecated. Use scoreFilter instead. (optional)
     * @param scoreOutBelow Deprecated. Use scoreFilter instead. (optional)
     * @param scoreExclusive Deprecated. Use scoreFilter instead. (optional)
     * @param customerId  (optional)
     * @param coinfirmScoreGreater Deprecated. Use scoreFilter instead. (optional)
     * @param chainalysisScoreGreater Deprecated. Use scoreFilter instead. (optional)
     * @param scoreFilterScoreProvider Specify the score provider to filter on, or empty.Each provider has associated filter parameters that can be set.Supported values: &#39;scorechain&#39;, &#39;coinfirm&#39;, &#39;chainalysis&#39;, &#39;elliptic&#39; (optional)
     * @param scoreFilterScorechainFiltersScoreInBelow Filter addresses under a Scorechain incoming score threshold. (optional)
     * @param scoreFilterScorechainFiltersScoreOutBelow Filter addresses under a Scorechain outgoing score threshold. (optional)
     * @param scoreFilterScorechainFiltersScoreExclusive By default when both Scorechain scores scoreInBelow and scoreOutBelow are provided, it returns the addresses matching (scoreInBelow AND scoreOutBelow). When scoreExclusive is set to true, it will return the addresses matching (scoreInBelow OR scoreOutBelow). (optional)
     * @param scoreFilterCoinfirmFiltersScoreGreater Filter addresses with a Coinfirm C-score above threshold. (optional)
     * @param scoreFilterChainalysisFiltersScoreGreater Filter addresses with a Chainalysis risk score above threshold. (optional)
     * @param scoreFilterEllipticFiltersScoreGreater Filter addresses with an Elliptic risk score above threshold. (optional)
     * @return ApiResponse&lt;TgvalidatordExportAddressesReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordExportAddressesReply> walletServiceExportAddressesWithHttpInfo(String walletId, String currency, String format, String query, String scoreProvider, String scoreInBelow, String scoreOutBelow, Boolean scoreExclusive, String customerId, String coinfirmScoreGreater, String chainalysisScoreGreater, String scoreFilterScoreProvider, String scoreFilterScorechainFiltersScoreInBelow, String scoreFilterScorechainFiltersScoreOutBelow, Boolean scoreFilterScorechainFiltersScoreExclusive, String scoreFilterCoinfirmFiltersScoreGreater, String scoreFilterChainalysisFiltersScoreGreater, String scoreFilterEllipticFiltersScoreGreater) throws ApiException {
        okhttp3.Call localVarCall = walletServiceExportAddressesValidateBeforeCall(walletId, currency, format, query, scoreProvider, scoreInBelow, scoreOutBelow, scoreExclusive, customerId, coinfirmScoreGreater, chainalysisScoreGreater, scoreFilterScoreProvider, scoreFilterScorechainFiltersScoreInBelow, scoreFilterScorechainFiltersScoreOutBelow, scoreFilterScorechainFiltersScoreExclusive, scoreFilterCoinfirmFiltersScoreGreater, scoreFilterChainalysisFiltersScoreGreater, scoreFilterEllipticFiltersScoreGreater, null);
        Type localVarReturnType = new TypeToken<TgvalidatordExportAddressesReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export addresses (asynchronously)
     * This endpoint exports a list of addresses
     * @param walletId  (optional)
     * @param currency Filter on ID or symbol of the currency (optional)
     * @param format Desired file format, can be csv or json. (optional)
     * @param query  (optional)
     * @param scoreProvider Deprecated. Use scoreFilter instead. (optional)
     * @param scoreInBelow Deprecated. Use scoreFilter instead. (optional)
     * @param scoreOutBelow Deprecated. Use scoreFilter instead. (optional)
     * @param scoreExclusive Deprecated. Use scoreFilter instead. (optional)
     * @param customerId  (optional)
     * @param coinfirmScoreGreater Deprecated. Use scoreFilter instead. (optional)
     * @param chainalysisScoreGreater Deprecated. Use scoreFilter instead. (optional)
     * @param scoreFilterScoreProvider Specify the score provider to filter on, or empty.Each provider has associated filter parameters that can be set.Supported values: &#39;scorechain&#39;, &#39;coinfirm&#39;, &#39;chainalysis&#39;, &#39;elliptic&#39; (optional)
     * @param scoreFilterScorechainFiltersScoreInBelow Filter addresses under a Scorechain incoming score threshold. (optional)
     * @param scoreFilterScorechainFiltersScoreOutBelow Filter addresses under a Scorechain outgoing score threshold. (optional)
     * @param scoreFilterScorechainFiltersScoreExclusive By default when both Scorechain scores scoreInBelow and scoreOutBelow are provided, it returns the addresses matching (scoreInBelow AND scoreOutBelow). When scoreExclusive is set to true, it will return the addresses matching (scoreInBelow OR scoreOutBelow). (optional)
     * @param scoreFilterCoinfirmFiltersScoreGreater Filter addresses with a Coinfirm C-score above threshold. (optional)
     * @param scoreFilterChainalysisFiltersScoreGreater Filter addresses with a Chainalysis risk score above threshold. (optional)
     * @param scoreFilterEllipticFiltersScoreGreater Filter addresses with an Elliptic risk score above threshold. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceExportAddressesAsync(String walletId, String currency, String format, String query, String scoreProvider, String scoreInBelow, String scoreOutBelow, Boolean scoreExclusive, String customerId, String coinfirmScoreGreater, String chainalysisScoreGreater, String scoreFilterScoreProvider, String scoreFilterScorechainFiltersScoreInBelow, String scoreFilterScorechainFiltersScoreOutBelow, Boolean scoreFilterScorechainFiltersScoreExclusive, String scoreFilterCoinfirmFiltersScoreGreater, String scoreFilterChainalysisFiltersScoreGreater, String scoreFilterEllipticFiltersScoreGreater, final ApiCallback<TgvalidatordExportAddressesReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceExportAddressesValidateBeforeCall(walletId, currency, format, query, scoreProvider, scoreInBelow, scoreOutBelow, scoreExclusive, customerId, coinfirmScoreGreater, chainalysisScoreGreater, scoreFilterScoreProvider, scoreFilterScorechainFiltersScoreInBelow, scoreFilterScorechainFiltersScoreOutBelow, scoreFilterScorechainFiltersScoreExclusive, scoreFilterCoinfirmFiltersScoreGreater, scoreFilterChainalysisFiltersScoreGreater, scoreFilterEllipticFiltersScoreGreater, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordExportAddressesReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceGetAddress
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetAddressCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/addresses/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceGetAddressValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling walletServiceGetAddress(Async)");
        }

        return walletServiceGetAddressCall(id, _callback);

    }

    /**
     * Get an address
     * This endpoint returns an address
     * @param id  (required)
     * @return TgvalidatordGetAddressReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordGetAddressReply walletServiceGetAddress(String id) throws ApiException {
        ApiResponse<TgvalidatordGetAddressReply> localVarResp = walletServiceGetAddressWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get an address
     * This endpoint returns an address
     * @param id  (required)
     * @return ApiResponse&lt;TgvalidatordGetAddressReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordGetAddressReply> walletServiceGetAddressWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = walletServiceGetAddressValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetAddressReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an address (asynchronously)
     * This endpoint returns an address
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetAddressAsync(String id, final ApiCallback<TgvalidatordGetAddressReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceGetAddressValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetAddressReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceGetAddressBalanceHistory
     * @param id  (required)
     * @param intervalHours  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetAddressBalanceHistoryCall(String id, String intervalHours, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/addresses/{id}/balances/history"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (intervalHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("intervalHours", intervalHours));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceGetAddressBalanceHistoryValidateBeforeCall(String id, String intervalHours, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling walletServiceGetAddressBalanceHistory(Async)");
        }

        return walletServiceGetAddressBalanceHistoryCall(id, intervalHours, _callback);

    }

    /**
     * List address&#39; balances history
     * This endpoint returns the balances history of a given address
     * @param id  (required)
     * @param intervalHours  (optional)
     * @return TgvalidatordGetAddressBalanceHistoryReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordGetAddressBalanceHistoryReply walletServiceGetAddressBalanceHistory(String id, String intervalHours) throws ApiException {
        ApiResponse<TgvalidatordGetAddressBalanceHistoryReply> localVarResp = walletServiceGetAddressBalanceHistoryWithHttpInfo(id, intervalHours);
        return localVarResp.getData();
    }

    /**
     * List address&#39; balances history
     * This endpoint returns the balances history of a given address
     * @param id  (required)
     * @param intervalHours  (optional)
     * @return ApiResponse&lt;TgvalidatordGetAddressBalanceHistoryReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordGetAddressBalanceHistoryReply> walletServiceGetAddressBalanceHistoryWithHttpInfo(String id, String intervalHours) throws ApiException {
        okhttp3.Call localVarCall = walletServiceGetAddressBalanceHistoryValidateBeforeCall(id, intervalHours, null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetAddressBalanceHistoryReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List address&#39; balances history (asynchronously)
     * This endpoint returns the balances history of a given address
     * @param id  (required)
     * @param intervalHours  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetAddressBalanceHistoryAsync(String id, String intervalHours, final ApiCallback<TgvalidatordGetAddressBalanceHistoryReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceGetAddressBalanceHistoryValidateBeforeCall(id, intervalHours, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetAddressBalanceHistoryReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceGetAddressProofOfReserve
     * @param id  (required)
     * @param challenge  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetAddressProofOfReserveCall(String id, String challenge, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/addresses/{id}/proofofreserve"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (challenge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("challenge", challenge));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceGetAddressProofOfReserveValidateBeforeCall(String id, String challenge, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling walletServiceGetAddressProofOfReserve(Async)");
        }

        return walletServiceGetAddressProofOfReserveCall(id, challenge, _callback);

    }

    /**
     * Get the proof of reserve of an address
     * This endpoint returns the proof of reserve of an address. The relevance of response fields is specific to the request type.
     * @param id  (required)
     * @param challenge  (optional)
     * @return TgvalidatordGetAddressProofOfReserveReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordGetAddressProofOfReserveReply walletServiceGetAddressProofOfReserve(String id, String challenge) throws ApiException {
        ApiResponse<TgvalidatordGetAddressProofOfReserveReply> localVarResp = walletServiceGetAddressProofOfReserveWithHttpInfo(id, challenge);
        return localVarResp.getData();
    }

    /**
     * Get the proof of reserve of an address
     * This endpoint returns the proof of reserve of an address. The relevance of response fields is specific to the request type.
     * @param id  (required)
     * @param challenge  (optional)
     * @return ApiResponse&lt;TgvalidatordGetAddressProofOfReserveReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordGetAddressProofOfReserveReply> walletServiceGetAddressProofOfReserveWithHttpInfo(String id, String challenge) throws ApiException {
        okhttp3.Call localVarCall = walletServiceGetAddressProofOfReserveValidateBeforeCall(id, challenge, null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetAddressProofOfReserveReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the proof of reserve of an address (asynchronously)
     * This endpoint returns the proof of reserve of an address. The relevance of response fields is specific to the request type.
     * @param id  (required)
     * @param challenge  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetAddressProofOfReserveAsync(String id, String challenge, final ApiCallback<TgvalidatordGetAddressProofOfReserveReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceGetAddressProofOfReserveValidateBeforeCall(id, challenge, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetAddressProofOfReserveReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceGetAddressTokens
     * @param id  (required)
     * @param limit  (optional)
     * @param cursor  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetAddressTokensCall(String id, String limit, byte[] cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/addresses/{id}/tokens"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceGetAddressTokensValidateBeforeCall(String id, String limit, byte[] cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling walletServiceGetAddressTokens(Async)");
        }

        return walletServiceGetAddressTokensCall(id, limit, cursor, _callback);

    }

    /**
     * Get the list of tokens for an address
     * This endpoint returns the list of tokens with their balances held by a given address.
     * @param id  (required)
     * @param limit  (optional)
     * @param cursor  (optional)
     * @return TgvalidatordGetAddressTokensReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordGetAddressTokensReply walletServiceGetAddressTokens(String id, String limit, byte[] cursor) throws ApiException {
        ApiResponse<TgvalidatordGetAddressTokensReply> localVarResp = walletServiceGetAddressTokensWithHttpInfo(id, limit, cursor);
        return localVarResp.getData();
    }

    /**
     * Get the list of tokens for an address
     * This endpoint returns the list of tokens with their balances held by a given address.
     * @param id  (required)
     * @param limit  (optional)
     * @param cursor  (optional)
     * @return ApiResponse&lt;TgvalidatordGetAddressTokensReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordGetAddressTokensReply> walletServiceGetAddressTokensWithHttpInfo(String id, String limit, byte[] cursor) throws ApiException {
        okhttp3.Call localVarCall = walletServiceGetAddressTokensValidateBeforeCall(id, limit, cursor, null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetAddressTokensReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of tokens for an address (asynchronously)
     * This endpoint returns the list of tokens with their balances held by a given address.
     * @param id  (required)
     * @param limit  (optional)
     * @param cursor  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetAddressTokensAsync(String id, String limit, byte[] cursor, final ApiCallback<TgvalidatordGetAddressTokensReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceGetAddressTokensValidateBeforeCall(id, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetAddressTokensReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceGetAddressUTXOs
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetAddressUTXOsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/addresses/{id}/utxos"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceGetAddressUTXOsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling walletServiceGetAddressUTXOs(Async)");
        }

        return walletServiceGetAddressUTXOsCall(id, _callback);

    }

    /**
     * List UTXOs of an address
     * This endpoint returns a list of UTXOs of a given address. In the case of the ADA blockchain, the value returned is the one from the native currency. Result is sorted by (address, id) DESC.
     * @param id  (required)
     * @return TgvalidatordGetAddressUTXOsReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordGetAddressUTXOsReply walletServiceGetAddressUTXOs(String id) throws ApiException {
        ApiResponse<TgvalidatordGetAddressUTXOsReply> localVarResp = walletServiceGetAddressUTXOsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * List UTXOs of an address
     * This endpoint returns a list of UTXOs of a given address. In the case of the ADA blockchain, the value returned is the one from the native currency. Result is sorted by (address, id) DESC.
     * @param id  (required)
     * @return ApiResponse&lt;TgvalidatordGetAddressUTXOsReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordGetAddressUTXOsReply> walletServiceGetAddressUTXOsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = walletServiceGetAddressUTXOsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetAddressUTXOsReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List UTXOs of an address (asynchronously)
     * This endpoint returns a list of UTXOs of a given address. In the case of the ADA blockchain, the value returned is the one from the native currency. Result is sorted by (address, id) DESC.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetAddressUTXOsAsync(String id, final ApiCallback<TgvalidatordGetAddressUTXOsReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceGetAddressUTXOsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetAddressUTXOsReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceGetAddresses
     * @param currency Filter on IDs or symbols of the currency (optional)
     * @param query  (optional)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param scoreProvider Deprecated. Use scoreFilter instead. (optional)
     * @param scoreInBelow Deprecated. Use scoreFilter instead. (optional)
     * @param scoreOutBelow Deprecated. Use scoreFilter instead. (optional)
     * @param scoreExclusive Deprecated. Use scoreFilter instead. (optional)
     * @param onlyPositiveBalance Set this parameter to true to get only addresses with a positive unconfirmed balance (optional)
     * @param sortBy Set this parameter to select the type on which you want to sort.The types accepted yet are: BALANCE and ADDRESSID (optional)
     * @param sortOrder Set this parameter to ASC to get the addresses sorted in ascending order or DESC to get them in descending order. (optional)
     * @param balanceBelow Filter addresses and keep only addresses with a balance below the threshold. (optional)
     * @param balanceAbove Filter addresses and keep only addresses with a balance above the threshold. (optional)
     * @param walletId  (optional)
     * @param customerId  (optional)
     * @param coinfirmScoreGreater Deprecated. Use scoreFilter instead. (optional)
     * @param chainalysisScoreGreater Deprecated. Use scoreFilter instead. (optional)
     * @param tagIDs Filter addresses with a &#39;OR&#39; combination of tag IDs (optional)
     * @param blockchain  (optional)
     * @param network  (optional)
     * @param addressIds Filter addresses with a list of address IDs. (optional)
     * @param nfts One of include / exclude / only depending on whether you want to include addresses of type NFTs (or you want only those) (optional)
     * @param addresses Filter addresses with a list of blockchain addresses (hashes).The blockchain needs to be specified when using this filter. (optional)
     * @param scoreFilterScoreProvider Specify the score provider to filter on, or empty.Each provider has associated filter parameters that can be set.Supported values: &#39;scorechain&#39;, &#39;coinfirm&#39;, &#39;chainalysis&#39;, &#39;elliptic&#39; (optional)
     * @param scoreFilterScorechainFiltersScoreInBelow Filter addresses under a Scorechain incoming score threshold. (optional)
     * @param scoreFilterScorechainFiltersScoreOutBelow Filter addresses under a Scorechain outgoing score threshold. (optional)
     * @param scoreFilterScorechainFiltersScoreExclusive By default when both Scorechain scores scoreInBelow and scoreOutBelow are provided, it returns the addresses matching (scoreInBelow AND scoreOutBelow). When scoreExclusive is set to true, it will return the addresses matching (scoreInBelow OR scoreOutBelow). (optional)
     * @param scoreFilterCoinfirmFiltersScoreGreater Filter addresses with a Coinfirm C-score above threshold. (optional)
     * @param scoreFilterChainalysisFiltersScoreGreater Filter addresses with a Chainalysis risk score above threshold. (optional)
     * @param scoreFilterEllipticFiltersScoreGreater Filter addresses with an Elliptic risk score above threshold. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetAddressesCall(String currency, String query, String limit, String offset, String scoreProvider, String scoreInBelow, String scoreOutBelow, Boolean scoreExclusive, Boolean onlyPositiveBalance, String sortBy, String sortOrder, String balanceBelow, String balanceAbove, String walletId, String customerId, String coinfirmScoreGreater, String chainalysisScoreGreater, List<String> tagIDs, String blockchain, String network, List<String> addressIds, String nfts, List<String> addresses, String scoreFilterScoreProvider, String scoreFilterScorechainFiltersScoreInBelow, String scoreFilterScorechainFiltersScoreOutBelow, Boolean scoreFilterScorechainFiltersScoreExclusive, String scoreFilterCoinfirmFiltersScoreGreater, String scoreFilterChainalysisFiltersScoreGreater, String scoreFilterEllipticFiltersScoreGreater, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (scoreProvider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreProvider", scoreProvider));
        }

        if (scoreInBelow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreInBelow", scoreInBelow));
        }

        if (scoreOutBelow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreOutBelow", scoreOutBelow));
        }

        if (scoreExclusive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreExclusive", scoreExclusive));
        }

        if (onlyPositiveBalance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyPositiveBalance", onlyPositiveBalance));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (balanceBelow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("balanceBelow", balanceBelow));
        }

        if (balanceAbove != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("balanceAbove", balanceAbove));
        }

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletId", walletId));
        }

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerId", customerId));
        }

        if (coinfirmScoreGreater != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coinfirmScoreGreater", coinfirmScoreGreater));
        }

        if (chainalysisScoreGreater != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chainalysisScoreGreater", chainalysisScoreGreater));
        }

        if (tagIDs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tagIDs", tagIDs));
        }

        if (blockchain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blockchain", blockchain));
        }

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        if (addressIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "addressIds", addressIds));
        }

        if (nfts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nfts", nfts));
        }

        if (addresses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "addresses", addresses));
        }

        if (scoreFilterScoreProvider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreFilter.scoreProvider", scoreFilterScoreProvider));
        }

        if (scoreFilterScorechainFiltersScoreInBelow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreFilter.scorechainFilters.scoreInBelow", scoreFilterScorechainFiltersScoreInBelow));
        }

        if (scoreFilterScorechainFiltersScoreOutBelow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreFilter.scorechainFilters.scoreOutBelow", scoreFilterScorechainFiltersScoreOutBelow));
        }

        if (scoreFilterScorechainFiltersScoreExclusive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreFilter.scorechainFilters.scoreExclusive", scoreFilterScorechainFiltersScoreExclusive));
        }

        if (scoreFilterCoinfirmFiltersScoreGreater != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreFilter.coinfirmFilters.scoreGreater", scoreFilterCoinfirmFiltersScoreGreater));
        }

        if (scoreFilterChainalysisFiltersScoreGreater != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreFilter.chainalysisFilters.scoreGreater", scoreFilterChainalysisFiltersScoreGreater));
        }

        if (scoreFilterEllipticFiltersScoreGreater != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreFilter.ellipticFilters.scoreGreater", scoreFilterEllipticFiltersScoreGreater));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceGetAddressesValidateBeforeCall(String currency, String query, String limit, String offset, String scoreProvider, String scoreInBelow, String scoreOutBelow, Boolean scoreExclusive, Boolean onlyPositiveBalance, String sortBy, String sortOrder, String balanceBelow, String balanceAbove, String walletId, String customerId, String coinfirmScoreGreater, String chainalysisScoreGreater, List<String> tagIDs, String blockchain, String network, List<String> addressIds, String nfts, List<String> addresses, String scoreFilterScoreProvider, String scoreFilterScorechainFiltersScoreInBelow, String scoreFilterScorechainFiltersScoreOutBelow, Boolean scoreFilterScorechainFiltersScoreExclusive, String scoreFilterCoinfirmFiltersScoreGreater, String scoreFilterChainalysisFiltersScoreGreater, String scoreFilterEllipticFiltersScoreGreater, final ApiCallback _callback) throws ApiException {
        return walletServiceGetAddressesCall(currency, query, limit, offset, scoreProvider, scoreInBelow, scoreOutBelow, scoreExclusive, onlyPositiveBalance, sortBy, sortOrder, balanceBelow, balanceAbove, walletId, customerId, coinfirmScoreGreater, chainalysisScoreGreater, tagIDs, blockchain, network, addressIds, nfts, addresses, scoreFilterScoreProvider, scoreFilterScorechainFiltersScoreInBelow, scoreFilterScorechainFiltersScoreOutBelow, scoreFilterScorechainFiltersScoreExclusive, scoreFilterCoinfirmFiltersScoreGreater, scoreFilterChainalysisFiltersScoreGreater, scoreFilterEllipticFiltersScoreGreater, _callback);

    }

    /**
     * List addresses
     * This endpoint returns a list of addresses
     * @param currency Filter on IDs or symbols of the currency (optional)
     * @param query  (optional)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param scoreProvider Deprecated. Use scoreFilter instead. (optional)
     * @param scoreInBelow Deprecated. Use scoreFilter instead. (optional)
     * @param scoreOutBelow Deprecated. Use scoreFilter instead. (optional)
     * @param scoreExclusive Deprecated. Use scoreFilter instead. (optional)
     * @param onlyPositiveBalance Set this parameter to true to get only addresses with a positive unconfirmed balance (optional)
     * @param sortBy Set this parameter to select the type on which you want to sort.The types accepted yet are: BALANCE and ADDRESSID (optional)
     * @param sortOrder Set this parameter to ASC to get the addresses sorted in ascending order or DESC to get them in descending order. (optional)
     * @param balanceBelow Filter addresses and keep only addresses with a balance below the threshold. (optional)
     * @param balanceAbove Filter addresses and keep only addresses with a balance above the threshold. (optional)
     * @param walletId  (optional)
     * @param customerId  (optional)
     * @param coinfirmScoreGreater Deprecated. Use scoreFilter instead. (optional)
     * @param chainalysisScoreGreater Deprecated. Use scoreFilter instead. (optional)
     * @param tagIDs Filter addresses with a &#39;OR&#39; combination of tag IDs (optional)
     * @param blockchain  (optional)
     * @param network  (optional)
     * @param addressIds Filter addresses with a list of address IDs. (optional)
     * @param nfts One of include / exclude / only depending on whether you want to include addresses of type NFTs (or you want only those) (optional)
     * @param addresses Filter addresses with a list of blockchain addresses (hashes).The blockchain needs to be specified when using this filter. (optional)
     * @param scoreFilterScoreProvider Specify the score provider to filter on, or empty.Each provider has associated filter parameters that can be set.Supported values: &#39;scorechain&#39;, &#39;coinfirm&#39;, &#39;chainalysis&#39;, &#39;elliptic&#39; (optional)
     * @param scoreFilterScorechainFiltersScoreInBelow Filter addresses under a Scorechain incoming score threshold. (optional)
     * @param scoreFilterScorechainFiltersScoreOutBelow Filter addresses under a Scorechain outgoing score threshold. (optional)
     * @param scoreFilterScorechainFiltersScoreExclusive By default when both Scorechain scores scoreInBelow and scoreOutBelow are provided, it returns the addresses matching (scoreInBelow AND scoreOutBelow). When scoreExclusive is set to true, it will return the addresses matching (scoreInBelow OR scoreOutBelow). (optional)
     * @param scoreFilterCoinfirmFiltersScoreGreater Filter addresses with a Coinfirm C-score above threshold. (optional)
     * @param scoreFilterChainalysisFiltersScoreGreater Filter addresses with a Chainalysis risk score above threshold. (optional)
     * @param scoreFilterEllipticFiltersScoreGreater Filter addresses with an Elliptic risk score above threshold. (optional)
     * @return TgvalidatordGetAddressesReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordGetAddressesReply walletServiceGetAddresses(String currency, String query, String limit, String offset, String scoreProvider, String scoreInBelow, String scoreOutBelow, Boolean scoreExclusive, Boolean onlyPositiveBalance, String sortBy, String sortOrder, String balanceBelow, String balanceAbove, String walletId, String customerId, String coinfirmScoreGreater, String chainalysisScoreGreater, List<String> tagIDs, String blockchain, String network, List<String> addressIds, String nfts, List<String> addresses, String scoreFilterScoreProvider, String scoreFilterScorechainFiltersScoreInBelow, String scoreFilterScorechainFiltersScoreOutBelow, Boolean scoreFilterScorechainFiltersScoreExclusive, String scoreFilterCoinfirmFiltersScoreGreater, String scoreFilterChainalysisFiltersScoreGreater, String scoreFilterEllipticFiltersScoreGreater) throws ApiException {
        ApiResponse<TgvalidatordGetAddressesReply> localVarResp = walletServiceGetAddressesWithHttpInfo(currency, query, limit, offset, scoreProvider, scoreInBelow, scoreOutBelow, scoreExclusive, onlyPositiveBalance, sortBy, sortOrder, balanceBelow, balanceAbove, walletId, customerId, coinfirmScoreGreater, chainalysisScoreGreater, tagIDs, blockchain, network, addressIds, nfts, addresses, scoreFilterScoreProvider, scoreFilterScorechainFiltersScoreInBelow, scoreFilterScorechainFiltersScoreOutBelow, scoreFilterScorechainFiltersScoreExclusive, scoreFilterCoinfirmFiltersScoreGreater, scoreFilterChainalysisFiltersScoreGreater, scoreFilterEllipticFiltersScoreGreater);
        return localVarResp.getData();
    }

    /**
     * List addresses
     * This endpoint returns a list of addresses
     * @param currency Filter on IDs or symbols of the currency (optional)
     * @param query  (optional)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param scoreProvider Deprecated. Use scoreFilter instead. (optional)
     * @param scoreInBelow Deprecated. Use scoreFilter instead. (optional)
     * @param scoreOutBelow Deprecated. Use scoreFilter instead. (optional)
     * @param scoreExclusive Deprecated. Use scoreFilter instead. (optional)
     * @param onlyPositiveBalance Set this parameter to true to get only addresses with a positive unconfirmed balance (optional)
     * @param sortBy Set this parameter to select the type on which you want to sort.The types accepted yet are: BALANCE and ADDRESSID (optional)
     * @param sortOrder Set this parameter to ASC to get the addresses sorted in ascending order or DESC to get them in descending order. (optional)
     * @param balanceBelow Filter addresses and keep only addresses with a balance below the threshold. (optional)
     * @param balanceAbove Filter addresses and keep only addresses with a balance above the threshold. (optional)
     * @param walletId  (optional)
     * @param customerId  (optional)
     * @param coinfirmScoreGreater Deprecated. Use scoreFilter instead. (optional)
     * @param chainalysisScoreGreater Deprecated. Use scoreFilter instead. (optional)
     * @param tagIDs Filter addresses with a &#39;OR&#39; combination of tag IDs (optional)
     * @param blockchain  (optional)
     * @param network  (optional)
     * @param addressIds Filter addresses with a list of address IDs. (optional)
     * @param nfts One of include / exclude / only depending on whether you want to include addresses of type NFTs (or you want only those) (optional)
     * @param addresses Filter addresses with a list of blockchain addresses (hashes).The blockchain needs to be specified when using this filter. (optional)
     * @param scoreFilterScoreProvider Specify the score provider to filter on, or empty.Each provider has associated filter parameters that can be set.Supported values: &#39;scorechain&#39;, &#39;coinfirm&#39;, &#39;chainalysis&#39;, &#39;elliptic&#39; (optional)
     * @param scoreFilterScorechainFiltersScoreInBelow Filter addresses under a Scorechain incoming score threshold. (optional)
     * @param scoreFilterScorechainFiltersScoreOutBelow Filter addresses under a Scorechain outgoing score threshold. (optional)
     * @param scoreFilterScorechainFiltersScoreExclusive By default when both Scorechain scores scoreInBelow and scoreOutBelow are provided, it returns the addresses matching (scoreInBelow AND scoreOutBelow). When scoreExclusive is set to true, it will return the addresses matching (scoreInBelow OR scoreOutBelow). (optional)
     * @param scoreFilterCoinfirmFiltersScoreGreater Filter addresses with a Coinfirm C-score above threshold. (optional)
     * @param scoreFilterChainalysisFiltersScoreGreater Filter addresses with a Chainalysis risk score above threshold. (optional)
     * @param scoreFilterEllipticFiltersScoreGreater Filter addresses with an Elliptic risk score above threshold. (optional)
     * @return ApiResponse&lt;TgvalidatordGetAddressesReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordGetAddressesReply> walletServiceGetAddressesWithHttpInfo(String currency, String query, String limit, String offset, String scoreProvider, String scoreInBelow, String scoreOutBelow, Boolean scoreExclusive, Boolean onlyPositiveBalance, String sortBy, String sortOrder, String balanceBelow, String balanceAbove, String walletId, String customerId, String coinfirmScoreGreater, String chainalysisScoreGreater, List<String> tagIDs, String blockchain, String network, List<String> addressIds, String nfts, List<String> addresses, String scoreFilterScoreProvider, String scoreFilterScorechainFiltersScoreInBelow, String scoreFilterScorechainFiltersScoreOutBelow, Boolean scoreFilterScorechainFiltersScoreExclusive, String scoreFilterCoinfirmFiltersScoreGreater, String scoreFilterChainalysisFiltersScoreGreater, String scoreFilterEllipticFiltersScoreGreater) throws ApiException {
        okhttp3.Call localVarCall = walletServiceGetAddressesValidateBeforeCall(currency, query, limit, offset, scoreProvider, scoreInBelow, scoreOutBelow, scoreExclusive, onlyPositiveBalance, sortBy, sortOrder, balanceBelow, balanceAbove, walletId, customerId, coinfirmScoreGreater, chainalysisScoreGreater, tagIDs, blockchain, network, addressIds, nfts, addresses, scoreFilterScoreProvider, scoreFilterScorechainFiltersScoreInBelow, scoreFilterScorechainFiltersScoreOutBelow, scoreFilterScorechainFiltersScoreExclusive, scoreFilterCoinfirmFiltersScoreGreater, scoreFilterChainalysisFiltersScoreGreater, scoreFilterEllipticFiltersScoreGreater, null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetAddressesReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List addresses (asynchronously)
     * This endpoint returns a list of addresses
     * @param currency Filter on IDs or symbols of the currency (optional)
     * @param query  (optional)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param scoreProvider Deprecated. Use scoreFilter instead. (optional)
     * @param scoreInBelow Deprecated. Use scoreFilter instead. (optional)
     * @param scoreOutBelow Deprecated. Use scoreFilter instead. (optional)
     * @param scoreExclusive Deprecated. Use scoreFilter instead. (optional)
     * @param onlyPositiveBalance Set this parameter to true to get only addresses with a positive unconfirmed balance (optional)
     * @param sortBy Set this parameter to select the type on which you want to sort.The types accepted yet are: BALANCE and ADDRESSID (optional)
     * @param sortOrder Set this parameter to ASC to get the addresses sorted in ascending order or DESC to get them in descending order. (optional)
     * @param balanceBelow Filter addresses and keep only addresses with a balance below the threshold. (optional)
     * @param balanceAbove Filter addresses and keep only addresses with a balance above the threshold. (optional)
     * @param walletId  (optional)
     * @param customerId  (optional)
     * @param coinfirmScoreGreater Deprecated. Use scoreFilter instead. (optional)
     * @param chainalysisScoreGreater Deprecated. Use scoreFilter instead. (optional)
     * @param tagIDs Filter addresses with a &#39;OR&#39; combination of tag IDs (optional)
     * @param blockchain  (optional)
     * @param network  (optional)
     * @param addressIds Filter addresses with a list of address IDs. (optional)
     * @param nfts One of include / exclude / only depending on whether you want to include addresses of type NFTs (or you want only those) (optional)
     * @param addresses Filter addresses with a list of blockchain addresses (hashes).The blockchain needs to be specified when using this filter. (optional)
     * @param scoreFilterScoreProvider Specify the score provider to filter on, or empty.Each provider has associated filter parameters that can be set.Supported values: &#39;scorechain&#39;, &#39;coinfirm&#39;, &#39;chainalysis&#39;, &#39;elliptic&#39; (optional)
     * @param scoreFilterScorechainFiltersScoreInBelow Filter addresses under a Scorechain incoming score threshold. (optional)
     * @param scoreFilterScorechainFiltersScoreOutBelow Filter addresses under a Scorechain outgoing score threshold. (optional)
     * @param scoreFilterScorechainFiltersScoreExclusive By default when both Scorechain scores scoreInBelow and scoreOutBelow are provided, it returns the addresses matching (scoreInBelow AND scoreOutBelow). When scoreExclusive is set to true, it will return the addresses matching (scoreInBelow OR scoreOutBelow). (optional)
     * @param scoreFilterCoinfirmFiltersScoreGreater Filter addresses with a Coinfirm C-score above threshold. (optional)
     * @param scoreFilterChainalysisFiltersScoreGreater Filter addresses with a Chainalysis risk score above threshold. (optional)
     * @param scoreFilterEllipticFiltersScoreGreater Filter addresses with an Elliptic risk score above threshold. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetAddressesAsync(String currency, String query, String limit, String offset, String scoreProvider, String scoreInBelow, String scoreOutBelow, Boolean scoreExclusive, Boolean onlyPositiveBalance, String sortBy, String sortOrder, String balanceBelow, String balanceAbove, String walletId, String customerId, String coinfirmScoreGreater, String chainalysisScoreGreater, List<String> tagIDs, String blockchain, String network, List<String> addressIds, String nfts, List<String> addresses, String scoreFilterScoreProvider, String scoreFilterScorechainFiltersScoreInBelow, String scoreFilterScorechainFiltersScoreOutBelow, Boolean scoreFilterScorechainFiltersScoreExclusive, String scoreFilterCoinfirmFiltersScoreGreater, String scoreFilterChainalysisFiltersScoreGreater, String scoreFilterEllipticFiltersScoreGreater, final ApiCallback<TgvalidatordGetAddressesReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceGetAddressesValidateBeforeCall(currency, query, limit, offset, scoreProvider, scoreInBelow, scoreOutBelow, scoreExclusive, onlyPositiveBalance, sortBy, sortOrder, balanceBelow, balanceAbove, walletId, customerId, coinfirmScoreGreater, chainalysisScoreGreater, tagIDs, blockchain, network, addressIds, nfts, addresses, scoreFilterScoreProvider, scoreFilterScorechainFiltersScoreInBelow, scoreFilterScorechainFiltersScoreOutBelow, scoreFilterScorechainFiltersScoreExclusive, scoreFilterCoinfirmFiltersScoreGreater, scoreFilterChainalysisFiltersScoreGreater, scoreFilterEllipticFiltersScoreGreater, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetAddressesReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceGetAddressesProofOfReserve
     * @param blockchain  (required)
     * @param addresses  (optional)
     * @param challenge  (optional)
     * @param network  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetAddressesProofOfReserveCall(String blockchain, List<String> addresses, String challenge, String network, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/{blockchain}/addresses/proofofreserve"
            .replace("{" + "blockchain" + "}", localVarApiClient.escapeString(blockchain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addresses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "addresses", addresses));
        }

        if (challenge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("challenge", challenge));
        }

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceGetAddressesProofOfReserveValidateBeforeCall(String blockchain, List<String> addresses, String challenge, String network, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockchain' is set
        if (blockchain == null) {
            throw new ApiException("Missing the required parameter 'blockchain' when calling walletServiceGetAddressesProofOfReserve(Async)");
        }

        return walletServiceGetAddressesProofOfReserveCall(blockchain, addresses, challenge, network, _callback);

    }

    /**
     * Get the proof of reserve of a list of addresses
     * This endpoint returns the proof of reserve for a list of addresses.  The relevance of response fields is specific to the request type.
     * @param blockchain  (required)
     * @param addresses  (optional)
     * @param challenge  (optional)
     * @param network  (optional)
     * @return TgvalidatordGetAddressesProofOfReserveReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordGetAddressesProofOfReserveReply walletServiceGetAddressesProofOfReserve(String blockchain, List<String> addresses, String challenge, String network) throws ApiException {
        ApiResponse<TgvalidatordGetAddressesProofOfReserveReply> localVarResp = walletServiceGetAddressesProofOfReserveWithHttpInfo(blockchain, addresses, challenge, network);
        return localVarResp.getData();
    }

    /**
     * Get the proof of reserve of a list of addresses
     * This endpoint returns the proof of reserve for a list of addresses.  The relevance of response fields is specific to the request type.
     * @param blockchain  (required)
     * @param addresses  (optional)
     * @param challenge  (optional)
     * @param network  (optional)
     * @return ApiResponse&lt;TgvalidatordGetAddressesProofOfReserveReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordGetAddressesProofOfReserveReply> walletServiceGetAddressesProofOfReserveWithHttpInfo(String blockchain, List<String> addresses, String challenge, String network) throws ApiException {
        okhttp3.Call localVarCall = walletServiceGetAddressesProofOfReserveValidateBeforeCall(blockchain, addresses, challenge, network, null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetAddressesProofOfReserveReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the proof of reserve of a list of addresses (asynchronously)
     * This endpoint returns the proof of reserve for a list of addresses.  The relevance of response fields is specific to the request type.
     * @param blockchain  (required)
     * @param addresses  (optional)
     * @param challenge  (optional)
     * @param network  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetAddressesProofOfReserveAsync(String blockchain, List<String> addresses, String challenge, String network, final ApiCallback<TgvalidatordGetAddressesProofOfReserveReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceGetAddressesProofOfReserveValidateBeforeCall(blockchain, addresses, challenge, network, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetAddressesProofOfReserveReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceGetAddressesStatus
     * @param walletIds  (optional)
     * @param addressIds  (optional)
     * @param currencyIds  (optional)
     * @param sortingSortOrder  (optional)
     * @param cursorCurrentPage Base64-encoded string representing the current window of data (optional)
     * @param cursorPageRequest The page to request, w.r.t the current page. Can be one of &#x60;FIRST&#x60;, &#x60;PREVIOUS&#x60;, &#x60;NEXT&#x60;, &#x60;LAST&#x60; (optional)
     * @param cursorPageSize The size of the page requested. The handling service should impose a hard limit on this (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetAddressesStatusCall(List<String> walletIds, List<String> addressIds, List<String> currencyIds, String sortingSortOrder, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/addresses/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (walletIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "walletIds", walletIds));
        }

        if (addressIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "addressIds", addressIds));
        }

        if (currencyIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "currencyIds", currencyIds));
        }

        if (sortingSortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sorting.sortOrder", sortingSortOrder));
        }

        if (cursorCurrentPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor.currentPage", cursorCurrentPage));
        }

        if (cursorPageRequest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor.pageRequest", cursorPageRequest));
        }

        if (cursorPageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor.pageSize", cursorPageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceGetAddressesStatusValidateBeforeCall(List<String> walletIds, List<String> addressIds, List<String> currencyIds, String sortingSortOrder, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize, final ApiCallback _callback) throws ApiException {
        return walletServiceGetAddressesStatusCall(walletIds, addressIds, currencyIds, sortingSortOrder, cursorCurrentPage, cursorPageRequest, cursorPageSize, _callback);

    }

    /**
     * List addresses&#39;s status
     * This endpoint returns a list of addresses with their status
     * @param walletIds  (optional)
     * @param addressIds  (optional)
     * @param currencyIds  (optional)
     * @param sortingSortOrder  (optional)
     * @param cursorCurrentPage Base64-encoded string representing the current window of data (optional)
     * @param cursorPageRequest The page to request, w.r.t the current page. Can be one of &#x60;FIRST&#x60;, &#x60;PREVIOUS&#x60;, &#x60;NEXT&#x60;, &#x60;LAST&#x60; (optional)
     * @param cursorPageSize The size of the page requested. The handling service should impose a hard limit on this (optional)
     * @return TgvalidatordGetAddressesStatusReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordGetAddressesStatusReply walletServiceGetAddressesStatus(List<String> walletIds, List<String> addressIds, List<String> currencyIds, String sortingSortOrder, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize) throws ApiException {
        ApiResponse<TgvalidatordGetAddressesStatusReply> localVarResp = walletServiceGetAddressesStatusWithHttpInfo(walletIds, addressIds, currencyIds, sortingSortOrder, cursorCurrentPage, cursorPageRequest, cursorPageSize);
        return localVarResp.getData();
    }

    /**
     * List addresses&#39;s status
     * This endpoint returns a list of addresses with their status
     * @param walletIds  (optional)
     * @param addressIds  (optional)
     * @param currencyIds  (optional)
     * @param sortingSortOrder  (optional)
     * @param cursorCurrentPage Base64-encoded string representing the current window of data (optional)
     * @param cursorPageRequest The page to request, w.r.t the current page. Can be one of &#x60;FIRST&#x60;, &#x60;PREVIOUS&#x60;, &#x60;NEXT&#x60;, &#x60;LAST&#x60; (optional)
     * @param cursorPageSize The size of the page requested. The handling service should impose a hard limit on this (optional)
     * @return ApiResponse&lt;TgvalidatordGetAddressesStatusReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordGetAddressesStatusReply> walletServiceGetAddressesStatusWithHttpInfo(List<String> walletIds, List<String> addressIds, List<String> currencyIds, String sortingSortOrder, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize) throws ApiException {
        okhttp3.Call localVarCall = walletServiceGetAddressesStatusValidateBeforeCall(walletIds, addressIds, currencyIds, sortingSortOrder, cursorCurrentPage, cursorPageRequest, cursorPageSize, null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetAddressesStatusReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List addresses&#39;s status (asynchronously)
     * This endpoint returns a list of addresses with their status
     * @param walletIds  (optional)
     * @param addressIds  (optional)
     * @param currencyIds  (optional)
     * @param sortingSortOrder  (optional)
     * @param cursorCurrentPage Base64-encoded string representing the current window of data (optional)
     * @param cursorPageRequest The page to request, w.r.t the current page. Can be one of &#x60;FIRST&#x60;, &#x60;PREVIOUS&#x60;, &#x60;NEXT&#x60;, &#x60;LAST&#x60; (optional)
     * @param cursorPageSize The size of the page requested. The handling service should impose a hard limit on this (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetAddressesStatusAsync(List<String> walletIds, List<String> addressIds, List<String> currencyIds, String sortingSortOrder, String cursorCurrentPage, String cursorPageRequest, String cursorPageSize, final ApiCallback<TgvalidatordGetAddressesStatusReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceGetAddressesStatusValidateBeforeCall(walletIds, addressIds, currencyIds, sortingSortOrder, cursorCurrentPage, cursorPageRequest, cursorPageSize, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetAddressesStatusReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletServiceGetLightAddresses
     * @param uniqueCurrencyFilterBlockchain  (required)
     * @param uniqueCurrencyFilterNetwork  (required)
     * @param currencyID One of the currencyID or uniqueCurrencyFilter fields must be provided (optional)
     * @param uniqueCurrencyFilterTokenContractAddress If this parameter is set, the currency returned will be a token with the specified contract address. If not set, the currency returned will be the native currency of the blockchain. (optional)
     * @param uniqueCurrencyFilterTokenID For some blockchains (ex. ALGO, XTZ) a tokenContractAddress might contain multiple assets. The tokenID is used to differentiate between those assets. If not set, the currency returned won&#39;t have any tokenID defined. (optional)
     * @param addresses  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetLightAddressesCall(String uniqueCurrencyFilterBlockchain, String uniqueCurrencyFilterNetwork, String currencyID, String uniqueCurrencyFilterTokenContractAddress, String uniqueCurrencyFilterTokenID, List<String> addresses, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/addresses/light";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currencyID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencyID", currencyID));
        }

        if (uniqueCurrencyFilterBlockchain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uniqueCurrencyFilter.blockchain", uniqueCurrencyFilterBlockchain));
        }

        if (uniqueCurrencyFilterNetwork != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uniqueCurrencyFilter.network", uniqueCurrencyFilterNetwork));
        }

        if (uniqueCurrencyFilterTokenContractAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uniqueCurrencyFilter.tokenContractAddress", uniqueCurrencyFilterTokenContractAddress));
        }

        if (uniqueCurrencyFilterTokenID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uniqueCurrencyFilter.tokenID", uniqueCurrencyFilterTokenID));
        }

        if (addresses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "addresses", addresses));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyTPV1" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletServiceGetLightAddressesValidateBeforeCall(String uniqueCurrencyFilterBlockchain, String uniqueCurrencyFilterNetwork, String currencyID, String uniqueCurrencyFilterTokenContractAddress, String uniqueCurrencyFilterTokenID, List<String> addresses, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uniqueCurrencyFilterBlockchain' is set
        if (uniqueCurrencyFilterBlockchain == null) {
            throw new ApiException("Missing the required parameter 'uniqueCurrencyFilterBlockchain' when calling walletServiceGetLightAddresses(Async)");
        }

        // verify the required parameter 'uniqueCurrencyFilterNetwork' is set
        if (uniqueCurrencyFilterNetwork == null) {
            throw new ApiException("Missing the required parameter 'uniqueCurrencyFilterNetwork' when calling walletServiceGetLightAddresses(Async)");
        }

        return walletServiceGetLightAddressesCall(uniqueCurrencyFilterBlockchain, uniqueCurrencyFilterNetwork, currencyID, uniqueCurrencyFilterTokenContractAddress, uniqueCurrencyFilterTokenID, addresses, _callback);

    }

    /**
     * List light addresses
     * This endpoint returns a list of addresses with light information filtered by a unique currency and a list of addresses. The light address information mainly contains the identifiers. There is no balance, risk score or attributes.
     * @param uniqueCurrencyFilterBlockchain  (required)
     * @param uniqueCurrencyFilterNetwork  (required)
     * @param currencyID One of the currencyID or uniqueCurrencyFilter fields must be provided (optional)
     * @param uniqueCurrencyFilterTokenContractAddress If this parameter is set, the currency returned will be a token with the specified contract address. If not set, the currency returned will be the native currency of the blockchain. (optional)
     * @param uniqueCurrencyFilterTokenID For some blockchains (ex. ALGO, XTZ) a tokenContractAddress might contain multiple assets. The tokenID is used to differentiate between those assets. If not set, the currency returned won&#39;t have any tokenID defined. (optional)
     * @param addresses  (optional)
     * @return TgvalidatordGetLightAddressesReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TgvalidatordGetLightAddressesReply walletServiceGetLightAddresses(String uniqueCurrencyFilterBlockchain, String uniqueCurrencyFilterNetwork, String currencyID, String uniqueCurrencyFilterTokenContractAddress, String uniqueCurrencyFilterTokenID, List<String> addresses) throws ApiException {
        ApiResponse<TgvalidatordGetLightAddressesReply> localVarResp = walletServiceGetLightAddressesWithHttpInfo(uniqueCurrencyFilterBlockchain, uniqueCurrencyFilterNetwork, currencyID, uniqueCurrencyFilterTokenContractAddress, uniqueCurrencyFilterTokenID, addresses);
        return localVarResp.getData();
    }

    /**
     * List light addresses
     * This endpoint returns a list of addresses with light information filtered by a unique currency and a list of addresses. The light address information mainly contains the identifiers. There is no balance, risk score or attributes.
     * @param uniqueCurrencyFilterBlockchain  (required)
     * @param uniqueCurrencyFilterNetwork  (required)
     * @param currencyID One of the currencyID or uniqueCurrencyFilter fields must be provided (optional)
     * @param uniqueCurrencyFilterTokenContractAddress If this parameter is set, the currency returned will be a token with the specified contract address. If not set, the currency returned will be the native currency of the blockchain. (optional)
     * @param uniqueCurrencyFilterTokenID For some blockchains (ex. ALGO, XTZ) a tokenContractAddress might contain multiple assets. The tokenID is used to differentiate between those assets. If not set, the currency returned won&#39;t have any tokenID defined. (optional)
     * @param addresses  (optional)
     * @return ApiResponse&lt;TgvalidatordGetLightAddressesReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TgvalidatordGetLightAddressesReply> walletServiceGetLightAddressesWithHttpInfo(String uniqueCurrencyFilterBlockchain, String uniqueCurrencyFilterNetwork, String currencyID, String uniqueCurrencyFilterTokenContractAddress, String uniqueCurrencyFilterTokenID, List<String> addresses) throws ApiException {
        okhttp3.Call localVarCall = walletServiceGetLightAddressesValidateBeforeCall(uniqueCurrencyFilterBlockchain, uniqueCurrencyFilterNetwork, currencyID, uniqueCurrencyFilterTokenContractAddress, uniqueCurrencyFilterTokenID, addresses, null);
        Type localVarReturnType = new TypeToken<TgvalidatordGetLightAddressesReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List light addresses (asynchronously)
     * This endpoint returns a list of addresses with light information filtered by a unique currency and a list of addresses. The light address information mainly contains the identifiers. There is no balance, risk score or attributes.
     * @param uniqueCurrencyFilterBlockchain  (required)
     * @param uniqueCurrencyFilterNetwork  (required)
     * @param currencyID One of the currencyID or uniqueCurrencyFilter fields must be provided (optional)
     * @param uniqueCurrencyFilterTokenContractAddress If this parameter is set, the currency returned will be a token with the specified contract address. If not set, the currency returned will be the native currency of the blockchain. (optional)
     * @param uniqueCurrencyFilterTokenID For some blockchains (ex. ALGO, XTZ) a tokenContractAddress might contain multiple assets. The tokenID is used to differentiate between those assets. If not set, the currency returned won&#39;t have any tokenID defined. (optional)
     * @param addresses  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: indicates that the server understands the request but refuses to authorize it </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: indicates that the server cannot find the requested resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable: indicates that the server is not ready to handle the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletServiceGetLightAddressesAsync(String uniqueCurrencyFilterBlockchain, String uniqueCurrencyFilterNetwork, String currencyID, String uniqueCurrencyFilterTokenContractAddress, String uniqueCurrencyFilterTokenID, List<String> addresses, final ApiCallback<TgvalidatordGetLightAddressesReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletServiceGetLightAddressesValidateBeforeCall(uniqueCurrencyFilterBlockchain, uniqueCurrencyFilterNetwork, currencyID, uniqueCurrencyFilterTokenContractAddress, uniqueCurrencyFilterTokenID, addresses, _callback);
        Type localVarReturnType = new TypeToken<TgvalidatordGetLightAddressesReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
