/*
 * Taurus-PROTECT APIs
 * Taurus-PROTECT APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.taurushq.sdk.protect.openapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordAddressInfo;
import com.taurushq.sdk.protect.openapi.model.TgvalidatordCurrency;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.taurushq.sdk.protect.openapi.JSON;

/**
 * TgvalidatordTransaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T17:07:27.988152+02:00[Europe/Zurich]", comments = "Generator version: 7.9.0")
public class TgvalidatordTransaction {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private String direction;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<TgvalidatordAddressInfo> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List<TgvalidatordAddressInfo> destinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_AMOUNT_MAIN_UNIT = "amountMainUnit";
  @SerializedName(SERIALIZED_NAME_AMOUNT_MAIN_UNIT)
  private String amountMainUnit;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private String fee;

  public static final String SERIALIZED_NAME_FEE_MAIN_UNIT = "feeMainUnit";
  @SerializedName(SERIALIZED_NAME_FEE_MAIN_UNIT)
  private String feeMainUnit;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private String hash;

  public static final String SERIALIZED_NAME_BLOCK = "block";
  @SerializedName(SERIALIZED_NAME_BLOCK)
  private String block;

  public static final String SERIALIZED_NAME_RECEPTION_DATE = "receptionDate";
  @SerializedName(SERIALIZED_NAME_RECEPTION_DATE)
  private OffsetDateTime receptionDate;

  public static final String SERIALIZED_NAME_CONFIRMATION_DATE = "confirmationDate";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_DATE)
  private OffsetDateTime confirmationDate;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UNIQUE_ID = "uniqueId";
  @SerializedName(SERIALIZED_NAME_UNIQUE_ID)
  private String uniqueId;

  public static final String SERIALIZED_NAME_BLOCKCHAIN = "blockchain";
  @SerializedName(SERIALIZED_NAME_BLOCKCHAIN)
  private String blockchain;

  public static final String SERIALIZED_NAME_ARG1 = "arg1";
  @SerializedName(SERIALIZED_NAME_ARG1)
  private String arg1;

  public static final String SERIALIZED_NAME_ARG2 = "arg2";
  @SerializedName(SERIALIZED_NAME_ARG2)
  private String arg2;

  public static final String SERIALIZED_NAME_CURRENCY_INFO = "currencyInfo";
  @SerializedName(SERIALIZED_NAME_CURRENCY_INFO)
  private TgvalidatordCurrency currencyInfo;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_CONFIRMATION_BLOCK = "confirmationBlock";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_BLOCK)
  private String confirmationBlock;

  public static final String SERIALIZED_NAME_REQUEST_VISIBLE = "requestVisible";
  @SerializedName(SERIALIZED_NAME_REQUEST_VISIBLE)
  private Boolean requestVisible;

  public TgvalidatordTransaction() {
  }

  public TgvalidatordTransaction id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TgvalidatordTransaction direction(String direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Get direction
   * @return direction
   */
  @javax.annotation.Nullable
  public String getDirection() {
    return direction;
  }

  public void setDirection(String direction) {
    this.direction = direction;
  }


  public TgvalidatordTransaction currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public TgvalidatordTransaction sources(List<TgvalidatordAddressInfo> sources) {
    this.sources = sources;
    return this;
  }

  public TgvalidatordTransaction addSourcesItem(TgvalidatordAddressInfo sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @javax.annotation.Nullable
  public List<TgvalidatordAddressInfo> getSources() {
    return sources;
  }

  public void setSources(List<TgvalidatordAddressInfo> sources) {
    this.sources = sources;
  }


  public TgvalidatordTransaction destinations(List<TgvalidatordAddressInfo> destinations) {
    this.destinations = destinations;
    return this;
  }

  public TgvalidatordTransaction addDestinationsItem(TgvalidatordAddressInfo destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

  /**
   * Get destinations
   * @return destinations
   */
  @javax.annotation.Nullable
  public List<TgvalidatordAddressInfo> getDestinations() {
    return destinations;
  }

  public void setDestinations(List<TgvalidatordAddressInfo> destinations) {
    this.destinations = destinations;
  }


  public TgvalidatordTransaction amount(String amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Amount in the smallest currency unit, based on the currency decimals. Example: 1500000000000000000 WEI (smallest ETH unit) corresponds to 1.5 ETH (ETH has 18 decimals places)
   * @return amount
   */
  @javax.annotation.Nullable
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }


  public TgvalidatordTransaction amountMainUnit(String amountMainUnit) {
    this.amountMainUnit = amountMainUnit;
    return this;
  }

  /**
   * Get amountMainUnit
   * @return amountMainUnit
   */
  @javax.annotation.Nullable
  public String getAmountMainUnit() {
    return amountMainUnit;
  }

  public void setAmountMainUnit(String amountMainUnit) {
    this.amountMainUnit = amountMainUnit;
  }


  public TgvalidatordTransaction fee(String fee) {
    this.fee = fee;
    return this;
  }

  /**
   * Get fee
   * @return fee
   */
  @javax.annotation.Nullable
  public String getFee() {
    return fee;
  }

  public void setFee(String fee) {
    this.fee = fee;
  }


  public TgvalidatordTransaction feeMainUnit(String feeMainUnit) {
    this.feeMainUnit = feeMainUnit;
    return this;
  }

  /**
   * Get feeMainUnit
   * @return feeMainUnit
   */
  @javax.annotation.Nullable
  public String getFeeMainUnit() {
    return feeMainUnit;
  }

  public void setFeeMainUnit(String feeMainUnit) {
    this.feeMainUnit = feeMainUnit;
  }


  public TgvalidatordTransaction hash(String hash) {
    this.hash = hash;
    return this;
  }

  /**
   * Get hash
   * @return hash
   */
  @javax.annotation.Nullable
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }


  public TgvalidatordTransaction block(String block) {
    this.block = block;
    return this;
  }

  /**
   * Get block
   * @return block
   */
  @javax.annotation.Nullable
  public String getBlock() {
    return block;
  }

  public void setBlock(String block) {
    this.block = block;
  }


  public TgvalidatordTransaction receptionDate(OffsetDateTime receptionDate) {
    this.receptionDate = receptionDate;
    return this;
  }

  /**
   * Get receptionDate
   * @return receptionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReceptionDate() {
    return receptionDate;
  }

  public void setReceptionDate(OffsetDateTime receptionDate) {
    this.receptionDate = receptionDate;
  }


  public TgvalidatordTransaction confirmationDate(OffsetDateTime confirmationDate) {
    this.confirmationDate = confirmationDate;
    return this;
  }

  /**
   * Get confirmationDate
   * @return confirmationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getConfirmationDate() {
    return confirmationDate;
  }

  public void setConfirmationDate(OffsetDateTime confirmationDate) {
    this.confirmationDate = confirmationDate;
  }


  public TgvalidatordTransaction transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * Get transactionId
   * @return transactionId
   */
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public TgvalidatordTransaction type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public TgvalidatordTransaction uniqueId(String uniqueId) {
    this.uniqueId = uniqueId;
    return this;
  }

  /**
   * Get uniqueId
   * @return uniqueId
   */
  @javax.annotation.Nullable
  public String getUniqueId() {
    return uniqueId;
  }

  public void setUniqueId(String uniqueId) {
    this.uniqueId = uniqueId;
  }


  public TgvalidatordTransaction blockchain(String blockchain) {
    this.blockchain = blockchain;
    return this;
  }

  /**
   * Get blockchain
   * @return blockchain
   */
  @javax.annotation.Nullable
  public String getBlockchain() {
    return blockchain;
  }

  public void setBlockchain(String blockchain) {
    this.blockchain = blockchain;
  }


  public TgvalidatordTransaction arg1(String arg1) {
    this.arg1 = arg1;
    return this;
  }

  /**
   * If set, serves as a sub-identifier to the blockchain field for the type of resource this transaction relates to. Typically a contract address.
   * @return arg1
   */
  @javax.annotation.Nullable
  public String getArg1() {
    return arg1;
  }

  public void setArg1(String arg1) {
    this.arg1 = arg1;
  }


  public TgvalidatordTransaction arg2(String arg2) {
    this.arg2 = arg2;
    return this;
  }

  /**
   * If set, serves as a sub-identifier to the arg1 field for the type of resource this transaction relates to. Typically a token ID.
   * @return arg2
   */
  @javax.annotation.Nullable
  public String getArg2() {
    return arg2;
  }

  public void setArg2(String arg2) {
    this.arg2 = arg2;
  }


  public TgvalidatordTransaction currencyInfo(TgvalidatordCurrency currencyInfo) {
    this.currencyInfo = currencyInfo;
    return this;
  }

  /**
   * Get currencyInfo
   * @return currencyInfo
   */
  @javax.annotation.Nullable
  public TgvalidatordCurrency getCurrencyInfo() {
    return currencyInfo;
  }

  public void setCurrencyInfo(TgvalidatordCurrency currencyInfo) {
    this.currencyInfo = currencyInfo;
  }


  public TgvalidatordTransaction network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Get network
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public TgvalidatordTransaction requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * If set, contains the request ID that this transaction originated from.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public TgvalidatordTransaction confirmationBlock(String confirmationBlock) {
    this.confirmationBlock = confirmationBlock;
    return this;
  }

  /**
   * Get confirmationBlock
   * @return confirmationBlock
   */
  @javax.annotation.Nullable
  public String getConfirmationBlock() {
    return confirmationBlock;
  }

  public void setConfirmationBlock(String confirmationBlock) {
    this.confirmationBlock = confirmationBlock;
  }


  public TgvalidatordTransaction requestVisible(Boolean requestVisible) {
    this.requestVisible = requestVisible;
    return this;
  }

  /**
   * Indicates whether the requestId value refers to a request that is visible to the user.
   * @return requestVisible
   */
  @javax.annotation.Nullable
  public Boolean getRequestVisible() {
    return requestVisible;
  }

  public void setRequestVisible(Boolean requestVisible) {
    this.requestVisible = requestVisible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TgvalidatordTransaction tgvalidatordTransaction = (TgvalidatordTransaction) o;
    return Objects.equals(this.id, tgvalidatordTransaction.id) &&
        Objects.equals(this.direction, tgvalidatordTransaction.direction) &&
        Objects.equals(this.currency, tgvalidatordTransaction.currency) &&
        Objects.equals(this.sources, tgvalidatordTransaction.sources) &&
        Objects.equals(this.destinations, tgvalidatordTransaction.destinations) &&
        Objects.equals(this.amount, tgvalidatordTransaction.amount) &&
        Objects.equals(this.amountMainUnit, tgvalidatordTransaction.amountMainUnit) &&
        Objects.equals(this.fee, tgvalidatordTransaction.fee) &&
        Objects.equals(this.feeMainUnit, tgvalidatordTransaction.feeMainUnit) &&
        Objects.equals(this.hash, tgvalidatordTransaction.hash) &&
        Objects.equals(this.block, tgvalidatordTransaction.block) &&
        Objects.equals(this.receptionDate, tgvalidatordTransaction.receptionDate) &&
        Objects.equals(this.confirmationDate, tgvalidatordTransaction.confirmationDate) &&
        Objects.equals(this.transactionId, tgvalidatordTransaction.transactionId) &&
        Objects.equals(this.type, tgvalidatordTransaction.type) &&
        Objects.equals(this.uniqueId, tgvalidatordTransaction.uniqueId) &&
        Objects.equals(this.blockchain, tgvalidatordTransaction.blockchain) &&
        Objects.equals(this.arg1, tgvalidatordTransaction.arg1) &&
        Objects.equals(this.arg2, tgvalidatordTransaction.arg2) &&
        Objects.equals(this.currencyInfo, tgvalidatordTransaction.currencyInfo) &&
        Objects.equals(this.network, tgvalidatordTransaction.network) &&
        Objects.equals(this.requestId, tgvalidatordTransaction.requestId) &&
        Objects.equals(this.confirmationBlock, tgvalidatordTransaction.confirmationBlock) &&
        Objects.equals(this.requestVisible, tgvalidatordTransaction.requestVisible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, direction, currency, sources, destinations, amount, amountMainUnit, fee, feeMainUnit, hash, block, receptionDate, confirmationDate, transactionId, type, uniqueId, blockchain, arg1, arg2, currencyInfo, network, requestId, confirmationBlock, requestVisible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TgvalidatordTransaction {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    amountMainUnit: ").append(toIndentedString(amountMainUnit)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    feeMainUnit: ").append(toIndentedString(feeMainUnit)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    block: ").append(toIndentedString(block)).append("\n");
    sb.append("    receptionDate: ").append(toIndentedString(receptionDate)).append("\n");
    sb.append("    confirmationDate: ").append(toIndentedString(confirmationDate)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uniqueId: ").append(toIndentedString(uniqueId)).append("\n");
    sb.append("    blockchain: ").append(toIndentedString(blockchain)).append("\n");
    sb.append("    arg1: ").append(toIndentedString(arg1)).append("\n");
    sb.append("    arg2: ").append(toIndentedString(arg2)).append("\n");
    sb.append("    currencyInfo: ").append(toIndentedString(currencyInfo)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    confirmationBlock: ").append(toIndentedString(confirmationBlock)).append("\n");
    sb.append("    requestVisible: ").append(toIndentedString(requestVisible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("direction");
    openapiFields.add("currency");
    openapiFields.add("sources");
    openapiFields.add("destinations");
    openapiFields.add("amount");
    openapiFields.add("amountMainUnit");
    openapiFields.add("fee");
    openapiFields.add("feeMainUnit");
    openapiFields.add("hash");
    openapiFields.add("block");
    openapiFields.add("receptionDate");
    openapiFields.add("confirmationDate");
    openapiFields.add("transactionId");
    openapiFields.add("type");
    openapiFields.add("uniqueId");
    openapiFields.add("blockchain");
    openapiFields.add("arg1");
    openapiFields.add("arg2");
    openapiFields.add("currencyInfo");
    openapiFields.add("network");
    openapiFields.add("requestId");
    openapiFields.add("confirmationBlock");
    openapiFields.add("requestVisible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TgvalidatordTransaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TgvalidatordTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TgvalidatordTransaction is not found in the empty JSON string", TgvalidatordTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TgvalidatordTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TgvalidatordTransaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull()) {
        JsonArray jsonArraysources = jsonObj.getAsJsonArray("sources");
        if (jsonArraysources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
          }

          // validate the optional field `sources` (array)
          for (int i = 0; i < jsonArraysources.size(); i++) {
            TgvalidatordAddressInfo.validateJsonElement(jsonArraysources.get(i));
          };
        }
      }
      if (jsonObj.get("destinations") != null && !jsonObj.get("destinations").isJsonNull()) {
        JsonArray jsonArraydestinations = jsonObj.getAsJsonArray("destinations");
        if (jsonArraydestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
          }

          // validate the optional field `destinations` (array)
          for (int i = 0; i < jsonArraydestinations.size(); i++) {
            TgvalidatordAddressInfo.validateJsonElement(jsonArraydestinations.get(i));
          };
        }
      }
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("amountMainUnit") != null && !jsonObj.get("amountMainUnit").isJsonNull()) && !jsonObj.get("amountMainUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amountMainUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amountMainUnit").toString()));
      }
      if ((jsonObj.get("fee") != null && !jsonObj.get("fee").isJsonNull()) && !jsonObj.get("fee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fee").toString()));
      }
      if ((jsonObj.get("feeMainUnit") != null && !jsonObj.get("feeMainUnit").isJsonNull()) && !jsonObj.get("feeMainUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feeMainUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feeMainUnit").toString()));
      }
      if ((jsonObj.get("hash") != null && !jsonObj.get("hash").isJsonNull()) && !jsonObj.get("hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hash").toString()));
      }
      if ((jsonObj.get("block") != null && !jsonObj.get("block").isJsonNull()) && !jsonObj.get("block").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `block` to be a primitive type in the JSON string but got `%s`", jsonObj.get("block").toString()));
      }
      if ((jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull()) && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("uniqueId") != null && !jsonObj.get("uniqueId").isJsonNull()) && !jsonObj.get("uniqueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueId").toString()));
      }
      if ((jsonObj.get("blockchain") != null && !jsonObj.get("blockchain").isJsonNull()) && !jsonObj.get("blockchain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockchain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockchain").toString()));
      }
      if ((jsonObj.get("arg1") != null && !jsonObj.get("arg1").isJsonNull()) && !jsonObj.get("arg1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arg1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arg1").toString()));
      }
      if ((jsonObj.get("arg2") != null && !jsonObj.get("arg2").isJsonNull()) && !jsonObj.get("arg2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arg2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arg2").toString()));
      }
      // validate the optional field `currencyInfo`
      if (jsonObj.get("currencyInfo") != null && !jsonObj.get("currencyInfo").isJsonNull()) {
        TgvalidatordCurrency.validateJsonElement(jsonObj.get("currencyInfo"));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if ((jsonObj.get("confirmationBlock") != null && !jsonObj.get("confirmationBlock").isJsonNull()) && !jsonObj.get("confirmationBlock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmationBlock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmationBlock").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TgvalidatordTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TgvalidatordTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TgvalidatordTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TgvalidatordTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<TgvalidatordTransaction>() {
           @Override
           public void write(JsonWriter out, TgvalidatordTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TgvalidatordTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TgvalidatordTransaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TgvalidatordTransaction
   * @throws IOException if the JSON string is invalid with respect to TgvalidatordTransaction
   */
  public static TgvalidatordTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TgvalidatordTransaction.class);
  }

  /**
   * Convert an instance of TgvalidatordTransaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

